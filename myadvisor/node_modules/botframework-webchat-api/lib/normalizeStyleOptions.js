"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeStyleOptions;

var _defaultStyleOptions = _interopRequireDefault(require("./defaultStyleOptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO: [P4] We should add a notice for people who want to use "styleSet" instead of "styleOptions".
//       "styleSet" is actually CSS stylesheet and it is based on the DOM tree.
//       DOM tree may change from time to time, thus, maintaining "styleSet" becomes a constant effort.
// eslint-disable-next-line complexity
function normalizeStyleOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var filledOptions = _objectSpread(_objectSpread({}, _defaultStyleOptions.default), options); // Keep this list flat (no nested style) and serializable (no functions)


  var bubbleFromUserNubOffset = filledOptions.bubbleFromUserNubOffset,
      bubbleNubOffset = filledOptions.bubbleNubOffset,
      emojiSet = filledOptions.emojiSet;
  var normalizedBubbleFromUserNubOffset;
  var normalizedBubbleNubOffset;
  var normalizedEmojiSet;

  if (bubbleFromUserNubOffset === 'top') {
    normalizedBubbleFromUserNubOffset = 0;
  } else if (typeof bubbleFromUserNubOffset !== 'number') {
    normalizedBubbleFromUserNubOffset = -0;
  } else {
    normalizedBubbleFromUserNubOffset = bubbleFromUserNubOffset;
  }

  if (bubbleNubOffset === 'top') {
    normalizedBubbleNubOffset = 0;
  } else if (typeof bubbleNubOffset !== 'number') {
    normalizedBubbleNubOffset = -0;
  } else {
    normalizedBubbleNubOffset = bubbleNubOffset;
  }

  if (emojiSet === true) {
    normalizedEmojiSet = {
      ':)': '😊',
      ':-)': '😊',
      '(:': '😊',
      '(-:': '😊',
      ':-|': '😐',
      ':|': '😐',
      ':-(': '☹️',
      ':(': '☹️',
      ':-D': '😀',
      ':D': '😀',
      ':-p': '😛',
      ':p': '😛',
      ':-P': '😛',
      ':P': '😛',
      ':-o': '😲',
      ':o': '😲',
      ':O': '😲',
      ':-O': '😲',
      ':-0': '😲',
      ':0': '😲',
      ';-)': '😉',
      ';)': '😉',
      '<3': '❤️',
      '</3': '💔',
      '<\\3': '💔'
    };
  } else if (Object.prototype.toString.call(emojiSet) !== '[object Object]') {
    console.warn('botframework-webchat: emojiSet must be a boolean or an object with emoticon: emojiValues');
    normalizedEmojiSet = false;
  } else {
    normalizedEmojiSet = emojiSet;
  }

  return _objectSpread(_objectSpread({}, filledOptions), {}, {
    bubbleFromUserNubOffset: normalizedBubbleFromUserNubOffset,
    bubbleNubOffset: normalizedBubbleNubOffset,
    emojiSet: normalizedEmojiSet
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ub3JtYWxpemVTdHlsZU9wdGlvbnMudHMiXSwibmFtZXMiOlsibm9ybWFsaXplU3R5bGVPcHRpb25zIiwib3B0aW9ucyIsImZpbGxlZE9wdGlvbnMiLCJkZWZhdWx0U3R5bGVPcHRpb25zIiwiYnViYmxlRnJvbVVzZXJOdWJPZmZzZXQiLCJidWJibGVOdWJPZmZzZXQiLCJlbW9qaVNldCIsIm5vcm1hbGl6ZWRCdWJibGVGcm9tVXNlck51Yk9mZnNldCIsIm5vcm1hbGl6ZWRCdWJibGVOdWJPZmZzZXQiLCJub3JtYWxpemVkRW1vamlTZXQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJjb25zb2xlIiwid2FybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDZSxTQUFTQSxxQkFBVCxHQUErRTtBQUFBLE1BQWhEQyxPQUFnRCx1RUFBeEIsRUFBd0I7O0FBQzVGLE1BQU1DLGFBQXFDLG1DQUFRQyw0QkFBUixHQUFnQ0YsT0FBaEMsQ0FBM0MsQ0FENEYsQ0FHNUY7OztBQUg0RixNQUlwRkcsdUJBSm9GLEdBSTdCRixhQUo2QixDQUlwRkUsdUJBSm9GO0FBQUEsTUFJM0RDLGVBSjJELEdBSTdCSCxhQUo2QixDQUkzREcsZUFKMkQ7QUFBQSxNQUkxQ0MsUUFKMEMsR0FJN0JKLGFBSjZCLENBSTFDSSxRQUowQztBQU01RixNQUFJQyxpQ0FBSjtBQUNBLE1BQUlDLHlCQUFKO0FBQ0EsTUFBSUMsa0JBQUo7O0FBRUEsTUFBSUwsdUJBQXVCLEtBQUssS0FBaEMsRUFBdUM7QUFDckNHLElBQUFBLGlDQUFpQyxHQUFHLENBQXBDO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBT0gsdUJBQVAsS0FBbUMsUUFBdkMsRUFBaUQ7QUFDdERHLElBQUFBLGlDQUFpQyxHQUFHLENBQUMsQ0FBckM7QUFDRCxHQUZNLE1BRUE7QUFDTEEsSUFBQUEsaUNBQWlDLEdBQUdILHVCQUFwQztBQUNEOztBQUVELE1BQUlDLGVBQWUsS0FBSyxLQUF4QixFQUErQjtBQUM3QkcsSUFBQUEseUJBQXlCLEdBQUcsQ0FBNUI7QUFDRCxHQUZELE1BRU8sSUFBSSxPQUFPSCxlQUFQLEtBQTJCLFFBQS9CLEVBQXlDO0FBQzlDRyxJQUFBQSx5QkFBeUIsR0FBRyxDQUFDLENBQTdCO0FBQ0QsR0FGTSxNQUVBO0FBQ0xBLElBQUFBLHlCQUF5QixHQUFHSCxlQUE1QjtBQUNEOztBQUVELE1BQUlDLFFBQVEsS0FBSyxJQUFqQixFQUF1QjtBQUNyQkcsSUFBQUEsa0JBQWtCLEdBQUc7QUFDbkIsWUFBTSxJQURhO0FBRW5CLGFBQU8sSUFGWTtBQUduQixZQUFNLElBSGE7QUFJbkIsYUFBTyxJQUpZO0FBS25CLGFBQU8sSUFMWTtBQU1uQixZQUFNLElBTmE7QUFPbkIsYUFBTyxJQVBZO0FBUW5CLFlBQU0sSUFSYTtBQVNuQixhQUFPLElBVFk7QUFVbkIsWUFBTSxJQVZhO0FBV25CLGFBQU8sSUFYWTtBQVluQixZQUFNLElBWmE7QUFhbkIsYUFBTyxJQWJZO0FBY25CLFlBQU0sSUFkYTtBQWVuQixhQUFPLElBZlk7QUFnQm5CLFlBQU0sSUFoQmE7QUFpQm5CLFlBQU0sSUFqQmE7QUFrQm5CLGFBQU8sSUFsQlk7QUFtQm5CLGFBQU8sSUFuQlk7QUFvQm5CLFlBQU0sSUFwQmE7QUFxQm5CLGFBQU8sSUFyQlk7QUFzQm5CLFlBQU0sSUF0QmE7QUF1Qm5CLFlBQU0sSUF2QmE7QUF3Qm5CLGFBQU8sSUF4Qlk7QUF5Qm5CLGNBQVE7QUF6QlcsS0FBckI7QUEyQkQsR0E1QkQsTUE0Qk8sSUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JQLFFBQS9CLE1BQTZDLGlCQUFqRCxFQUFvRTtBQUN6RVEsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsMEZBQWI7QUFDQU4sSUFBQUEsa0JBQWtCLEdBQUcsS0FBckI7QUFDRCxHQUhNLE1BR0E7QUFDTEEsSUFBQUEsa0JBQWtCLEdBQUdILFFBQXJCO0FBQ0Q7O0FBRUQseUNBQ0tKLGFBREw7QUFFRUUsSUFBQUEsdUJBQXVCLEVBQUVHLGlDQUYzQjtBQUdFRixJQUFBQSxlQUFlLEVBQUVHLHlCQUhuQjtBQUlFRixJQUFBQSxRQUFRLEVBQUVHO0FBSlo7QUFNRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmF1bHRTdHlsZU9wdGlvbnMgZnJvbSAnLi9kZWZhdWx0U3R5bGVPcHRpb25zJztcbmltcG9ydCBTdHlsZU9wdGlvbnMsIHsgU3RyaWN0U3R5bGVPcHRpb25zIH0gZnJvbSAnLi9TdHlsZU9wdGlvbnMnO1xuXG4vLyBUT0RPOiBbUDRdIFdlIHNob3VsZCBhZGQgYSBub3RpY2UgZm9yIHBlb3BsZSB3aG8gd2FudCB0byB1c2UgXCJzdHlsZVNldFwiIGluc3RlYWQgb2YgXCJzdHlsZU9wdGlvbnNcIi5cbi8vICAgICAgIFwic3R5bGVTZXRcIiBpcyBhY3R1YWxseSBDU1Mgc3R5bGVzaGVldCBhbmQgaXQgaXMgYmFzZWQgb24gdGhlIERPTSB0cmVlLlxuLy8gICAgICAgRE9NIHRyZWUgbWF5IGNoYW5nZSBmcm9tIHRpbWUgdG8gdGltZSwgdGh1cywgbWFpbnRhaW5pbmcgXCJzdHlsZVNldFwiIGJlY29tZXMgYSBjb25zdGFudCBlZmZvcnQuXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVTdHlsZU9wdGlvbnMob3B0aW9uczogU3R5bGVPcHRpb25zID0ge30pOiBTdHJpY3RTdHlsZU9wdGlvbnMge1xuICBjb25zdCBmaWxsZWRPcHRpb25zOiBSZXF1aXJlZDxTdHlsZU9wdGlvbnM+ID0geyAuLi5kZWZhdWx0U3R5bGVPcHRpb25zLCAuLi5vcHRpb25zIH07XG5cbiAgLy8gS2VlcCB0aGlzIGxpc3QgZmxhdCAobm8gbmVzdGVkIHN0eWxlKSBhbmQgc2VyaWFsaXphYmxlIChubyBmdW5jdGlvbnMpXG4gIGNvbnN0IHsgYnViYmxlRnJvbVVzZXJOdWJPZmZzZXQsIGJ1YmJsZU51Yk9mZnNldCwgZW1vamlTZXQgfSA9IGZpbGxlZE9wdGlvbnM7XG5cbiAgbGV0IG5vcm1hbGl6ZWRCdWJibGVGcm9tVXNlck51Yk9mZnNldDogbnVtYmVyO1xuICBsZXQgbm9ybWFsaXplZEJ1YmJsZU51Yk9mZnNldDogbnVtYmVyO1xuICBsZXQgbm9ybWFsaXplZEVtb2ppU2V0OiBmYWxzZSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbiAgaWYgKGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0ID09PSAndG9wJykge1xuICAgIG5vcm1hbGl6ZWRCdWJibGVGcm9tVXNlck51Yk9mZnNldCA9IDA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0ICE9PSAnbnVtYmVyJykge1xuICAgIG5vcm1hbGl6ZWRCdWJibGVGcm9tVXNlck51Yk9mZnNldCA9IC0wO1xuICB9IGVsc2Uge1xuICAgIG5vcm1hbGl6ZWRCdWJibGVGcm9tVXNlck51Yk9mZnNldCA9IGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0O1xuICB9XG5cbiAgaWYgKGJ1YmJsZU51Yk9mZnNldCA9PT0gJ3RvcCcpIHtcbiAgICBub3JtYWxpemVkQnViYmxlTnViT2Zmc2V0ID0gMDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYnViYmxlTnViT2Zmc2V0ICE9PSAnbnVtYmVyJykge1xuICAgIG5vcm1hbGl6ZWRCdWJibGVOdWJPZmZzZXQgPSAtMDtcbiAgfSBlbHNlIHtcbiAgICBub3JtYWxpemVkQnViYmxlTnViT2Zmc2V0ID0gYnViYmxlTnViT2Zmc2V0O1xuICB9XG5cbiAgaWYgKGVtb2ppU2V0ID09PSB0cnVlKSB7XG4gICAgbm9ybWFsaXplZEVtb2ppU2V0ID0ge1xuICAgICAgJzopJzogJ/CfmIonLFxuICAgICAgJzotKSc6ICfwn5iKJyxcbiAgICAgICcoOic6ICfwn5iKJyxcbiAgICAgICcoLTonOiAn8J+YiicsXG4gICAgICAnOi18JzogJ/CfmJAnLFxuICAgICAgJzp8JzogJ/CfmJAnLFxuICAgICAgJzotKCc6ICfimLnvuI8nLFxuICAgICAgJzooJzogJ+KYue+4jycsXG4gICAgICAnOi1EJzogJ/CfmIAnLFxuICAgICAgJzpEJzogJ/CfmIAnLFxuICAgICAgJzotcCc6ICfwn5ibJyxcbiAgICAgICc6cCc6ICfwn5ibJyxcbiAgICAgICc6LVAnOiAn8J+YmycsXG4gICAgICAnOlAnOiAn8J+YmycsXG4gICAgICAnOi1vJzogJ/CfmLInLFxuICAgICAgJzpvJzogJ/CfmLInLFxuICAgICAgJzpPJzogJ/CfmLInLFxuICAgICAgJzotTyc6ICfwn5iyJyxcbiAgICAgICc6LTAnOiAn8J+YsicsXG4gICAgICAnOjAnOiAn8J+YsicsXG4gICAgICAnOy0pJzogJ/CfmIknLFxuICAgICAgJzspJzogJ/CfmIknLFxuICAgICAgJzwzJzogJ+KdpO+4jycsXG4gICAgICAnPC8zJzogJ/CfkpQnLFxuICAgICAgJzxcXFxcMyc6ICfwn5KUJ1xuICAgIH07XG4gIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVtb2ppU2V0KSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBlbW9qaVNldCBtdXN0IGJlIGEgYm9vbGVhbiBvciBhbiBvYmplY3Qgd2l0aCBlbW90aWNvbjogZW1vamlWYWx1ZXMnKTtcbiAgICBub3JtYWxpemVkRW1vamlTZXQgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBub3JtYWxpemVkRW1vamlTZXQgPSBlbW9qaVNldDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uZmlsbGVkT3B0aW9ucyxcbiAgICBidWJibGVGcm9tVXNlck51Yk9mZnNldDogbm9ybWFsaXplZEJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0LFxuICAgIGJ1YmJsZU51Yk9mZnNldDogbm9ybWFsaXplZEJ1YmJsZU51Yk9mZnNldCxcbiAgICBlbW9qaVNldDogbm9ybWFsaXplZEVtb2ppU2V0XG4gIH07XG59XG4iXX0=