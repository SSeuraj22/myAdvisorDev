{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/DeleteProgramme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n/*\n    DeleteProgramme allows a staff member to delete programmes from the system.\n*/\n\nfunction DeleteProgramme({\n  setShow,\n  programmes,\n  refreshTable\n}) {\n  _s();\n\n  //const ref = useRef();\n\n  /*\n      The validated state is used to keep track of the validity of the delete programme form.\n      It's initial state is false.\n  */\n  const [validated, setValidated] = useState(false);\n  /*\n      The checkBoxState array is used to keep track of the checked state of the checkboxes.\n      It's initial state is false.\n  */\n\n  const [checkBoxState, setCheckBoxState] = useState(new Array(programmes.length).fill(false));\n  /*\n      notifyAdded is used to display toast notifications for events. It displays a green toast.\n  */\n\n  const notifyAdded = text => toast.success(text);\n  /*\n      notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n  */\n\n\n  const notifyNotAdded = text => toast.error(text);\n  /*\n      HandleChange gets the data from the form as passes it to the deleteProgramme function.\n  */\n\n\n  const handleChange = event => {\n    console.log(event.target);\n    console.log(programmes[0].name);\n    console.log(checkBoxState[0]); //for()\n    //if(event.target.name === programmes[i].name){\n    //}\n\n    programmes.map((prog, progIndex) => prog[progIndex]); //const updateCheckboxState = checkBoxState.map((checkbox, arrayIndex) => arrayIndex === checkIndex ? !checkbox: checkbox\n    //);\n    //console.log(checkBoxState);\n    //console.log(updateCheckboxState);\n    // setCheckBoxState(updateCheckboxState);\n  };\n  /*\n      HandleSubmit gets the data from the form as passes it to the deleteProgramme function.\n  */\n\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    setValidated(true);\n    const formData = {//name : form.elements.name.value\n    }; //console.log(event)\n    //console.log(event.target.checked)\n    //deleteProgramme(formData)\n  };\n  /*\n      deleteProgramme creates a post request to the server, which deletes a programme from the system.\n  */\n\n\n  async function deleteProgramme(data) {\n    try {\n      const res = await fetch(\"/programmes/delete\", {\n        method: \"POST\",\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      setShow(false);\n      refreshTable();\n      const status = await res.statusText;\n\n      if (status == \"Unauthorized\") {\n        notifyNotAdded(data.name + \" Already Exists!\");\n      } else {\n        notifyAdded(data.name + \" Deleted!\");\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      validated: validated,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Choose Programme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), programmes.map((programme, indexNum) => /*#__PURE__*/_jsxDEV(Form.Check, {\n          label: programme.name,\n          name: programme.name //checked={checkBoxState[indexNum]}\n          ,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"float-right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-custom\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      pauseOnHover: true,\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DeleteProgramme, \"ILlntlOsKrEPi39iPQqmKSuNUQs=\");\n\n_c = DeleteProgramme;\nexport default DeleteProgramme;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteProgramme\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/DeleteProgramme.js"],"names":["React","useState","useRef","Button","Form","Col","ToastContainer","toast","DeleteProgramme","setShow","programmes","refreshTable","validated","setValidated","checkBoxState","setCheckBoxState","Array","length","fill","notifyAdded","text","success","notifyNotAdded","error","handleChange","event","console","log","target","name","map","prog","progIndex","handleSubmit","form","currentTarget","checkValidity","preventDefault","stopPropagation","formData","deleteProgramme","data","res","fetch","method","headers","token","localStorage","getItem","body","JSON","stringify","status","statusText","err","message","programme","indexNum"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    DeleteProgramme allows a staff member to delete programmes from the system.\n*/\n\nfunction DeleteProgramme({setShow, programmes, refreshTable}) {\n    //const ref = useRef();\n            \n    /*\n        The validated state is used to keep track of the validity of the delete programme form.\n        It's initial state is false.\n    */    \n    const [validated, setValidated] = useState(false);\n\n    /*\n        The checkBoxState array is used to keep track of the checked state of the checkboxes.\n        It's initial state is false.\n    */    \n    const [checkBoxState, setCheckBoxState] = useState(new Array(programmes.length).fill(false));\n\n    /*\n        notifyAdded is used to display toast notifications for events. It displays a green toast.\n    */    \n    const notifyAdded = (text) => toast.success(text);\n\n    /*\n        notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n    */    \n        const notifyNotAdded = (text) => toast.error(text);\n\n    /*\n        HandleChange gets the data from the form as passes it to the deleteProgramme function.\n    */    \n        const handleChange = (event) => {\n            console.log(event.target);\n            console.log(programmes[0].name)\n            console.log(checkBoxState[0])\n            \n            //for()\n            //if(event.target.name === programmes[i].name){\n\n            //}\n\n            programmes.map((prog, progIndex) => (prog[progIndex]))\n\n            \n            //const updateCheckboxState = checkBoxState.map((checkbox, arrayIndex) => arrayIndex === checkIndex ? !checkbox: checkbox\n            //);\n            //console.log(checkBoxState);\n            //console.log(updateCheckboxState);\n\n           // setCheckBoxState(updateCheckboxState);\n        };\n\n    /*\n        HandleSubmit gets the data from the form as passes it to the deleteProgramme function.\n    */    \n        const handleSubmit = (event) => {\n            \n\n            const form = event.currentTarget;\n    \n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n    \n            event.preventDefault();\n            event.stopPropagation();\n            setValidated(true);\n    \n            const formData = {\n                //name : form.elements.name.value\n            }\n            //console.log(event)\n            //console.log(event.target.checked)\n            \n    \n            //deleteProgramme(formData)\n        };\n    \n        /*\n            deleteProgramme creates a post request to the server, which deletes a programme from the system.\n        */\n        async function deleteProgramme(data) {\n            try {\n              const res = await fetch(\"/programmes/delete\", {\n                method: \"POST\",\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify(data),\n              });\n        \n              setShow(false);\n              refreshTable();\n\n              const status = await res.statusText;\n              if(status==\"Unauthorized\"){\n                notifyNotAdded(data.name + \" Already Exists!\");\n              }\n              else{\n                notifyAdded(data.name + \" Deleted!\");\n              }\n              \n            } catch (err) {\n              console.error(err.message);\n            }\n        }\n    \n        return (\n            <>\n                <Form validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"name\">\n                        <Form.Label>Choose Programme</Form.Label>\n                        {programmes.map((programme, indexNum) => (\n                            \n                            \n        \n                            <Form.Check \n                                label={programme.name}\n                                name={programme.name}\n                                //checked={checkBoxState[indexNum]}\n                                onChange={handleChange}\n                                \n                                \n                            />\n                            \n                        ))}\n                        \n                    </Form.Group>\n    \n                    <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Delete</Button></div>\n                </Form>\n    \n                <ToastContainer \n                    pauseOnHover\n                    position=\"bottom-right\"\n                />\n            </>\n        );\n}\n\nexport default DeleteProgramme;"]},"metadata":{},"sourceType":"module"}