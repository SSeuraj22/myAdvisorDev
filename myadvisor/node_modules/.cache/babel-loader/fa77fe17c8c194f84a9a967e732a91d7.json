{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst Finish = props => {\n  _s();\n\n  const history = useHistory(); // Used to redirect to a new path without losing state values\n\n  const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n\n  const [gradUploaded, setGradUploaded] = useState(false);\n  const [totalCreditsCompleted, setTotCredComplete] = useState(0);\n  setTotCredComplete(props.studCredComplete + props.credits);\n  console.log(\"completed credits \" + props.studCredComplete);\n  console.log(\"credits remaining \" + props.credits); // If the user's recommended courses has been lost, redirect to start page to generate them again\n\n  if (props.recCourses === null) {\n    history.push({\n      pathname: '/start'\n    });\n  }\n\n  useEffect(async () => {\n    props.setProg(100); // Set advising progress to 100%\n\n    props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n\n    if (!uploaded) {\n      // If advising session has not yet been uploaded\n      var requestOptions = {\n        // Create POST request\n        method: 'POST',\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        redirect: 'follow'\n      };\n      fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n      .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n      setUploaded(true);\n    }\n\n    if (totalCreditsCompleted === 93) {\n      if (!gradUploaded) {\n        //if potential graduate has not been uploaded yet\n        var requestOptions = {\n          // Create POST request\n          method: 'POST',\n          headers: {\n            token: localStorage.getItem(\"token\"),\n            \"Content-type\": \"application/json\"\n          },\n          redirect: 'follow'\n        };\n        fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n        .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n        setGradUploaded(true);\n      }\n    }\n  });\n\n  async function uploadAdvisingSession() {\n    try {\n      const {\n        data: response\n      } = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`); //use data destructuring to get data from the promise object\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card almost-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-header blue-txt\",\n                children: \"You're all done with advising!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-text\",\n                children: \"Here's a list of all the courses you chose:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 33\n              }, this), Array.from({\n                length: props.chosenCourses.length\n              }, (_, k) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"course-chosen blue-txt\",\n                  children: props.chosenCourses[k]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 48\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Finish, \"UeeL6CjLzWAaDurKiwz47UzygY0=\", false, function () {\n  return [useHistory];\n});\n\n_c = Finish;\nexport default Finish;\n\nvar _c;\n\n$RefreshReg$(_c, \"Finish\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js"],"names":["React","Component","useHistory","axios","useEffect","useState","Finish","props","history","uploaded","setUploaded","gradUploaded","setGradUploaded","totalCreditsCompleted","setTotCredComplete","studCredComplete","credits","console","log","recCourses","push","pathname","setProg","setShowBotButtons","requestOptions","method","headers","token","localStorage","getItem","redirect","fetch","then","response","text","result","catch","error","uploadAdvisingSession","data","post","Array","from","length","chosenCourses","_","k"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst Finish = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n    const [gradUploaded, setGradUploaded] = useState(false);\n    const [totalCreditsCompleted, setTotCredComplete] = useState(0);\n    setTotCredComplete(props.studCredComplete + props.credits);\n\n    console.log(\"completed credits \"+ props.studCredComplete);\n    console.log(\"credits remaining \"+ props.credits);\n\n    // If the user's recommended courses has been lost, redirect to start page to generate them again\n    if (props.recCourses === null) { \n        history.push({\n        pathname: '/start'\n        })\n    }\n\n    useEffect(async() => {\n        props.setProg(100); // Set advising progress to 100%\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n\n        if (!uploaded) { // If advising session has not yet been uploaded\n            var requestOptions = { // Create POST request\n                method: 'POST',\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                redirect: 'follow'\n            };\n\n            fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            \n            setUploaded(true);\n        }\n\n        if(totalCreditsCompleted===93){\n            if(!gradUploaded){//if potential graduate has not been uploaded yet\n                var requestOptions = { // Create POST request\n                    method: 'POST',\n                    headers: {\n                        token: localStorage.getItem(\"token\"),\n                        \"Content-type\": \"application/json\",\n                    },\n                    redirect: 'follow'\n                };\n                fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                \n                setGradUploaded(true);\n            }\n        }\n        \n\n    });\n\n    async function uploadAdvisingSession() {\n        try {\n          const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n          return response\n        }\n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    \n \n\n    return (\n        <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're all done with advising!</p>\n                                <p className=\"almost-text\">Here's a list of all the courses you chose:</p>\n                                {\n                                    Array.from({ length: props.chosenCourses.length }, (_, k) => {\n                                        return <p className=\"course-chosen blue-txt\">{props.chosenCourses[k]}</p>\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  \n}\n\nexport default Finish;\n"]},"metadata":{},"sourceType":"module"}