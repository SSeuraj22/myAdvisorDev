{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MessageType } from \"../common/Exports\";\nimport { CancellationErrorCode, ConversationTranscriptionCanceledEventArgs, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\n\n    this.sendSpeechEvent = (connection, payload) => {\n      const speechEventJson = JSON.stringify(payload);\n\n      if (speechEventJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.event\", this.privRequestSession.requestId, \"application/json\", speechEventJson));\n      }\n\n      return;\n    };\n\n    this.privTranscriberRecognizer = transcriber;\n    this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\n  }\n\n  sendSpeechEventAsync(info, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        const connection = yield this.fetchConnection();\n        yield this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\n      }\n    });\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      const resultProps = new PropertyCollection();\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      let processed = false;\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n        case \"speech.fragment\":\n          const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n          result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, hypothesis.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(offset);\n          const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n          if (!!this.privTranscriberRecognizer.recognizing) {\n            try {\n              this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"speech.phrase\":\n          const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n          if (ResultReason.Canceled === resultReason) {\n            const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            yield this.cancelRecognitionLocal(cancelReason, EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined);\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, simple.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n              } else {\n                const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, undefined, connectionMessage.textBody, resultProps);\n              }\n\n              const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranscriberRecognizer.recognized) {\n                try {\n                  this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    });\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranscriberRecognizer.canceled) {\n      const cancelEvent = new ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      undefined, // Speaker Id\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  } // Encapsulated for derived service recognizers that need to send additional JSON\n\n\n  sendTranscriptionStartJSON(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendSpeechContext(connection);\n      const info = this.privTranscriberRecognizer.getConversationInfo();\n      const payload = this.createSpeechEventPayload(info, \"start\");\n      yield this.sendSpeechEvent(connection, payload);\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n\n  createSpeechEventPayload(info, command) {\n    const meeting = \"meeting\";\n    const eventDict = {\n      id: meeting,\n      name: command,\n      meeting: info.conversationProperties\n    };\n    const idString = \"id\";\n    const attendees = \"attendees\";\n    const record = \"record\";\n    eventDict[meeting][idString] = info.id;\n    eventDict[meeting][attendees] = info.participants;\n    eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\n    return eventDict;\n  }\n\n}","map":{"version":3,"sources":["src/common.speech/TranscriptionServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privTranscriberRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranscriberRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranscriberRecognizer.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection);\r\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n        await this.sendSpeechEvent(connection, payload);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent = (connection: IConnection, payload: { [id: string]: any }): Promise<void> => {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const meeting: string = \"meeting\";\r\n        const eventDict: { [id: string]: any } = { id: meeting, name: command, meeting: info.conversationProperties };\r\n        const idString: string = \"id\";\r\n        const attendees: string = \"attendees\";\r\n        const record: string = \"record\";\r\n        eventDict[meeting][idString] = info.id;\r\n        eventDict[meeting][attendees] = info.participants;\r\n        eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\r\n        return eventDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}