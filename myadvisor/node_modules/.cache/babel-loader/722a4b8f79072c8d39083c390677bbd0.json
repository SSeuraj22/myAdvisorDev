{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tabbableElements;\n\nfunction tabbableElements(element) {\n  // This is an incomplete list, due to the complexity of testing for every scenario.\n  // For full-list, please refer to https://allyjs.io/data-tables/focusable.html\n  var candidates = element.querySelectorAll('a[href], area[href], audio[controls], button:not(:disabled), iframe, input:not(:disabled), keygen, select:not(:disabled), summary, textarea:not(:disabled), video[controls], [contenteditable], [tabindex]');\n  return [].filter.call(candidates, function (element) {\n    var tabIndexAttribute = element.attributes.getNamedItem('tabindex');\n\n    if (tabIndexAttribute && tabIndexAttribute.specified) {\n      var value = parseInt(tabIndexAttribute.value, 10);\n      return value >= 0 || isNaN(value) && element.nodeName.toLowerCase() === 'input';\n    }\n\n    return true;\n  });\n}","map":{"version":3,"sources":["../../src/Utils/tabbableElements.js"],"names":["candidates","element","tabIndexAttribute","value","parseInt","isNaN"],"mappings":";;;;;;;AAAe,SAAA,gBAAA,CAAA,OAAA,EAAmC;AAChD;AACA;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAPA,gBAAAA,CAAnB,4MAAmBA,CAAnB;AAIA,SAAO,GAAA,MAAA,CAAA,IAAA,CAAA,UAAA,EAA2B,UAAA,OAAA,EAAW;AAC3C,QAAMC,iBAAiB,GAAGD,OAAO,CAAPA,UAAAA,CAAAA,YAAAA,CAA1B,UAA0BA,CAA1B;;AAEA,QAAIC,iBAAiB,IAAIA,iBAAiB,CAA1C,SAAA,EAAsD;AACpD,UAAMC,KAAK,GAAGC,QAAQ,CAACF,iBAAiB,CAAlB,KAAA,EAAtB,EAAsB,CAAtB;AAEA,aAAOC,KAAK,IAALA,CAAAA,IAAeE,KAAK,CAALA,KAAK,CAALA,IAAgBJ,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,OAAtC,OAAA;AACD;;AAED,WAAA,IAAA;AATF,GAAO,CAAP;AAWD","sourcesContent":["export default function tabbableElements(element) {\n  // This is an incomplete list, due to the complexity of testing for every scenario.\n  // For full-list, please refer to https://allyjs.io/data-tables/focusable.html\n  const candidates = element.querySelectorAll(\n    'a[href], area[href], audio[controls], button:not(:disabled), iframe, input:not(:disabled), keygen, select:not(:disabled), summary, textarea:not(:disabled), video[controls], [contenteditable], [tabindex]'\n  );\n\n  return [].filter.call(candidates, element => {\n    const tabIndexAttribute = element.attributes.getNamedItem('tabindex');\n\n    if (tabIndexAttribute && tabIndexAttribute.specified) {\n      const value = parseInt(tabIndexAttribute.value, 10);\n\n      return value >= 0 || (isNaN(value) && element.nodeName.toLowerCase() === 'input');\n    }\n\n    return true;\n  });\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}