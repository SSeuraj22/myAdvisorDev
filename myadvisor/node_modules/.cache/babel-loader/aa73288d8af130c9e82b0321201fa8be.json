{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectSuggestedActions = exports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _reactFilm = _interopRequireWildcard(require(\"react-film\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _ScreenReaderText = _interopRequireDefault(require(\"../ScreenReaderText\"));\n\nvar _SuggestedAction = _interopRequireDefault(require(\"./SuggestedAction\"));\n\nvar _useLocalizeAccessKey = _interopRequireDefault(require(\"../hooks/internal/useLocalizeAccessKey\"));\n\nvar _useNonce3 = _interopRequireDefault(require(\"../hooks/internal/useNonce\"));\n\nvar _useStyleSet7 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nvar _useSuggestedActionsAccessKey = _interopRequireDefault(require(\"../hooks/internal/useSuggestedActionsAccessKey\"));\n\nvar _useUniqueId = _interopRequireDefault(require(\"../hooks/internal/useUniqueId\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useDirection = _botframeworkWebchatApi.hooks.useDirection,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,\n    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;\nvar ROOT_STYLE = {\n  '&.webchat__suggested-actions': {\n    '&.webchat__suggested-actions--flow-layout .webchat__suggested-actions__flow-box': {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    '&.webchat__suggested-actions--stack-layout .webchat__suggested-actions__stack': {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }\n};\n\nfunction suggestedActionText(_ref) {\n  var displayText = _ref.displayText,\n      title = _ref.title,\n      type = _ref.type,\n      value = _ref.value;\n\n  if (type === 'messageBack') {\n    return title || displayText;\n  } else if (title) {\n    return title;\n  } else if (typeof value === 'string') {\n    return value;\n  }\n\n  return JSON.stringify(value);\n}\n\nvar connectSuggestedActions = function connectSuggestedActions() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref2) {\n    var language = _ref2.language,\n        suggestedActions = _ref2.suggestedActions;\n    return {\n      language: language,\n      suggestedActions: suggestedActions\n    };\n  }].concat(selectors));\n};\n\nexports.connectSuggestedActions = connectSuggestedActions;\n\nvar SuggestedActionCarouselContainer = function SuggestedActionCarouselContainer(_ref3) {\n  var children = _ref3.children,\n      className = _ref3.className,\n      screenReaderText = _ref3.screenReaderText;\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      _useStyleOptions2$ = _useStyleOptions2[0],\n      suggestedActionsCarouselFlipperBoxWidth = _useStyleOptions2$.suggestedActionsCarouselFlipperBoxWidth,\n      suggestedActionsCarouselFlipperCursor = _useStyleOptions2$.suggestedActionsCarouselFlipperCursor,\n      suggestedActionsCarouselFlipperSize = _useStyleOptions2$.suggestedActionsCarouselFlipperSize;\n\n  var _useStyleSet = (0, _useStyleSet7.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      suggestedActionsStyleSet = _useStyleSet2[0].suggestedActions;\n\n  var _useDirection = useDirection(),\n      _useDirection2 = _slicedToArray(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var _useNonce = (0, _useNonce3.default)(),\n      _useNonce2 = _slicedToArray(_useNonce, 1),\n      nonce = _useNonce2[0];\n\n  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var filmStyleSet = (0, _react.useMemo)(function () {\n    return (0, _reactFilm.createBasicStyleSet)({\n      autoHide: false,\n      cursor: suggestedActionsCarouselFlipperCursor,\n      flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,\n      flipperSize: suggestedActionsCarouselFlipperSize\n    });\n  }, [suggestedActionsCarouselFlipperBoxWidth, suggestedActionsCarouselFlipperCursor, suggestedActionsCarouselFlipperSize]);\n  return (\n    /*#__PURE__*/\n    // TODO: The content of suggested actions should be the labelled by the activity.\n    //       That means, when the user focus into the suggested actions, it should read similar to \"Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button.\"\n    _react.default.createElement(\"div\", {\n      \"aria-labelledby\": ariaLabelId,\n      \"aria-live\": \"polite\",\n      className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--carousel-layout', {\n        'webchat__suggested-actions--rtl': direction === 'rtl'\n      }, rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),\n      role: \"status\"\n    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n      id: ariaLabelId,\n      text: screenReaderText\n    }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(_reactFilm.default, {\n      autoCenter: false,\n      className: \"webchat__suggested-actions__carousel\",\n      dir: direction,\n      flipperBlurFocusOnClick: true,\n      nonce: nonce,\n      showDots: false,\n      showScrollBar: false,\n      styleSet: filmStyleSet\n    }, children))\n  );\n};\n\nSuggestedActionCarouselContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\nSuggestedActionCarouselContainer.propTypes = {\n  children: _propTypes.default.any,\n  className: _propTypes.default.string,\n  screenReaderText: _propTypes.default.string.isRequired\n};\n\nvar SuggestedActionFlowContainer = function SuggestedActionFlowContainer(_ref4) {\n  var children = _ref4.children,\n      className = _ref4.className,\n      screenReaderText = _ref4.screenReaderText;\n\n  var _useStyleSet3 = (0, _useStyleSet7.default)(),\n      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),\n      suggestedActionsStyleSet = _useStyleSet4[0].suggestedActions;\n\n  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-labelledby\": ariaLabelId,\n    \"aria-live\": \"polite\",\n    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--flow-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),\n    role: \"status\"\n  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    id: ariaLabelId,\n    text: screenReaderText\n  }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"webchat__suggested-actions__flow-box\"\n  }, _react.default.Children.map(children, function (child) {\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"webchat__suggested-actions__item\"\n    }, child);\n  })));\n};\n\nSuggestedActionFlowContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\nSuggestedActionFlowContainer.propTypes = {\n  children: _propTypes.default.any,\n  className: _propTypes.default.string,\n  screenReaderText: _propTypes.default.string.isRequired\n};\n\nvar SuggestedActionStackedContainer = function SuggestedActionStackedContainer(_ref5) {\n  var children = _ref5.children,\n      className = _ref5.className,\n      screenReaderText = _ref5.screenReaderText;\n\n  var _useStyleSet5 = (0, _useStyleSet7.default)(),\n      _useStyleSet6 = _slicedToArray(_useStyleSet5, 1),\n      suggestedActionsStyleSet = _useStyleSet6[0].suggestedActions;\n\n  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-labelledby\": ariaLabelId,\n    \"aria-live\": \"polite\",\n    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--stacked-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),\n    role: \"status\"\n  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    id: ariaLabelId,\n    text: screenReaderText\n  }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"webchat__suggested-actions__stack\"\n  }, children));\n};\n\nSuggestedActionStackedContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\nSuggestedActionStackedContainer.propTypes = {\n  children: _propTypes.default.any,\n  className: _propTypes.default.string,\n  screenReaderText: _propTypes.default.string.isRequired\n};\n\nvar SuggestedActions = function SuggestedActions(_ref6) {\n  var className = _ref6.className,\n      _ref6$suggestedAction = _ref6.suggestedActions,\n      suggestedActions = _ref6$suggestedAction === void 0 ? [] : _ref6$suggestedAction;\n\n  var _useStyleOptions3 = useStyleOptions(),\n      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),\n      _useStyleOptions4$ = _useStyleOptions4[0],\n      suggestedActionLayout = _useStyleOptions4$.suggestedActionLayout,\n      suggestedActionsStackedLayoutButtonTextWrap = _useStyleOptions4$.suggestedActionsStackedLayoutButtonTextWrap;\n\n  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),\n      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),\n      accessKey = _useSuggestedActionsA2[0];\n\n  var localize = useLocalizer();\n  var localizeAccessKey = (0, _useLocalizeAccessKey.default)();\n  var screenReaderText = localize('SUGGESTED_ACTIONS_ALT', suggestedActions.length ? accessKey ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey)) : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT') : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT'));\n  var children = suggestedActions.map(function (_ref7, index) {\n    var displayText = _ref7.displayText,\n        image = _ref7.image,\n        imageAltText = _ref7.imageAltText,\n        text = _ref7.text,\n        title = _ref7.title,\n        type = _ref7.type,\n        value = _ref7.value;\n    return /*#__PURE__*/_react.default.createElement(_SuggestedAction.default, {\n      ariaHidden: true,\n      buttonText: suggestedActionText({\n        displayText: displayText,\n        title: title,\n        type: type,\n        value: value\n      }),\n      className: \"webchat__suggested-actions__button\",\n      displayText: displayText,\n      image: image,\n      imageAlt: imageAltText,\n      key: index,\n      text: text,\n      textClassName: suggestedActionLayout === 'stacked' && suggestedActionsStackedLayoutButtonTextWrap ? 'webchat__suggested-actions__button-text-stacked-text-wrap' : 'webchat__suggested-actions__button-text',\n      type: type,\n      value: value\n    });\n  });\n\n  if (suggestedActionLayout === 'flow') {\n    return /*#__PURE__*/_react.default.createElement(SuggestedActionFlowContainer, {\n      className: className,\n      screenReaderText: screenReaderText\n    }, children);\n  } else if (suggestedActionLayout === 'stacked') {\n    return /*#__PURE__*/_react.default.createElement(SuggestedActionStackedContainer, {\n      className: className,\n      screenReaderText: screenReaderText\n    }, children);\n  }\n\n  return /*#__PURE__*/_react.default.createElement(SuggestedActionCarouselContainer, {\n    className: className,\n    screenReaderText: screenReaderText\n  }, children);\n};\n\nSuggestedActions.defaultProps = {\n  className: ''\n};\nSuggestedActions.propTypes = {\n  className: _propTypes.default.string,\n  suggestedActions: _propTypes.default.arrayOf(_propTypes.default.shape({\n    displayText: _propTypes.default.string,\n    image: _propTypes.default.string,\n    imageAltText: _propTypes.default.string,\n    text: _propTypes.default.string,\n    title: _propTypes.default.string,\n    type: _propTypes.default.string.isRequired,\n    value: _propTypes.default.any\n  })).isRequired\n};\n\nvar _default = connectSuggestedActions()(SuggestedActions);\n\nexports.default = _default;","map":{"version":3,"sources":["../../src/SendBox/SuggestedActions.js"],"names":["useDirection","useLocalizer","useStyleOptions","hooks","ROOT_STYLE","display","flexWrap","flexDirection","displayText","title","type","value","JSON","connectSuggestedActions","selectors","language","suggestedActions","SuggestedActionCarouselContainer","children","className","screenReaderText","suggestedActionsCarouselFlipperBoxWidth","suggestedActionsCarouselFlipperCursor","suggestedActionsCarouselFlipperSize","suggestedActionsStyleSet","direction","nonce","ariaLabelId","rootClassName","filmStyleSet","autoHide","cursor","flipperBoxWidth","flipperSize","React","undefined","PropTypes","isRequired","SuggestedActionFlowContainer","SuggestedActionStackedContainer","SuggestedActions","suggestedActionLayout","suggestedActionsStackedLayoutButtonTextWrap","accessKey","localize","localizeAccessKey","image","imageAltText","text","suggestedActionText","any"],"mappings":"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","sourcesContent":["/* eslint react/no-array-index-key: \"off\" */\n\nimport { hooks } from 'botframework-webchat-api';\nimport BasicFilm, { createBasicStyleSet as createBasicStyleSetForReactFilm } from 'react-film';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useMemo } from 'react';\n\nimport connectToWebChat from '../connectToWebChat';\nimport ScreenReaderText from '../ScreenReaderText';\nimport SuggestedAction from './SuggestedAction';\nimport useLocalizeAccessKey from '../hooks/internal/useLocalizeAccessKey';\nimport useNonce from '../hooks/internal/useNonce';\nimport useStyleSet from '../hooks/useStyleSet';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\nimport useSuggestedActionsAccessKey from '../hooks/internal/useSuggestedActionsAccessKey';\nimport useUniqueId from '../hooks/internal/useUniqueId';\n\nconst { useDirection, useLocalizer, useStyleOptions } = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__suggested-actions': {\n    '&.webchat__suggested-actions--flow-layout .webchat__suggested-actions__flow-box': {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n\n    '&.webchat__suggested-actions--stack-layout .webchat__suggested-actions__stack': {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }\n};\n\nfunction suggestedActionText({ displayText, title, type, value }) {\n  if (type === 'messageBack') {\n    return title || displayText;\n  } else if (title) {\n    return title;\n  } else if (typeof value === 'string') {\n    return value;\n  }\n\n  return JSON.stringify(value);\n}\n\nconst connectSuggestedActions = (...selectors) =>\n  connectToWebChat(\n    ({ language, suggestedActions }) => ({\n      language,\n      suggestedActions\n    }),\n    ...selectors\n  );\n\nconst SuggestedActionCarouselContainer = ({ children, className, screenReaderText }) => {\n  const [\n    {\n      suggestedActionsCarouselFlipperBoxWidth,\n      suggestedActionsCarouselFlipperCursor,\n      suggestedActionsCarouselFlipperSize\n    }\n  ] = useStyleOptions();\n  const [{ suggestedActions: suggestedActionsStyleSet }] = useStyleSet();\n  const [direction] = useDirection();\n  const [nonce] = useNonce();\n  const ariaLabelId = useUniqueId('webchat__suggested-actions');\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const filmStyleSet = useMemo(\n    () =>\n      createBasicStyleSetForReactFilm({\n        autoHide: false,\n        cursor: suggestedActionsCarouselFlipperCursor,\n        flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,\n        flipperSize: suggestedActionsCarouselFlipperSize\n      }),\n    [\n      suggestedActionsCarouselFlipperBoxWidth,\n      suggestedActionsCarouselFlipperCursor,\n      suggestedActionsCarouselFlipperSize\n    ]\n  );\n\n  return (\n    // TODO: The content of suggested actions should be the labelled by the activity.\n    //       That means, when the user focus into the suggested actions, it should read similar to \"Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button.\"\n    <div\n      aria-labelledby={ariaLabelId}\n      aria-live=\"polite\"\n      className={classNames(\n        'webchat__suggested-actions',\n        'webchat__suggested-actions--carousel-layout',\n        { 'webchat__suggested-actions--rtl': direction === 'rtl' },\n        rootClassName,\n        suggestedActionsStyleSet + '',\n        (className || '') + ''\n      )}\n      role=\"status\"\n    >\n      <ScreenReaderText id={ariaLabelId} text={screenReaderText} />\n      {!!children && !!React.Children.count(children) && (\n        <BasicFilm\n          autoCenter={false}\n          className=\"webchat__suggested-actions__carousel\"\n          dir={direction}\n          flipperBlurFocusOnClick={true}\n          nonce={nonce}\n          showDots={false}\n          showScrollBar={false}\n          styleSet={filmStyleSet}\n        >\n          {children}\n        </BasicFilm>\n      )}\n    </div>\n  );\n};\n\nSuggestedActionCarouselContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\n\nSuggestedActionCarouselContainer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  screenReaderText: PropTypes.string.isRequired\n};\n\nconst SuggestedActionFlowContainer = ({ children, className, screenReaderText }) => {\n  const [{ suggestedActions: suggestedActionsStyleSet }] = useStyleSet();\n  const ariaLabelId = useUniqueId('webchat__suggested-actions');\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return (\n    <div\n      aria-labelledby={ariaLabelId}\n      aria-live=\"polite\"\n      className={classNames(\n        'webchat__suggested-actions',\n        'webchat__suggested-actions--flow-layout',\n        rootClassName,\n        suggestedActionsStyleSet + '',\n        (className || '') + ''\n      )}\n      role=\"status\"\n    >\n      <ScreenReaderText id={ariaLabelId} text={screenReaderText} />\n      {!!children && !!React.Children.count(children) && (\n        <div className=\"webchat__suggested-actions__flow-box\">\n          {React.Children.map(children, child => (\n            <div className=\"webchat__suggested-actions__item\">{child}</div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nSuggestedActionFlowContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\n\nSuggestedActionFlowContainer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  screenReaderText: PropTypes.string.isRequired\n};\n\nconst SuggestedActionStackedContainer = ({ children, className, screenReaderText }) => {\n  const [{ suggestedActions: suggestedActionsStyleSet }] = useStyleSet();\n  const ariaLabelId = useUniqueId('webchat__suggested-actions');\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return (\n    <div\n      aria-labelledby={ariaLabelId}\n      aria-live=\"polite\"\n      className={classNames(\n        'webchat__suggested-actions',\n        'webchat__suggested-actions--stacked-layout',\n        rootClassName,\n        suggestedActionsStyleSet + '',\n        (className || '') + ''\n      )}\n      role=\"status\"\n    >\n      <ScreenReaderText id={ariaLabelId} text={screenReaderText} />\n      {!!children && !!React.Children.count(children) && (\n        <div className=\"webchat__suggested-actions__stack\">{children}</div>\n      )}\n    </div>\n  );\n};\n\nSuggestedActionStackedContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\n\nSuggestedActionStackedContainer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  screenReaderText: PropTypes.string.isRequired\n};\n\nconst SuggestedActions = ({ className, suggestedActions = [] }) => {\n  const [{ suggestedActionLayout, suggestedActionsStackedLayoutButtonTextWrap }] = useStyleOptions();\n  const [accessKey] = useSuggestedActionsAccessKey();\n  const localize = useLocalizer();\n  const localizeAccessKey = useLocalizeAccessKey();\n\n  const screenReaderText = localize(\n    'SUGGESTED_ACTIONS_ALT',\n    suggestedActions.length\n      ? accessKey\n        ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey))\n        : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT')\n      : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT')\n  );\n\n  const children = suggestedActions.map(({ displayText, image, imageAltText, text, title, type, value }, index) => (\n    <SuggestedAction\n      ariaHidden={true}\n      buttonText={suggestedActionText({ displayText, title, type, value })}\n      className=\"webchat__suggested-actions__button\"\n      displayText={displayText}\n      image={image}\n      imageAlt={imageAltText}\n      key={index}\n      text={text}\n      textClassName={\n        suggestedActionLayout === 'stacked' && suggestedActionsStackedLayoutButtonTextWrap\n          ? 'webchat__suggested-actions__button-text-stacked-text-wrap'\n          : 'webchat__suggested-actions__button-text'\n      }\n      type={type}\n      value={value}\n    />\n  ));\n\n  if (suggestedActionLayout === 'flow') {\n    return (\n      <SuggestedActionFlowContainer className={className} screenReaderText={screenReaderText}>\n        {children}\n      </SuggestedActionFlowContainer>\n    );\n  } else if (suggestedActionLayout === 'stacked') {\n    return (\n      <SuggestedActionStackedContainer className={className} screenReaderText={screenReaderText}>\n        {children}\n      </SuggestedActionStackedContainer>\n    );\n  }\n\n  return (\n    <SuggestedActionCarouselContainer className={className} screenReaderText={screenReaderText}>\n      {children}\n    </SuggestedActionCarouselContainer>\n  );\n};\n\nSuggestedActions.defaultProps = {\n  className: ''\n};\n\nSuggestedActions.propTypes = {\n  className: PropTypes.string,\n  suggestedActions: PropTypes.arrayOf(\n    PropTypes.shape({\n      displayText: PropTypes.string,\n      image: PropTypes.string,\n      imageAltText: PropTypes.string,\n      text: PropTypes.string,\n      title: PropTypes.string,\n      type: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })\n  ).isRequired\n};\n\nexport default connectSuggestedActions()(SuggestedActions);\n\nexport { connectSuggestedActions };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}