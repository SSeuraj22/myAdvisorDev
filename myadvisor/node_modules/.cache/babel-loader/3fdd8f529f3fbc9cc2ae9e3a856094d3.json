{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { AutoDetectSourceLanguagesOpenRangeOptionName, CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, SpeechServiceConfig, SpeechSynthesisConnectionFactory, SynthesisAdapterBase, SynthesizerConfig } from \"../common.speech/Exports\";\nimport { createNoDashGuid, marshalPromiseToCallbacks, Queue } from \"../common/Exports\";\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\nimport { PushAudioOutputStreamImpl } from \"./Audio/AudioOutputStream\";\nimport { Contracts } from \"./Contracts\";\nimport { AudioConfig, PropertyId, PullAudioOutputStream, PushAudioOutputStreamCallback, SpeechSynthesisOutputFormat } from \"./Exports\";\n/**\n * Defines the class SpeechSynthesizer for text to speech.\n * Added in version 1.11.0\n * @class SpeechSynthesizer\n */\n\nexport class SpeechSynthesizer {\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n    if (audioConfig !== null) {\n      if (audioConfig === undefined) {\n        this.audioConfig = typeof window === \"undefined\" ? undefined : AudioConfig.fromDefaultSpeakerOutput();\n      } else {\n        this.audioConfig = audioConfig;\n      }\n    }\n\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.privDisposed = false;\n    this.privSynthesizing = false;\n    this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\n    this.synthesisRequestQueue = new Queue();\n    this.implCommonSynthesizeSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeechSynthesizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeechSynthesizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this SpeechSynthesizer.\n   * @member SpeechSynthesizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Indicates if auto detect source language is enabled\n   * @member SpeechSynthesizer.prototype.properties\n   * @function\n   * @public\n   * @returns {boolean} if auto detect source language is enabled\n   */\n\n\n  get autoDetectSourceLanguage() {\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\n  }\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\n   */\n\n\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    return new SpeechSynthesizer(speechConfig, audioConfig);\n  }\n\n  buildSsml(text) {\n    const languageToDefaultVoice = {\n      [\"ar-EG\"]: \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\n      [\"ar-SA\"]: \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\n      [\"bg-BG\"]: \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\",\n      [\"ca-ES\"]: \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\n      [\"cs-CZ\"]: \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\",\n      [\"da-DK\"]: \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\n      [\"de-AT\"]: \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\n      [\"de-CH\"]: \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\n      [\"de-DE\"]: \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\",\n      [\"el-GR\"]: \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\n      [\"en-AU\"]: \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\",\n      [\"en-CA\"]: \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\",\n      [\"en-GB\"]: \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\",\n      [\"en-IE\"]: \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\",\n      [\"en-IN\"]: \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\",\n      [\"en-US\"]: \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\",\n      [\"es-ES\"]: \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\",\n      [\"es-MX\"]: \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\n      [\"fi-FI\"]: \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\n      [\"fr-CA\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\",\n      [\"fr-CH\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\n      [\"fr-FR\"]: \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\",\n      [\"he-IL\"]: \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\n      [\"hi-IN\"]: \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\",\n      [\"hr-HR\"]: \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\",\n      [\"hu-HU\"]: \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\n      [\"id-ID\"]: \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\n      [\"it-IT\"]: \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\",\n      [\"ja-JP\"]: \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\",\n      [\"ko-KR\"]: \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\n      [\"ms-MY\"]: \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\",\n      [\"nb-NO\"]: \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\n      [\"nl-NL\"]: \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\n      [\"pl-PL\"]: \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\n      [\"pt-BR\"]: \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\n      [\"pt-PT\"]: \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\n      [\"ro-RO\"]: \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\n      [\"ru-RU\"]: \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\",\n      [\"sk-SK\"]: \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\n      [\"sl-SI\"]: \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\",\n      [\"sv-SE\"]: \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\n      [\"ta-IN\"]: \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\",\n      [\"te-IN\"]: \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\",\n      [\"th-TH\"]: \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\n      [\"tr-TR\"]: \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\n      [\"vi-VN\"]: \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\",\n      [\"zh-CN\"]: \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\n      [\"zh-HK\"]: \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\",\n      [\"zh-TW\"]: \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\"\n    };\n    let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\n    let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\n    let ssml = SpeechSynthesizer.XMLEncode(text);\n\n    if (this.autoDetectSourceLanguage) {\n      language = \"en-US\";\n    } else {\n      voice = voice || languageToDefaultVoice[language];\n    }\n\n    if (voice) {\n      ssml = `<voice name='${voice}'>${ssml}</voice>`;\n    }\n\n    ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\n    return ssml;\n  }\n  /**\n   * Executes speech synthesis on plain text.\n   * The task returns the synthesis result.\n   * @member SpeechSynthesizer.prototype.speakTextAsync\n   * @function\n   * @public\n   * @param text - Text to be synthesized.\n   * @param cb - Callback that received the SpeechSynthesisResult.\n   * @param err - Callback invoked in case of an error.\n   * @param stream - AudioOutputStream to receive the synthesized audio.\n   */\n\n\n  speakTextAsync(text, cb, err, stream) {\n    this.speakImpl(text, false, cb, err, stream);\n  }\n  /**\n   * Executes speech synthesis on SSML.\n   * The task returns the synthesis result.\n   * @member SpeechSynthesizer.prototype.speakSsmlAsync\n   * @function\n   * @public\n   * @param ssml - SSML to be synthesized.\n   * @param cb - Callback that received the SpeechSynthesisResult.\n   * @param err - Callback invoked in case of an error.\n   * @param stream - AudioOutputStream to receive the synthesized audio.\n   */\n\n\n  speakSsmlAsync(ssml, cb, err, stream) {\n    this.speakImpl(ssml, true, cb, err, stream);\n  }\n  /**\n   * Dispose of associated resources.\n   * @member SpeechSynthesizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposed);\n    marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  }\n  /**\n   * @Internal\n   * Do not use externally, object returned will change without warning or notice.\n   */\n\n\n  get internalData() {\n    return this.privAdapter;\n  }\n  /**\n   * This method performs cleanup of resources.\n   * The Boolean parameter disposing indicates whether the method is called\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n   * Derived classes should override this method to dispose resource if needed.\n   * @member SpeechSynthesizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - Flag to request disposal.\n   */\n\n\n  dispose(disposing) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        if (this.privAdapter) {\n          yield this.privAdapter.dispose();\n        }\n      }\n\n      this.privDisposed = true;\n    });\n  } //\n  // ################################################################################################################\n  // IMPLEMENTATION.\n  // Move to independent class\n  // ################################################################################################################\n  //\n\n\n  createSynthesizerConfig(speechConfig) {\n    return new SynthesizerConfig(speechConfig, this.privProperties);\n  } // Creates the synthesis adapter\n\n\n  createSynthesisAdapter(authentication, connectionFactory, audioConfig, synthesizerConfig) {\n    return new SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, this, this.audioConfig);\n  }\n\n  implCommonSynthesizeSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const synthesizerConfig = this.createSynthesizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\n    const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    const authentication = subscriptionKey && subscriptionKey !== \"\" ? new CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new CognitiveTokenAuthentication(authFetchEventId => {\n      const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    }, authFetchEventId => {\n      const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    });\n    this.privAdapter = this.createSynthesisAdapter(authentication, this.privConnectionFactory, this.audioConfig, synthesizerConfig);\n    this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]);\n  }\n\n  speakImpl(text, IsSsml, cb, err, dataStream) {\n    try {\n      Contracts.throwIfDisposed(this.privDisposed);\n      const requestId = createNoDashGuid();\n      let audioDestination;\n\n      if (dataStream instanceof PushAudioOutputStreamCallback) {\n        audioDestination = new PushAudioOutputStreamImpl(dataStream);\n      } else if (dataStream instanceof PullAudioOutputStream) {\n        audioDestination = dataStream;\n      } else if (dataStream !== undefined) {\n        audioDestination = new AudioFileWriter(dataStream);\n      } else {\n        audioDestination = undefined;\n      }\n\n      this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, e => {\n        this.privSynthesizing = false;\n\n        if (!!cb) {\n          try {\n            cb(e);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n        }\n\n        cb = undefined;\n        /* tslint:disable:no-empty */\n\n        this.adapterSpeak().catch(() => {});\n      }, e => {\n        if (!!err) {\n          err(e);\n        }\n      }, audioDestination));\n      /* tslint:disable:no-empty */\n\n      this.adapterSpeak().catch(() => {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the synthesizer.\n\n      /* tslint:disable:no-empty */\n\n\n      this.dispose(true).catch(() => {});\n    }\n  }\n\n  adapterSpeak() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privDisposed && !this.privSynthesizing) {\n        this.privSynthesizing = true;\n        const request = yield this.synthesisRequestQueue.dequeue();\n        return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\n      }\n    });\n  }\n\n  static XMLEncode(text) {\n    return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class SynthesisRequest {\n  constructor(requestId, text, isSSML, cb, err, dataStream) {\n    this.requestId = requestId;\n    this.text = text;\n    this.isSSML = isSSML;\n    this.cb = cb;\n    this.err = err;\n    this.dataStream = dataStream;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/SpeechSynthesizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks,\r\n    Queue\r\n} from \"../common/Exports\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Added in version 1.11.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer {\r\n    protected audioConfig: AudioConfig;\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privProperties: PropertyCollection;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechSynthesizer.\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    private privDisposed: boolean;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n    private privSynthesizing: boolean;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"ar-EG\"]: \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\r\n            [\"ar-SA\"]: \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\r\n            [\"bg-BG\"]: \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\",\r\n            [\"ca-ES\"]: \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\r\n            [\"cs-CZ\"]: \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\",\r\n            [\"da-DK\"]: \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\r\n            [\"de-AT\"]: \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\r\n            [\"de-CH\"]: \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\r\n            [\"de-DE\"]: \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\",\r\n            [\"el-GR\"]: \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\r\n            [\"en-AU\"]: \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\",\r\n            [\"en-CA\"]: \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\",\r\n            [\"en-GB\"]: \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\",\r\n            [\"en-IE\"]: \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\",\r\n            [\"en-IN\"]: \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\",\r\n            [\"en-US\"]: \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\",\r\n            [\"es-ES\"]: \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\",\r\n            [\"es-MX\"]: \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\r\n            [\"fi-FI\"]: \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\r\n            [\"fr-CA\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\",\r\n            [\"fr-CH\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\r\n            [\"fr-FR\"]: \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\",\r\n            [\"he-IL\"]: \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\r\n            [\"hi-IN\"]: \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\",\r\n            [\"hr-HR\"]: \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\",\r\n            [\"hu-HU\"]: \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\r\n            [\"id-ID\"]: \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\r\n            [\"it-IT\"]: \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\",\r\n            [\"ja-JP\"]: \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\",\r\n            [\"ko-KR\"]: \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\r\n            [\"ms-MY\"]: \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\",\r\n            [\"nb-NO\"]: \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\r\n            [\"nl-NL\"]: \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\r\n            [\"pl-PL\"]: \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\r\n            [\"pt-BR\"]: \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\r\n            [\"pt-PT\"]: \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\r\n            [\"ro-RO\"]: \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\r\n            [\"ru-RU\"]: \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\",\r\n            [\"sk-SK\"]: \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\r\n            [\"sl-SI\"]: \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\",\r\n            [\"sv-SE\"]: \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\r\n            [\"ta-IN\"]: \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\",\r\n            [\"te-IN\"]: \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\",\r\n            [\"th-TH\"]: \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\r\n            [\"tr-TR\"]: \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\r\n            [\"vi-VN\"]: \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\",\r\n            [\"zh-CN\"]: \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\r\n            [\"zh-HK\"]: \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\",\r\n            [\"zh-TW\"]: \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = SpeechSynthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member SpeechSynthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SynthesisAdapterBase(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            synthesizerConfig);\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* tslint:disable:no-empty */\r\n                this.adapterSpeak().catch(() => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* tslint:disable:no-empty */\r\n            this.adapterSpeak().catch(() => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* tslint:disable:no-empty */\r\n            this.dispose(true).catch(() => { });\r\n        }\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    private static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}