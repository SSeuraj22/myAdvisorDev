{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddCourseToProgramme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PullProgrammes from \"../PullProgrammes\";\nimport PullCourses from \"../PullCourses\";\n/*\n    AddCourseToProgramme allows a staff member to add offered courses to a programme in the system.\n*/\n\nfunction AddCourseToProgramme({\n  setShowAddCourseProg,\n  refreshTable\n}) {\n  _s();\n\n  /*\n      The validated state is used to keep track of the validity of the add course to programme form.\n      It's initial state is false.\n  */\n  const [validated, setValidated] = useState(false); //const [programme, setProgramme] = useState(\"None\"); // Store which programme was selected\n  //const [course, setCourse] = useState(\"None\"); // Store which course was selected\n\n  var programmes = PullProgrammes(); // Get all degree programmes from the database\n\n  var courses = PullCourses(); // Get all degree courses from the database\n\n  /*\n      notifyAdded is used to display toast notifications for events. It displays a green toast.\n  */\n\n  const notifyAdded = text => toast.success(text);\n  /*\n      notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n  */\n\n\n  const notifyNotAdded = text => toast.error(text);\n  /*\n  HandleSubmit gets the data from the form as passes it to the addCourseToProgramme function.\n  */\n\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    setValidated(true);\n    const programmeName = form.elements.programmename.value; //get programme name from the form\n\n    const courseFullName = form.elements.coursefullname.value; //get the course full name from the form\n\n    const courseType = form.elements.coursetype.value; //To get the programmeID of the selected programme\n\n    const programmeFound = programmes.find(p => {\n      return p.name === programmeName;\n    });\n    const programmeId = programmeFound.id; //To get the courseID of the selected course\n\n    const courseFound = courses.find(c => {\n      const cFullName = c.courseCode + \" \" + c.courseTitle;\n      return cFullName === courseFullName;\n    });\n    const courseId = courseFound.id;\n    const formData = {\n      programmeID: programmeId,\n      courseID: courseId,\n      type: courseType\n    };\n    addCourseToProgramme(formData);\n  };\n  /*\n      addCourseToProgramme creates a post request to the server, which adds a new course to a programme in the system.\n  */\n\n\n  async function addCourseToProgramme(data) {\n    try {\n      const res = await fetch(\"/programmes/add/\" + data.programmeID + \"/\" + data.courseID, {\n        method: \"POST\",\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      setShowAddCourseProg(false);\n      refreshTable();\n      const status = await res.statusText;\n\n      if (res.status == 401) {\n        notifyNotAdded(\"Course Already Added to Programme!\");\n      } else {\n        if (res.status === 200) {\n          notifyAdded(\"Course Added to Programme!\");\n        }\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      validated: validated,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"programmename\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select Programme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          required: true,\n          as: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"None\",\n            children: \"Choose a programme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 33\n          }, this), Array.from({\n            length: programmes.length\n          }, (_, k) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: programmes[k].name,\n              children: programmes[k].name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 48\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"coursefullname\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select Course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          required: true,\n          as: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"None\",\n            children: \"Choose a course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this), Array.from({\n            length: courses.length\n          }, (_, j) => {\n            return /*#__PURE__*/_jsxDEV(Form.Check, {\n              label: courses[j].courseCode + \" \" + courses[j].courseTitle,\n              name: courses[j].courseCode + \" \" + courses[j].courseTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 48\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"coursetype\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          required: true,\n          as: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"None\",\n            children: \"Choose type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Core\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Elective\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"float-right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-custom\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      pauseOnHover: true,\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AddCourseToProgramme, \"otD17mARj5mKZHrEMvBAd47slX0=\");\n\n_c = AddCourseToProgramme;\nexport default AddCourseToProgramme;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCourseToProgramme\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddCourseToProgramme.js"],"names":["React","useState","Button","Form","Col","ToastContainer","toast","PullProgrammes","PullCourses","AddCourseToProgramme","setShowAddCourseProg","refreshTable","validated","setValidated","programmes","courses","notifyAdded","text","success","notifyNotAdded","error","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","programmeName","elements","programmename","value","courseFullName","coursefullname","courseType","coursetype","programmeFound","find","p","name","programmeId","id","courseFound","c","cFullName","courseCode","courseTitle","courseId","formData","programmeID","courseID","type","addCourseToProgramme","data","res","fetch","method","headers","token","localStorage","getItem","body","JSON","stringify","status","statusText","err","console","message","Array","from","length","_","k","j"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport PullProgrammes from \"../PullProgrammes\";\nimport PullCourses from \"../PullCourses\";\n\n/*\n    AddCourseToProgramme allows a staff member to add offered courses to a programme in the system.\n*/\n\nfunction AddCourseToProgramme({setShowAddCourseProg, refreshTable}) {\n    /*\n        The validated state is used to keep track of the validity of the add course to programme form.\n        It's initial state is false.\n    */    \n        const [validated, setValidated] = useState(false);\n\n        //const [programme, setProgramme] = useState(\"None\"); // Store which programme was selected\n        //const [course, setCourse] = useState(\"None\"); // Store which course was selected\n\n        var programmes = PullProgrammes(); // Get all degree programmes from the database\n        var courses = PullCourses(); // Get all degree courses from the database\n\n\n        /*\n            notifyAdded is used to display toast notifications for events. It displays a green toast.\n        */    \n        const notifyAdded = (text) => toast.success(text);\n    \n        /*\n            notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n        */    \n            const notifyNotAdded = (text) => toast.error(text);\n\n        /*\n        HandleSubmit gets the data from the form as passes it to the addCourseToProgramme function.\n    */    \n        const handleSubmit = (event) => {\n            const form = event.currentTarget;\n    \n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n    \n            event.preventDefault();\n            event.stopPropagation();\n            setValidated(true);\n\n            const programmeName = form.elements.programmename.value;//get programme name from the form\n            const courseFullName = form.elements.coursefullname.value;//get the course full name from the form\n            const courseType = form.elements.coursetype.value;\n\n            //To get the programmeID of the selected programme\n            const programmeFound = programmes.find(p => {\n                return p.name === programmeName;\n            })\n            const programmeId = programmeFound.id;\n\n            //To get the courseID of the selected course\n            const courseFound = courses.find(c => {\n                const cFullName = c.courseCode + \" \" + c.courseTitle;\n                return cFullName === courseFullName;\n            })\n            const courseId = courseFound.id;\n            \n            const formData = {\n                programmeID : programmeId,\n                courseID : courseId,\n                type: courseType\n            }\n            addCourseToProgramme(formData);\n        };\n\n        /*\n            addCourseToProgramme creates a post request to the server, which adds a new course to a programme in the system.\n        */\n        async function addCourseToProgramme(data) {\n            try {\n              const res = await fetch(\"/programmes/add/\" + data.programmeID + \"/\" + data.courseID, {\n                method: \"POST\",\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify(data),\n              });\n        \n              setShowAddCourseProg(false);\n              refreshTable();\n\n              const status = await res.statusText;\n\n              if(res.status==401){\n                notifyNotAdded(\"Course Already Added to Programme!\");\n              }\n              else{\n                if(res.status===200){\n                    notifyAdded(\"Course Added to Programme!\");\n                }\n              }\n                \n            } catch (err) {\n              console.error(err.message);\n            }\n            \n        }\n\n        return (<>\n                <Form validated={validated} onSubmit={handleSubmit}>\n                    \n                    <Form.Group controlId=\"programmename\">\n                        <Form.Label>Select Programme</Form.Label>\n                            <Form.Control required as=\"select\">\n                                <option value=\"None\">Choose a programme</option>\n                                {\n                                    Array.from({length: programmes.length}, (_, k) => {\n                                        return <option value={programmes[k].name}>{programmes[k].name}</option> \n                                    })\n                                }\n                                \n                            </Form.Control>\n                    </Form.Group>\n                    \n\n                    <Form.Group controlId=\"coursefullname\">\n                        <Form.Label>Select Course</Form.Label>\n                            <Form.Control required as=\"select\">\n                                <option value=\"None\">Choose a course</option>\n                                {\n                                    Array.from({length: courses.length}, (_, j) => {\n                                        return <Form.Check label={courses[j].courseCode + \" \" + courses[j].courseTitle} name={courses[j].courseCode + \" \" + courses[j].courseTitle}/> \n                                    })\n                                }\n                            </Form.Control>\n                    </Form.Group> \n\n                    <Form.Group controlId=\"coursetype\">\n                        <Form.Label>Select Type</Form.Label>\n                            <Form.Control required as=\"select\">\n                                <option value=\"None\">Choose type</option>\n                                <option>Core</option>\n                                <option>Elective</option>\n                            </Form.Control>\n                    </Form.Group> \n        \n                    <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n                </Form>\n    \n                <ToastContainer \n                    pauseOnHover\n                    position=\"bottom-right\"\n                />\n        </>\n        );\n}\n\nexport default AddCourseToProgramme;"]},"metadata":{},"sourceType":"module"}