{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter } from 'react-bootstrap-table2-filter';\nimport { Modal, Tabs, Tab, Button } from \"react-bootstrap\";\nimport AddCourseToProgramme from \"./AddCourseToProgramme\";\nimport PullProgrammes from \"../PullProgrammes\";\nimport PullCourses from \"../PullCourses\"; //TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\n\nconst pCol = this.state.programmes; // Get the keys of the first item in the programmes array (pCol)\n\nconst pColKeys = Object.keys(pCol[0]);\nconst columns = [{\n  dataField: 'courseCode',\n  text: 'Course Code',\n  csvText: 'Course Code',\n  sort: true\n}, {\n  dataField: 'courseTitle',\n  text: 'Course Title',\n  csvText: 'Course Title'\n}, {\n  dataField: 'level',\n  text: 'Level',\n  csvText: 'Level'\n}, {\n  dataField: 'prerequisites',\n  text: 'Pre-requisites',\n  csvText: 'Pre-requisites'\n}, {\n  dataField: 'name',\n  text: 'Programme',\n  csvText: 'Programme'\n}, {\n  dataField: ''\n}];\n/*\n    selectLevelOptions allows you to filter the level table column\n*/\n\nconst selectLevelOptions = {\n  I: 'I',\n  II: 'II',\n  III: 'III'\n};\n/*\n    selectSemesterOptions allows you to filter the semester table column\n*/\n\nconst selectSemesterOptions = {\n  1: '1',\n  2: '2',\n  3: '3'\n};\n/*\n    selectTypeOptions allows you to filter the type table column\n*/\n\nconst selectTypeOptions = {\n  Core: 'Core',\n  Elective: 'Elective',\n  Foundation: 'Foundation'\n};\n/*\n    coursesColumns is used to display specific columns of the data on the courses table in the modal.\n    It also contains code that enables the columns to be filtered.\n*/\n\nconst coursesColumns = [{\n  dataField: 'level',\n  text: 'Level',\n  sort: true,\n  formatter: cell => selectLevelOptions[cell],\n  filter: selectFilter({\n    options: selectLevelOptions\n  })\n}, {\n  dataField: 'semester',\n  text: 'Semester',\n  sort: true,\n  formatter: cell => selectSemesterOptions[cell],\n  filter: selectFilter({\n    options: selectSemesterOptions\n  })\n}, {\n  dataField: 'type',\n  text: 'Type',\n  sort: true,\n  formatter: cell => selectTypeOptions[cell],\n  filter: selectFilter({\n    options: selectTypeOptions\n  })\n}, {\n  dataField: 'courseCode',\n  text: 'Course Code',\n  sort: true\n}, {\n  dataField: 'courseTitle',\n  text: 'Course Title',\n  sort: true\n}];\n/*\n    defaultSorted and coursesSorted sorts the tables is ascending order based on the name column and level column respectively.\n*/\n\nconst defaultSorted = [{\n  dataField: 'name',\n  order: 'asc'\n}];\nconst coursesSorted = [{\n  dataField: 'level',\n  order: 'asc'\n}];\n/*\n    options and courseOptions is used to configure the tables pagination.\n*/\n\nconst options = {\n  custom: true,\n  paginationSize: 5,\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  prePageText: 'Back',\n  nextPageText: 'Next',\n  lastPageText: 'Last',\n  sizePerPage: 8\n};\nconst courseOptions = {\n  sizePerPage: 8,\n  hideSizePerPage: true,\n  hidePageListOnlyOnePage: true\n};\nconst {\n  SearchBar,\n  ClearSearchButton\n} = Search;\nconst {\n  ExportCSVButton\n} = CSVExport;\n/*\n    ProgrammesTable is a component that displays the programmes in the system in a table.\n*/\n\nfunction ProgrammesTable({\n  programmes,\n  loading\n}) {\n  _s();\n\n  /*\n      The show state is used to keep track of the visibility of the view programme courses modal.\n      It's initial state is false.\n      handleShow sets the show state to true, which displays the modal.\n      handleClose sets the show state to false, which closes the modal.\n  */\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false);\n  /*\n      The showAddCourseProg state is used to keep track of the visibility of the addCourseToProgramme modal.\n      It's initial state is false.\n      handleShowCourses sets the show state to true, which displays the modal.\n      handleCloseCourses sets the show state to false, which closes the modal.\n  */\n\n\n  const [showAddCourseProg, setShowAddCourseProg] = useState(false);\n\n  const handleShowCourses = () => setShowAddCourseProg(true);\n\n  const handleCloseCourses = () => setShowAddCourseProg(false);\n  /*\n      The programmeName state is used to keep track of the selected programme name.\n      The programmeCourses state is used to store the courses of the selected programme.\n      The loadingCourses state is used to keep track of getting the courses from the server. \n  */\n\n\n  const [programmeName, setprogrammeName] = useState([]);\n  const [programmeCourses, setProgrammeCourses] = useState([]);\n  const [loadingCourses, setLoadingCourses] = useState(true);\n  /*\n      rowEvents is used to get the programme name of the selected row and get the courses of that programme.\n  */\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      setprogrammeName(row.name);\n      getProgrammeCourses(row.id);\n    }\n  };\n  /*\n      refreshTable sets the loading state to true and gets the programmes from the system.\n  */\n\n  function refreshTable() {//setLoading(true);\n    //getProgrammes();\n  }\n  /*\n      getProgrammeCourses creates a get request to the server that gets all the courses of this specified programme on the system and stores it in the programmeCourses state.\n  */\n\n\n  async function getProgrammeCourses(id) {\n    try {\n      setShow(true);\n      setProgrammeCourses([]);\n      setLoadingCourses(true);\n      const res = await fetch(\"/programmes/offered-courses/\" + id, {\n        method: \"GET\"\n      });\n      const parseData = await res.json();\n      setProgrammeCourses(parseData);\n      setLoadingCourses(false);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n  /*\n      ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n  */\n\n\n  const table = ({\n    paginationProps,\n    paginationTableProps\n  }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToolkitProvider, {\n      keyField: \"name\",\n      data: programmes,\n      columns: columns,\n      search: true,\n      exportCSV: {\n        fileName: 'programmes.csv'\n      },\n      children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, { ...props.searchProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ClearSearchButton, { ...props.searchProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ExportCSVButton, { ...props.csvProps,\n          children: \"Export CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, { ...props.baseProps,\n          ...paginationTableProps,\n          defaultSorted: defaultSorted,\n          rowEvents: rowEvents,\n          hover: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PaginationListStandalone, { ...paginationProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"sr-only\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(PaginationProvider, {\n      pagination: paginationFactory(options),\n      children: table\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      size: \"xl\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: programmeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: loadingCourses ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"spinner-border text-primary\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"sr-only\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n          keyField: \"courseCode\",\n          data: programmeCourses,\n          columns: coursesColumns,\n          search: true,\n          children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(SearchBar, { ...props.searchProps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ClearSearchButton, { ...props.searchProps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, { ...props.baseProps,\n              pagination: paginationFactory(courseOptions),\n              defaultSorted: coursesSorted,\n              filter: filterFactory()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showAddCourseProg,\n      onHide: handleCloseCourses,\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: [\"Add Course to \", programmeName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(AddCourseToProgramme, {\n          setShowAddCourseProg: setShowAddCourseProg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ProgrammesTable, \"K3VfwiAlBWpeV2tja5bLMlyee9o=\");\n\n_c = ProgrammesTable;\nexport default ProgrammesTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgrammesTable\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js"],"names":["React","useState","useEffect","BootstrapTable","paginationFactory","PaginationProvider","PaginationListStandalone","ToolkitProvider","Search","CSVExport","filterFactory","selectFilter","Modal","Tabs","Tab","Button","AddCourseToProgramme","PullProgrammes","PullCourses","pCol","state","programmes","pColKeys","Object","keys","columns","dataField","text","csvText","sort","selectLevelOptions","I","II","III","selectSemesterOptions","selectTypeOptions","Core","Elective","Foundation","coursesColumns","formatter","cell","filter","options","defaultSorted","order","coursesSorted","custom","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","sizePerPage","courseOptions","hideSizePerPage","hidePageListOnlyOnePage","SearchBar","ClearSearchButton","ExportCSVButton","ProgrammesTable","loading","show","setShow","handleShow","handleClose","showAddCourseProg","setShowAddCourseProg","handleShowCourses","handleCloseCourses","programmeName","setprogrammeName","programmeCourses","setProgrammeCourses","loadingCourses","setLoadingCourses","rowEvents","onClick","e","row","rowIndex","name","getProgrammeCourses","id","refreshTable","res","fetch","method","parseData","json","err","console","error","message","table","paginationProps","paginationTableProps","fileName","props","searchProps","csvProps","baseProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\nimport { Modal, Tabs, Tab, Button } from \"react-bootstrap\";\nimport AddCourseToProgramme from \"./AddCourseToProgramme\";\nimport PullProgrammes from \"../PullProgrammes\";\nimport PullCourses from \"../PullCourses\";\n\n//TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\nconst pCol = this.state.programmes;\n\n// Get the keys of the first item in the programmes array (pCol)\nconst pColKeys = Object.keys(pCol[0]);\nconst columns = [\n    { dataField: 'courseCode', text: 'Course Code', csvText: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', csvText: 'Course Title' },\n    { dataField: 'level', text: 'Level', csvText: 'Level' },\n    { dataField: 'prerequisites', text: 'Pre-requisites', csvText: 'Pre-requisites' },\n    { dataField: 'name', text: 'Programme', csvText: 'Programme' },\n    { dataField: ''}\n]\n\n/*\n    selectLevelOptions allows you to filter the level table column\n*/\nconst selectLevelOptions = {\n    I: 'I',\n    II: 'II',\n    III: 'III'\n};\n\n/*\n    selectSemesterOptions allows you to filter the semester table column\n*/\nconst selectSemesterOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\n/*\n    selectTypeOptions allows you to filter the type table column\n*/\nconst selectTypeOptions = {\n    Core: 'Core',\n    Elective: 'Elective',\n    Foundation: 'Foundation'\n};\n\n/*\n    coursesColumns is used to display specific columns of the data on the courses table in the modal.\n    It also contains code that enables the columns to be filtered.\n*/\nconst coursesColumns = [\n    { \n        dataField: 'level', \n        text: 'Level', \n        sort: true,\n        formatter: cell => selectLevelOptions[cell],\n        filter: selectFilter({\n            options: selectLevelOptions,\n        })\n    },\n    { \n        dataField: 'semester', \n        text: 'Semester', \n        sort: true,\n        formatter: cell => selectSemesterOptions[cell],\n        filter: selectFilter({\n            options: selectSemesterOptions,\n        })\n    },\n    { \n        dataField: 'type', \n        text: 'Type', \n        sort: true,\n        formatter: cell => selectTypeOptions[cell],\n        filter: selectFilter({\n            options: selectTypeOptions,\n        })\n    },\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\n/*\n    defaultSorted and coursesSorted sorts the tables is ascending order based on the name column and level column respectively.\n*/\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asc'\n}];\n\nconst coursesSorted = [{\n    dataField: 'level',\n    order: 'asc'\n}];\n\n/*\n    options and courseOptions is used to configure the tables pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\n/*\n    ProgrammesTable is a component that displays the programmes in the system in a table.\n*/\nfunction ProgrammesTable({programmes, loading}) {\n\n    /*\n        The show state is used to keep track of the visibility of the view programme courses modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleClose sets the show state to false, which closes the modal.\n    */ \n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    /*\n        The showAddCourseProg state is used to keep track of the visibility of the addCourseToProgramme modal.\n        It's initial state is false.\n        handleShowCourses sets the show state to true, which displays the modal.\n        handleCloseCourses sets the show state to false, which closes the modal.\n    */ \n    const [showAddCourseProg, setShowAddCourseProg] = useState(false);\n    const handleShowCourses = () => setShowAddCourseProg(true);\n    const handleCloseCourses = () => setShowAddCourseProg(false);\n\n    /*\n        The programmeName state is used to keep track of the selected programme name.\n        The programmeCourses state is used to store the courses of the selected programme.\n        The loadingCourses state is used to keep track of getting the courses from the server. \n    */    \n    const [programmeName, setprogrammeName] = useState([]);\n    const [programmeCourses, setProgrammeCourses] = useState([]);\n    const [loadingCourses, setLoadingCourses] = useState(true);\n\n    /*\n        rowEvents is used to get the programme name of the selected row and get the courses of that programme.\n    */      \n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setprogrammeName(row.name);\n            getProgrammeCourses(row.id);\n        }\n    };    \n\n    /*\n        refreshTable sets the loading state to true and gets the programmes from the system.\n    */\n        function refreshTable(){\n            //setLoading(true);\n            //getProgrammes();\n        }\n\n    /*\n        getProgrammeCourses creates a get request to the server that gets all the courses of this specified programme on the system and stores it in the programmeCourses state.\n    */\n    async function getProgrammeCourses(id) {\n        try {\n            setShow(true);\n            setProgrammeCourses([]);\n            setLoadingCourses(true);\n\n            const res = await fetch(\"/programmes/offered-courses/\" + id, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setProgrammeCourses(parseData);\n            setLoadingCourses(false);\n            \n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */ \n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"name\"\n                    data={ programmes }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                        fileName: 'programmes.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"xl\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{programmeName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                {loadingCourses ? (\n                <div class=\"d-flex justify-content-center\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n                ) : (\n                \n                <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ programmeCourses }\n                    columns={ coursesColumns }\n                    search\n                    >\n                    \n                    {\n                        props => (\n                        <div>\n                            <SearchBar { ...props.searchProps } />\n                            <ClearSearchButton { ...props.searchProps } />\n                            {/*<div class=\"float-right\"><Button onClick={handleShowCourses} class=\"btn btn-custom\">Add Course</Button></div>*/}\n                            <BootstrapTable\n                            { ...props.baseProps } pagination={ paginationFactory(courseOptions) } defaultSorted={ coursesSorted } filter={ filterFactory() }\n                            />\n                            \n                        </div>\n                        )\n                    }\n                </ToolkitProvider>\n                )}                           \n              </Modal.Body>\n                \n            </Modal>  \n\n            <Modal show={showAddCourseProg} onHide={handleCloseCourses} size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Add Course to {programmeName}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <AddCourseToProgramme setShowAddCourseProg={setShowAddCourseProg}/>\n                </Modal.Body>   \n            </Modal>\n\n            \n\n\n\n        </>\n    );\n\n\n}\n\nexport default ProgrammesTable;\n"]},"metadata":{},"sourceType":"module"}