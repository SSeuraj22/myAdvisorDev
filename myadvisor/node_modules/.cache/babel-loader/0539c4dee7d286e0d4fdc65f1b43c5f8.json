{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _textFormatToContentType = _interopRequireDefault(require(\"./Utils/textFormatToContentType\"));\n\nvar _useStripMarkdown = _interopRequireDefault(require(\"./hooks/internal/useStripMarkdown\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"./hooks/internal/useStyleToEmotionObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,\n    useCreateAttachmentForScreenReaderRenderer = _botframeworkWebchatApi.hooks.useCreateAttachmentForScreenReaderRenderer,\n    useDateFormatter = _botframeworkWebchatApi.hooks.useDateFormatter,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\nvar ROOT_STYLE = {\n  '&.webchat__screen-reader-activity': {\n    color: 'transparent',\n    height: 1,\n    opacity: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 0,\n    whiteSpace: 'nowrap',\n    width: 1\n  }\n};\nvar ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {\n  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',\n  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',\n  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',\n  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',\n  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'\n}; // When \"renderAttachments\" is false, we will not render the content of attachments.\n// That means, it will only render \"2 attachments\", instead of \"image attachment\".\n// This is used in the visual transcript, where we render \"Press ENTER to interact.\"\n\nvar ScreenReaderActivity = function ScreenReaderActivity(_ref) {\n  var activity = _ref.activity,\n      children = _ref.children,\n      id = _ref.id,\n      renderAttachments = _ref.renderAttachments;\n\n  var _useAvatarForBot = useAvatarForBot(),\n      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),\n      botInitials = _useAvatarForBot2[0].initials;\n\n  var createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();\n  var formatDate = useDateFormatter();\n  var localize = useLocalizer();\n  var localizeWithPlural = useLocalizer({\n    plural: true\n  });\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var _activity$attachments = activity.attachments,\n      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,\n      _activity$channelData = activity.channelData;\n  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;\n  var _activity$channelData2 = _activity$channelData.messageBack;\n  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;\n  var messageBackDisplayText = _activity$channelData2.displayText,\n      _activity$from = activity.from;\n  _activity$from = _activity$from === void 0 ? {} : _activity$from;\n  var role = _activity$from.role,\n      text = activity.text,\n      textFormat = activity.textFormat,\n      timestamp = activity.timestamp;\n  var fromUser = role === 'user';\n  var contentTypeMarkdown = (0, _textFormatToContentType.default)(textFormat) === 'text/markdown';\n  var displayText = messageBackDisplayText || text;\n  var attachmentForScreenReaderRenderers = renderAttachments ? attachments.map(function (attachment) {\n    return createAttachmentForScreenReaderRenderer({\n      activity: activity,\n      attachment: attachment\n    });\n  }).filter(function (render) {\n    return render;\n  }) : [];\n  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]{2,}/g, ' ');\n  var numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;\n  var numAttachmentsAlt = !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);\n  var textAlt = (0, _useStripMarkdown.default)(contentTypeMarkdown && displayText) || displayText;\n  var timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));\n  return /*#__PURE__*/_react.default.createElement(\"article\", {\n    \"aria-atomic\": true,\n    \"aria-roledescription\": \"message\",\n    className: (0, _classnames.default)('webchat__screen-reader-activity', rootClassName) // \"id\" attribute is used by `aria-labelledby`.\n    // eslint-disable-next-line react/forbid-dom-props\n    ,\n    id: id,\n    role: \"region\"\n  }, /*#__PURE__*/_react.default.createElement(\"p\", null, /*#__PURE__*/_react.default.createElement(\"span\", null, greetingAlt), /*#__PURE__*/_react.default.createElement(\"span\", null, textAlt)), !!attachmentForScreenReaderRenderers.length && /*#__PURE__*/_react.default.createElement(\"ul\", null, attachmentForScreenReaderRenderers.map(function (render, index) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      _react.default.createElement(\"li\", {\n        key: index\n      }, render())\n    );\n  })), numAttachmentsAlt && /*#__PURE__*/_react.default.createElement(\"p\", null, numAttachmentsAlt), /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: \"webchat__screen-reader-activity__timestamp\"\n  }, timestampAlt), children);\n};\n\nScreenReaderActivity.defaultProps = {\n  children: undefined,\n  id: undefined,\n  renderAttachments: true\n};\nScreenReaderActivity.propTypes = {\n  activity: _propTypes.default.any.isRequired,\n  children: _propTypes.default.any,\n  id: _propTypes.default.string,\n  renderAttachments: _propTypes.default.bool\n};\nvar _default = ScreenReaderActivity;\nexports.default = _default;","map":{"version":3,"sources":["../src/ScreenReaderActivity.js"],"names":["useAvatarForBot","useCreateAttachmentForScreenReaderRenderer","useDateFormatter","useLocalizer","hooks","ROOT_STYLE","color","height","opacity","overflow","position","top","whiteSpace","width","ACTIVITY_NUM_ATTACHMENTS_ALT_IDS","few","many","one","other","two","ScreenReaderActivity","activity","children","id","renderAttachments","botInitials","createAttachmentForScreenReaderRenderer","formatDate","localize","localizeWithPlural","plural","rootClassName","attachments","messageBackDisplayText","role","text","textFormat","timestamp","fromUser","contentTypeMarkdown","displayText","attachmentForScreenReaderRenderers","attachment","greetingAlt","numGenericAttachments","numAttachmentsAlt","textAlt","timestampAlt","index","render","PropTypes","bool"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [2] }] */\n\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport textFormatToContentType from './Utils/textFormatToContentType';\nimport useStripMarkdown from './hooks/internal/useStripMarkdown';\nimport useStyleToEmotionObject from './hooks/internal/useStyleToEmotionObject';\n\nconst { useAvatarForBot, useCreateAttachmentForScreenReaderRenderer, useDateFormatter, useLocalizer } = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__screen-reader-activity': {\n    color: 'transparent',\n    height: 1,\n    opacity: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 0,\n    whiteSpace: 'nowrap',\n    width: 1\n  }\n};\n\nconst ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {\n  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',\n  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',\n  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',\n  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',\n  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'\n};\n\n// When \"renderAttachments\" is false, we will not render the content of attachments.\n// That means, it will only render \"2 attachments\", instead of \"image attachment\".\n// This is used in the visual transcript, where we render \"Press ENTER to interact.\"\nconst ScreenReaderActivity = ({ activity, children, id, renderAttachments }) => {\n  const [{ initials: botInitials }] = useAvatarForBot();\n  const createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();\n  const formatDate = useDateFormatter();\n  const localize = useLocalizer();\n  const localizeWithPlural = useLocalizer({ plural: true });\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const {\n    attachments = [],\n    channelData: { messageBack: { displayText: messageBackDisplayText } = {} } = {},\n    from: { role } = {},\n    text,\n    textFormat,\n    timestamp\n  } = activity;\n\n  const fromUser = role === 'user';\n  const contentTypeMarkdown = textFormatToContentType(textFormat) === 'text/markdown';\n  const displayText = messageBackDisplayText || text;\n\n  const attachmentForScreenReaderRenderers = renderAttachments\n    ? attachments\n        .map(attachment => createAttachmentForScreenReaderRenderer({ activity, attachment }))\n        .filter(render => render)\n    : [];\n\n  const greetingAlt = (fromUser\n    ? localize('ACTIVITY_YOU_SAID_ALT')\n    : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')\n  ).replace(/\\s{2,}/gu, ' ');\n  const numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;\n\n  const numAttachmentsAlt =\n    !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);\n  const textAlt = useStripMarkdown(contentTypeMarkdown && displayText) || displayText;\n  const timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));\n\n  return (\n    <article\n      aria-atomic={true}\n      aria-roledescription=\"message\"\n      className={classNames('webchat__screen-reader-activity', rootClassName)}\n      // \"id\" attribute is used by `aria-labelledby`.\n      // eslint-disable-next-line react/forbid-dom-props\n      id={id}\n      role=\"region\"\n    >\n      <p>\n        <span>{greetingAlt}</span>\n        <span>{textAlt}</span>\n      </p>\n      {!!attachmentForScreenReaderRenderers.length && (\n        <ul>\n          {attachmentForScreenReaderRenderers.map((render, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <li key={index}>{render()}</li>\n          ))}\n        </ul>\n      )}\n      {numAttachmentsAlt && <p>{numAttachmentsAlt}</p>}\n      <p className=\"webchat__screen-reader-activity__timestamp\">{timestampAlt}</p>\n      {children}\n    </article>\n  );\n};\n\nScreenReaderActivity.defaultProps = {\n  children: undefined,\n  id: undefined,\n  renderAttachments: true\n};\n\nScreenReaderActivity.propTypes = {\n  activity: PropTypes.any.isRequired,\n  children: PropTypes.any,\n  id: PropTypes.string,\n  renderAttachments: PropTypes.bool\n};\n\nexport default ScreenReaderActivity;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}