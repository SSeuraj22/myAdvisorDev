{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = create;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _AudioConfig = require(\"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig\");\n\nvar _microsoftCognitiveservicesSpeechSdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n\nvar _createWebSpeechPonyfillFactory = _interopRequireDefault(require(\"./createWebSpeechPonyfillFactory\"));\n\nvar _DirectLineSpeech = _interopRequireDefault(require(\"./DirectLineSpeech\"));\n\nvar _patchDialogServiceConnectorInline = _interopRequireDefault(require(\"./patchDialogServiceConnectorInline\"));\n\nvar _refreshDirectLineToken = _interopRequireDefault(require(\"./utils/refreshDirectLineToken\"));\n\nvar _resolveFunctionOrReturnValue = _interopRequireDefault(require(\"./resolveFunctionOrReturnValue\"));\n/* eslint complexity: [\"error\", 33] */\n\n\nvar DIRECT_LINE_TOKEN_RENEWAL_INTERVAL = 900000; // 15 minutes\n\nvar TOKEN_RENEWAL_INTERVAL = 120000; // eslint-disable-next-line complexity\n\nfunction create(_x) {\n  return _create.apply(this, arguments);\n}\n\nfunction _create() {\n  _create = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref) {\n    var audioConfig, audioContext, audioInputDeviceId, enableInternalHTTPSupport, enableTelemetry, fetchCredentials, speechRecognitionEndpointId, _ref$speechRecognitio, speechRecognitionLanguage, speechSynthesisDeploymentId, speechSynthesisOutputFormat, textNormalization, userID, username, _yield$resolveFunctio, authorizationToken, directLineToken, directLineSpeechHostname, region, subscriptionKey, config, dialogServiceConnector, interval, _interval, directLine, webSpeechPonyfillFactory;\n\n    return _regenerator.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            audioConfig = _ref.audioConfig, audioContext = _ref.audioContext, audioInputDeviceId = _ref.audioInputDeviceId, enableInternalHTTPSupport = _ref.enableInternalHTTPSupport, enableTelemetry = _ref.enableTelemetry, fetchCredentials = _ref.fetchCredentials, speechRecognitionEndpointId = _ref.speechRecognitionEndpointId, _ref$speechRecognitio = _ref.speechRecognitionLanguage, speechRecognitionLanguage = _ref$speechRecognitio === void 0 ? typeof window !== 'undefined' && typeof window.navigator !== 'undefined' && window.navigator.language || 'en-US' : _ref$speechRecognitio, speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId, speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat, textNormalization = _ref.textNormalization, userID = _ref.userID, username = _ref.username;\n\n            if (fetchCredentials) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw new Error('\"fetchCredentials\" must be specified.');\n\n          case 3:\n            _context3.next = 5;\n            return (0, _resolveFunctionOrReturnValue.default)(fetchCredentials);\n\n          case 5:\n            _yield$resolveFunctio = _context3.sent;\n            authorizationToken = _yield$resolveFunctio.authorizationToken;\n            directLineToken = _yield$resolveFunctio.directLineToken;\n            directLineSpeechHostname = _yield$resolveFunctio.directLineSpeechHostname;\n            region = _yield$resolveFunctio.region;\n            subscriptionKey = _yield$resolveFunctio.subscriptionKey;\n\n            if (!(!authorizationToken && !subscriptionKey || authorizationToken && subscriptionKey || authorizationToken && typeof authorizationToken !== 'string' || subscriptionKey && typeof subscriptionKey !== 'string' || enableInternalHTTPSupport && !directLineToken)) {\n              _context3.next = 13;\n              break;\n            }\n\n            throw new Error('\"fetchCredentials\" must return either \"authorizationToken\" or \"subscriptionKey\" as a non-empty string only. If enableInternalHTTPSupport is set to true, then it should also return a non-empty \"directLineToken\"');\n\n          case 13:\n            if (typeof enableTelemetry !== 'undefined') {\n              console.warn('botframework-directlinespeech: Telemetry options are not yet supported. Please refer to Cognitive Services documentation for details.');\n            }\n\n            if (!(directLineSpeechHostname && region || !directLineSpeechHostname && !region)) {\n              _context3.next = 16;\n              break;\n            }\n\n            throw new Error('\"fetchCredentials\" must return either \"directLineSpeechHostname\" or \"region\" and it must not be an empty string.');\n\n          case 16:\n            if (!directLineSpeechHostname) {\n              _context3.next = 23;\n              break;\n            }\n\n            if (!(typeof directLineSpeechHostname !== 'string')) {\n              _context3.next = 19;\n              break;\n            }\n\n            throw new Error('\"fetchCredentials\" must return \"directLineSpeechHostname\" as a string.');\n\n          case 19:\n            if (!enableInternalHTTPSupport) {\n              _context3.next = 21;\n              break;\n            }\n\n            throw new Error('\"fetchCredentials\" must not return \"directLineSpeechHostname\" if \"enableInternalHTTPSupport\" is set.');\n\n          case 21:\n            _context3.next = 25;\n            break;\n\n          case 23:\n            if (!(typeof region !== 'string')) {\n              _context3.next = 25;\n              break;\n            }\n\n            throw new Error('\"fetchCredentials\" must return \"region\" as a string.');\n\n          case 25:\n            if (audioConfig && audioInputDeviceId) {\n              console.warn('botframework-directlinespeech-sdk: Only \"audioConfig\" or \"audioInputDeviceId\" can be specified, but not both; ignoring \"audioInputDeviceId\".');\n            } else if (!audioConfig) {\n              if (audioInputDeviceId) {\n                audioConfig = _AudioConfig.AudioConfig.fromMicrophoneInput(audioInputDeviceId);\n              } else {\n                audioConfig = _AudioConfig.AudioConfig.fromDefaultMicrophoneInput();\n              }\n            }\n\n            if (speechRecognitionEndpointId) {\n              console.warn('botframework-directlinespeech: Custom Speech is currently not supported; ignoring \"speechRecognitionEndpointId\".');\n            }\n\n            if (speechSynthesisDeploymentId) {\n              console.warn('botframework-directlinespeech: Custom Voice is currently not supported; ignoring \"speechSynthesisDeploymentId\".');\n            }\n\n            if (speechSynthesisOutputFormat) {\n              console.warn('botframework-directlinespeech: Synthesis output format is currently not supported; ignoring \"speechSynthesisOutputFormat\".');\n            }\n\n            if (textNormalization) {\n              console.warn('botframework-directlinespeech: Text normalization is currently not supported; ignoring \"textNormalization\".');\n            }\n\n            if (userID || username) {\n              console.warn('botframework-directlinespeech: Custom \"userId\" and \"username\" are currently not supported and are ignored.');\n            }\n\n            if (directLineSpeechHostname) {\n              if (authorizationToken) {\n                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromHost(new URL(\"wss://\".concat(directLineSpeechHostname)));\n                config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n              } else {\n                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromHost(new URL(\"wss://\".concat(directLineSpeechHostname)), subscriptionKey);\n              } // TODO: [P1] #3693 In Speech SDK 1.15.0, there is a bug that wrongly construct the endpoint.\n              //       https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/315\n              //       Remove the following line after the bug is resolved.\n\n\n              config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_Host, \"wss://\".concat(directLineSpeechHostname));\n            } else {\n              if (authorizationToken) {\n                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromAuthorizationToken(authorizationToken, region);\n              } else {\n                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromSubscription(subscriptionKey, region);\n              } // If internal HTTP support is enabled, switch the endpoint to Direct Line on Direct Line Speech service.\n\n\n              if (enableInternalHTTPSupport) {\n                config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_Endpoint, \"wss://\".concat(encodeURI(region), \".convai.speech.microsoft.com/directline/api/v1\"));\n                config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_Agent_Connection_Id, directLineToken);\n              }\n            } // Supported options can be found in DialogConnectorFactory.js.\n            // Set the language used for recognition.\n\n\n            config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_RecoLanguage, speechRecognitionLanguage); // The following code sets the output format.\n            // As advised by the Speech team, this API may be subject to future changes.\n            // We are not enabling output format option because it does not send detailed output format to the bot, rendering this option useless.\n            // config.setProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Detailed]);\n            // Set the user ID for starting the conversation.\n\n            userID && config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_From_Id, userID); // Set Custom Speech and Custom Voice.\n            // The following code is copied from C#, and it is not working yet.\n            // https://github.com/Azure-Samples/Cognitive-Services-Direct-Line-Speech-Client/blob/master/DLSpeechClient/MainWindow.xaml.cs\n            // speechRecognitionEndpointId && config.setServiceProperty('cid', speechRecognitionEndpointId, ServicePropertyChannel.UriQueryParameter);\n            // speechSynthesisDeploymentId && config.setProperty(PropertyId.conversation_Custom_Voice_Deployment_Ids, speechSynthesisDeploymentId);\n\n            dialogServiceConnector = (0, _patchDialogServiceConnectorInline.default)(new _microsoftCognitiveservicesSpeechSdk.DialogServiceConnector(config, audioConfig)); // Renew token per interval.\n\n            if (authorizationToken) {\n              interval = setInterval( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n                var _yield$resolveFunctio2, authorizationToken, nextDirectLineSpeechHostname, nextRegion;\n\n                return _regenerator.default.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        // #2660 If the connector has been disposed, we should stop renewing the token.\n                        // TODO: We should use a public implementation if Speech SDK has one related to \"privIsDisposed\".\n                        if (dialogServiceConnector.privIsDisposed) {\n                          clearInterval(interval);\n                        }\n\n                        _context.next = 3;\n                        return (0, _resolveFunctionOrReturnValue.default)(fetchCredentials);\n\n                      case 3:\n                        _yield$resolveFunctio2 = _context.sent;\n                        authorizationToken = _yield$resolveFunctio2.authorizationToken;\n                        nextDirectLineSpeechHostname = _yield$resolveFunctio2.directLineSpeechHostname;\n                        nextRegion = _yield$resolveFunctio2.region;\n\n                        if (authorizationToken) {\n                          _context.next = 9;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", console.warn('botframework-directlinespeech-sdk: Renew token failed because \"fetchCredentials\" call returned no authorization token.'));\n\n                      case 9:\n                        if (!directLineSpeechHostname) {\n                          _context.next = 14;\n                          break;\n                        }\n\n                        if (!(directLineSpeechHostname !== nextDirectLineSpeechHostname)) {\n                          _context.next = 12;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", console.warn('botframework-directlinespeech-sdk: \"directLineSpeechHostname\" change is not supported for renewed token. Authorization token is not renewed.'));\n\n                      case 12:\n                        _context.next = 16;\n                        break;\n\n                      case 14:\n                        if (!(region !== nextRegion)) {\n                          _context.next = 16;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", console.warn('botframework-directlinespeech-sdk: Region change is not supported for renewed token. Authorization token is not renewed.'));\n\n                      case 16:\n                        dialogServiceConnector.authorizationToken = authorizationToken;\n                      // eslint-disable-line require-atomic-updates\n\n                      case 17:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })), TOKEN_RENEWAL_INTERVAL);\n            } // Renew token per interval.\n\n\n            if (enableInternalHTTPSupport) {\n              _interval = setInterval( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n                var refreshedDirectLineToken;\n                return _regenerator.default.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        // #2660 If the connector has been disposed, we should stop renewing the token.\n                        // TODO: We should use a public implementation if Speech SDK has one related to \"privIsDisposed\".\n                        if (dialogServiceConnector.privIsDisposed) {\n                          clearInterval(_interval);\n                        }\n\n                        _context2.next = 3;\n                        return (0, _refreshDirectLineToken.default)(directLineToken);\n\n                      case 3:\n                        refreshedDirectLineToken = _context2.sent;\n\n                        if (refreshedDirectLineToken) {\n                          _context2.next = 6;\n                          break;\n                        }\n\n                        return _context2.abrupt(\"return\", console.warn('botframework-directlinespeech-sdk: Renew token failed because call to refresh token Direct Line API did not return a new token.'));\n\n                      case 6:\n                        config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_Agent_Connection_Id, refreshedDirectLineToken);\n                        dialogServiceConnector.properties.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_Agent_Connection_Id, refreshedDirectLineToken);\n                        dialogServiceConnector.connect();\n\n                      case 9:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              })), DIRECT_LINE_TOKEN_RENEWAL_INTERVAL);\n            }\n\n            directLine = new _DirectLineSpeech.default({\n              dialogServiceConnector: dialogServiceConnector\n            });\n            webSpeechPonyfillFactory = (0, _createWebSpeechPonyfillFactory.default)({\n              audioContext: audioContext,\n              enableTelemetry: enableTelemetry,\n              recognizer: dialogServiceConnector,\n              textNormalization: textNormalization\n            });\n            return _context3.abrupt(\"return\", {\n              directLine: directLine,\n              webSpeechPonyfillFactory: webSpeechPonyfillFactory\n            });\n\n          case 40:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _create.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/createAdapters.js"],"names":["DIRECT_LINE_TOKEN_RENEWAL_INTERVAL","TOKEN_RENEWAL_INTERVAL","create","audioConfig","audioContext","audioInputDeviceId","enableInternalHTTPSupport","enableTelemetry","fetchCredentials","speechRecognitionEndpointId","speechRecognitionLanguage","window","speechSynthesisDeploymentId","speechSynthesisOutputFormat","textNormalization","userID","username","authorizationToken","directLineToken","directLineSpeechHostname","region","subscriptionKey","console","AudioConfig","config","BotFrameworkConfig","PropertyId","encodeURI","dialogServiceConnector","DialogServiceConnector","interval","setInterval","clearInterval","nextDirectLineSpeechHostname","nextRegion","refreshedDirectLineToken","directLine","DirectLineSpeech","webSpeechPonyfillFactory","recognizer"],"mappings":"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","sourcesContent":["/* eslint complexity: [\"error\", 33] */\n\nimport { AudioConfig } from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig';\nimport { BotFrameworkConfig, DialogServiceConnector, PropertyId } from 'microsoft-cognitiveservices-speech-sdk';\n\nimport createWebSpeechPonyfillFactory from './createWebSpeechPonyfillFactory';\nimport DirectLineSpeech from './DirectLineSpeech';\nimport patchDialogServiceConnectorInline from './patchDialogServiceConnectorInline';\nimport refreshDirectLineToken from './utils/refreshDirectLineToken';\nimport resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nconst DIRECT_LINE_TOKEN_RENEWAL_INTERVAL = 900000; // 15 minutes\nconst TOKEN_RENEWAL_INTERVAL = 120000;\n\n// eslint-disable-next-line complexity\nexport default async function create({\n  audioConfig,\n  audioContext,\n  audioInputDeviceId,\n  enableInternalHTTPSupport,\n  enableTelemetry,\n  fetchCredentials,\n  speechRecognitionEndpointId,\n  speechRecognitionLanguage = (typeof window !== 'undefined' &&\n    typeof window.navigator !== 'undefined' &&\n    window.navigator.language) ||\n    'en-US',\n  speechSynthesisDeploymentId,\n  speechSynthesisOutputFormat,\n  textNormalization,\n  userID,\n  username\n}) {\n  if (!fetchCredentials) {\n    throw new Error('\"fetchCredentials\" must be specified.');\n  }\n\n  const {\n    authorizationToken,\n    directLineToken,\n    directLineSpeechHostname,\n    region,\n    subscriptionKey\n  } = await resolveFunctionOrReturnValue(fetchCredentials);\n\n  if (\n    (!authorizationToken && !subscriptionKey) ||\n    (authorizationToken && subscriptionKey) ||\n    (authorizationToken && typeof authorizationToken !== 'string') ||\n    (subscriptionKey && typeof subscriptionKey !== 'string') ||\n    (enableInternalHTTPSupport && !directLineToken)\n  ) {\n    throw new Error(\n      '\"fetchCredentials\" must return either \"authorizationToken\" or \"subscriptionKey\" as a non-empty string only. If enableInternalHTTPSupport is set to true, then it should also return a non-empty \"directLineToken\"'\n    );\n  }\n\n  if (typeof enableTelemetry !== 'undefined') {\n    console.warn(\n      'botframework-directlinespeech: Telemetry options are not yet supported. Please refer to Cognitive Services documentation for details.'\n    );\n  }\n\n  if ((directLineSpeechHostname && region) || (!directLineSpeechHostname && !region)) {\n    throw new Error(\n      '\"fetchCredentials\" must return either \"directLineSpeechHostname\" or \"region\" and it must not be an empty string.'\n    );\n  }\n\n  if (directLineSpeechHostname) {\n    if (typeof directLineSpeechHostname !== 'string') {\n      throw new Error('\"fetchCredentials\" must return \"directLineSpeechHostname\" as a string.');\n    }\n\n    if (enableInternalHTTPSupport) {\n      throw new Error(\n        '\"fetchCredentials\" must not return \"directLineSpeechHostname\" if \"enableInternalHTTPSupport\" is set.'\n      );\n    }\n  } else {\n    if (typeof region !== 'string') {\n      throw new Error('\"fetchCredentials\" must return \"region\" as a string.');\n    }\n  }\n\n  if (audioConfig && audioInputDeviceId) {\n    console.warn(\n      'botframework-directlinespeech-sdk: Only \"audioConfig\" or \"audioInputDeviceId\" can be specified, but not both; ignoring \"audioInputDeviceId\".'\n    );\n  } else if (!audioConfig) {\n    if (audioInputDeviceId) {\n      audioConfig = AudioConfig.fromMicrophoneInput(audioInputDeviceId);\n    } else {\n      audioConfig = AudioConfig.fromDefaultMicrophoneInput();\n    }\n  }\n\n  if (speechRecognitionEndpointId) {\n    console.warn(\n      'botframework-directlinespeech: Custom Speech is currently not supported; ignoring \"speechRecognitionEndpointId\".'\n    );\n  }\n\n  if (speechSynthesisDeploymentId) {\n    console.warn(\n      'botframework-directlinespeech: Custom Voice is currently not supported; ignoring \"speechSynthesisDeploymentId\".'\n    );\n  }\n\n  if (speechSynthesisOutputFormat) {\n    console.warn(\n      'botframework-directlinespeech: Synthesis output format is currently not supported; ignoring \"speechSynthesisOutputFormat\".'\n    );\n  }\n\n  if (textNormalization) {\n    console.warn(\n      'botframework-directlinespeech: Text normalization is currently not supported; ignoring \"textNormalization\".'\n    );\n  }\n\n  if (userID || username) {\n    console.warn(\n      'botframework-directlinespeech: Custom \"userId\" and \"username\" are currently not supported and are ignored.'\n    );\n  }\n\n  let config;\n\n  if (directLineSpeechHostname) {\n    if (authorizationToken) {\n      config = BotFrameworkConfig.fromHost(new URL(`wss://${directLineSpeechHostname}`));\n\n      config.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    } else {\n      config = BotFrameworkConfig.fromHost(new URL(`wss://${directLineSpeechHostname}`), subscriptionKey);\n    }\n\n    // TODO: [P1] #3693 In Speech SDK 1.15.0, there is a bug that wrongly construct the endpoint.\n    //       https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/315\n    //       Remove the following line after the bug is resolved.\n    config.setProperty(PropertyId.SpeechServiceConnection_Host, `wss://${directLineSpeechHostname}`);\n  } else {\n    if (authorizationToken) {\n      config = BotFrameworkConfig.fromAuthorizationToken(authorizationToken, region);\n    } else {\n      config = BotFrameworkConfig.fromSubscription(subscriptionKey, region);\n    }\n\n    // If internal HTTP support is enabled, switch the endpoint to Direct Line on Direct Line Speech service.\n    if (enableInternalHTTPSupport) {\n      config.setProperty(\n        PropertyId.SpeechServiceConnection_Endpoint,\n        `wss://${encodeURI(region)}.convai.speech.microsoft.com/directline/api/v1`\n      );\n\n      config.setProperty(PropertyId.Conversation_Agent_Connection_Id, directLineToken);\n    }\n  }\n\n  // Supported options can be found in DialogConnectorFactory.js.\n\n  // Set the language used for recognition.\n  config.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, speechRecognitionLanguage);\n\n  // The following code sets the output format.\n  // As advised by the Speech team, this API may be subject to future changes.\n  // We are not enabling output format option because it does not send detailed output format to the bot, rendering this option useless.\n  // config.setProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Detailed]);\n\n  // Set the user ID for starting the conversation.\n  userID && config.setProperty(PropertyId.Conversation_From_Id, userID);\n\n  // Set Custom Speech and Custom Voice.\n  // The following code is copied from C#, and it is not working yet.\n  // https://github.com/Azure-Samples/Cognitive-Services-Direct-Line-Speech-Client/blob/master/DLSpeechClient/MainWindow.xaml.cs\n  // speechRecognitionEndpointId && config.setServiceProperty('cid', speechRecognitionEndpointId, ServicePropertyChannel.UriQueryParameter);\n  // speechSynthesisDeploymentId && config.setProperty(PropertyId.conversation_Custom_Voice_Deployment_Ids, speechSynthesisDeploymentId);\n\n  const dialogServiceConnector = patchDialogServiceConnectorInline(new DialogServiceConnector(config, audioConfig));\n\n  // Renew token per interval.\n  if (authorizationToken) {\n    const interval = setInterval(async () => {\n      // #2660 If the connector has been disposed, we should stop renewing the token.\n\n      // TODO: We should use a public implementation if Speech SDK has one related to \"privIsDisposed\".\n      if (dialogServiceConnector.privIsDisposed) {\n        clearInterval(interval);\n      }\n\n      const {\n        authorizationToken,\n        directLineSpeechHostname: nextDirectLineSpeechHostname,\n        region: nextRegion\n      } = await resolveFunctionOrReturnValue(fetchCredentials);\n\n      if (!authorizationToken) {\n        return console.warn(\n          'botframework-directlinespeech-sdk: Renew token failed because \"fetchCredentials\" call returned no authorization token.'\n        );\n      }\n\n      if (directLineSpeechHostname) {\n        if (directLineSpeechHostname !== nextDirectLineSpeechHostname) {\n          return console.warn(\n            'botframework-directlinespeech-sdk: \"directLineSpeechHostname\" change is not supported for renewed token. Authorization token is not renewed.'\n          );\n        }\n      } else {\n        if (region !== nextRegion) {\n          return console.warn(\n            'botframework-directlinespeech-sdk: Region change is not supported for renewed token. Authorization token is not renewed.'\n          );\n        }\n      }\n\n      dialogServiceConnector.authorizationToken = authorizationToken; // eslint-disable-line require-atomic-updates\n    }, TOKEN_RENEWAL_INTERVAL);\n  }\n\n  // Renew token per interval.\n  if (enableInternalHTTPSupport) {\n    const interval = setInterval(async () => {\n      // #2660 If the connector has been disposed, we should stop renewing the token.\n\n      // TODO: We should use a public implementation if Speech SDK has one related to \"privIsDisposed\".\n      if (dialogServiceConnector.privIsDisposed) {\n        clearInterval(interval);\n      }\n\n      const refreshedDirectLineToken = await refreshDirectLineToken(directLineToken);\n\n      if (!refreshedDirectLineToken) {\n        return console.warn(\n          'botframework-directlinespeech-sdk: Renew token failed because call to refresh token Direct Line API did not return a new token.'\n        );\n      }\n\n      config.setProperty(PropertyId.Conversation_Agent_Connection_Id, refreshedDirectLineToken);\n\n      dialogServiceConnector.properties.setProperty(\n        PropertyId.Conversation_Agent_Connection_Id,\n        refreshedDirectLineToken\n      );\n      dialogServiceConnector.connect();\n    }, DIRECT_LINE_TOKEN_RENEWAL_INTERVAL);\n  }\n\n  const directLine = new DirectLineSpeech({ dialogServiceConnector });\n\n  const webSpeechPonyfillFactory = createWebSpeechPonyfillFactory({\n    audioContext,\n    enableTelemetry,\n    recognizer: dialogServiceConnector,\n    textNormalization\n  });\n\n  return {\n    directLine,\n    webSpeechPonyfillFactory\n  };\n}\n"],"sourceRoot":"directlinespeech:///"},"metadata":{},"sourceType":"script"}