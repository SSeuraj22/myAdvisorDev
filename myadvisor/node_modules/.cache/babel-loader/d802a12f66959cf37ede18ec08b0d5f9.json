{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentProfile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\";\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullCourses from \"./PullCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\";\n\nconst StudentProfile = props => {\n  _s();\n\n  const [uploaded, setUploaded] = useState(true); // Boolean value to indicate whether or not a transcript has been uploaded\n\n  const [processed, setProcessed] = useState(false); // Boolean value to indicate whether or not the recommended courses have been finished generating\n  //const newDegProg = props.newDeg;\n\n  var inProgressCourseArr = []; //array for student's in progress courses\n  // Function to refresh page once a transcript has been uploaded\n\n  function uploadedHandler() {\n    window.location.reload();\n  }\n\n  var details = PullDetails(localStorage.getItem(\"username\")); // Get student details from database\n  //console.log(details);\n\n  var studentCourses = PullStudentCourses(localStorage.getItem(\"username\")); // Get student courses from database\n\n  var programmes = PullProgrammes(); // Get list of all degree programmes from database\n\n  var courses = PullCourses(); //Get list of all courses from database\n  //console.log(courses);\n  //var courseInProgCreds = 0;\n\n  function getCreditsInprogressCourses() {\n    var amountCreditsInProg = 0; // Iterate through student courses list\n\n    for (var j = 0; j < studentCourses.length; j++) {\n      if (studentCourses[j].grade === \"IP\") {\n        //if an \"In Progress\" course is found\n        for (var count = 0; count < courses.length; count++) {\n          if (studentCourses[j].courseCode === courses[count].courseCode) {\n            amountCreditsInProg = amountCreditsInProg + courses[count].credits;\n          }\n        }\n      }\n    }\n\n    return amountCreditsInProg;\n  }\n\n  useEffect(() => {\n    props.setCreditsCompleted(details.credits);\n    props.setStudentGpa(details.gpa); //props.setNewDegProg(newDegProg);\n    //courseInProgCreds = getCreditsInprogressCourses();\n\n    props.setCourseInprogCreds(getCreditsInprogressCourses());\n    props.setTransDetails(details);\n    props.setDisplay(true); // Show the \"Begin Advising\" button on the sidebar\n\n    props.setHidden(false); // Unhide the sidebar\n\n    props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n\n    if (!processed) {\n      // If the student's transcript hasn't been processed as yet\n      if (details.gpa < 2.0 && details.gpa != 0) {\n        // If the student's gpa is less than 2 and not 0 (0 means their GPA hasn't been calculated by UWI yet)\n        props.setAcWarning(true); // Indicate that they are on academic warning\n      }\n\n      if (details.length === 0) {\n        // If nothing was pulled from the student's details\n        setUploaded(false); // Indicate that the user has not uploaded their transcript\n\n        props.setDegProg(0); // Set degree progress to 0%\n\n        props.setCreds(93); // Set remaining credits left for degree to 93\n      } else {\n        setUploaded(true); // Indicate that the user has uploaded their transcript\n\n        props.setDegProg(details.progress); // Set degree progress percentage\n\n        props.setCreds(93 - details.credits); // Set credits left for degree\n      }\n\n      var studentProgramme = props.programme; // Get student programme that they selected on Start page\n\n      if (studentProgramme === null) {\n        // If student programme data has been lost from state\n        studentProgramme = localStorage.getItem(\"programme\");\n      } // Iterate through programmes list\n\n\n      for (var i = 0; i < programmes.length; i++) {\n        if (programmes[i].name === studentProgramme) {\n          // If student programme is in programmes list\n          var programmeId = programmes[i].id;\n        }\n      }\n\n      if (programmeId) {\n        determineCourses(programmeId);\n      }\n    }\n  }); // Function to fetch courses that are associated with a given programme\n\n  async function getProgrammeCourses(id) {\n    try {\n      const {\n        data: response\n      } = await axios.get(`/programmes/offered-courses/${id}`); //use data destructuring to get data from the promise object\n\n      console.log(response);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  } // Grades which do not give credits\n\n\n  let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\", \"FMP\"]; // Function to split courses by semester and level\n\n  function splitBySem(coreRes, coursesArr) {\n    var semesterArr = [[]]; //console.log(coursesArr);\n    // Iterate through programme courses\n\n    for (var key in coreRes) {\n      // Iterate through student courses\n      for (var i = 0; i < coursesArr.length; i++) {\n        if (key === coursesArr[i].courseCode) {\n          // If programme course is in courses array\n          if (coursesArr[i].semester === \"1\" && coursesArr[i].level === \"I\") {\n            // If Year 1, Semester 1 course\n            if (!semesterArr[0]) {\n              // Initialise 2D array\n              semesterArr[0] = [];\n            }\n\n            semesterArr[0].push({\n              // Push course code and student grade into array\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (coursesArr[i].semester === \"2\" && coursesArr[i].level === \"I\") {\n            if (!semesterArr[1]) {\n              semesterArr[1] = [];\n            }\n\n            semesterArr[1].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (coursesArr[i].semester === \"1\" && coursesArr[i].level === \"II\") {\n            if (!semesterArr[2]) {\n              semesterArr[2] = [];\n            }\n\n            semesterArr[2].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (coursesArr[i].semester === \"2\" && coursesArr[i].level === \"II\") {\n            if (!semesterArr[3]) {\n              semesterArr[3] = [];\n            }\n\n            semesterArr[3].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (coursesArr[i].semester === \"1\" && coursesArr[i].level === \"III\") {\n            if (!semesterArr[4]) {\n              semesterArr[4] = [];\n            }\n\n            semesterArr[4].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (coursesArr[i].semester === \"2\" && coursesArr[i].level === \"III\") {\n            if (!semesterArr[5]) {\n              semesterArr[5] = [];\n            }\n\n            semesterArr[5].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n        }\n      }\n    }\n\n    return semesterArr;\n  } // Function to get all core courses from programme courses\n\n\n  function getCoreCourses(courses) {\n    var core = [];\n\n    for (var i = 0; i < courses.length; i++) {\n      if (courses[i].type === \"Core\") {\n        core.push(courses[i]);\n      }\n    }\n\n    return core;\n  }\n\n  function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n    var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n\n    var coreY1S2 = coreSemesterArr[1];\n    var coreY2S1 = coreSemesterArr[2];\n    var coreY2S2 = coreSemesterArr[3];\n    var coreY3S1 = coreSemesterArr[4];\n    var coreY3S2 = coreSemesterArr[5];\n    var recCourses = courses; //console.log(recCourses);\n\n    var key;\n\n    if (year === 1 && currentSem === 1) {\n      //If student is in Year 1 Semester 1\n      for (key in coreY1S1) {\n        // Iterate core courses offered in year 1 semester 1\n        if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n          // If course has not been done before or student failed it in the past\n          if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n            recCourses.push(coreY1S1[key].courseCode); // Add course to recommended course array\n        }\n      }\n    }\n\n    if (year === 1 && currentSem === 2) {\n      for (key in coreY1S2) {\n        if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n          if (!courses.includes(coreY1S2[key].courseCode)) recCourses.push(coreY1S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 1) {\n      for (key in coreY2S1) {\n        if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n          if (!courses.includes(coreY2S1[key].courseCode)) recCourses.push(coreY2S1[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S1) {\n        // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n        if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n          if (!courses.includes(coreY1S1[key].courseCode)) recCourses.push(coreY1S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 2) {\n      for (key in coreY2S2) {\n        if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n          if (!courses.includes(coreY2S2[key].courseCode)) recCourses.push(coreY2S2[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S2) {\n        if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n          if (!courses.includes(coreY1S2[key].courseCode)) recCourses.push(coreY1S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 1) {\n      for (key in coreY3S1) {\n        if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n          if (!courses.includes(coreY3S1[key].courseCode)) recCourses.push(coreY3S1[key].courseCode);\n        }\n      }\n\n      for (key in coreY2S1) {\n        if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n          if (!courses.includes(coreY2S1[key].courseCode)) recCourses.push(coreY2S1[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S1) {\n        if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n          if (!courses.includes(coreY1S1[key].courseCode)) recCourses.push(coreY1S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 2) {\n      for (key in coreY3S2) {\n        if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n          if (!courses.includes(coreY3S2[key].courseCode)) recCourses.push(coreY3S2[key].courseCode);\n        }\n      }\n\n      for (key in coreY2S2) {\n        if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n          if (!courses.includes(coreY2S2[key].courseCode)) recCourses.push(coreY2S2[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S2) {\n        if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n          if (!courses.includes(coreY1S2[key].courseCode)) recCourses.push(coreY1S2[key].courseCode);\n        }\n      }\n    }\n\n    return recCourses;\n  } // Function to remove courses from recommended courses list if the student does not satisfy the prerequisites\n\n\n  function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n    var index; // Iterate through programme courses\n\n    for (var i = 0; i < courses.length; i++) {\n      if (recCourses.includes(courses[i].courseCode)) {\n        // If course is being recommended\n        var prereq = courses[i].prerequisites; // Store course prerequisites\n\n        if (prereq.length === 8) {\n          // If course only has 1 prerequisite\n          if (!(studentCourses[prereq] === \"P\")) {\n            // If the student didn't pass the course\n            index = recCourses.indexOf(courses[i].courseCode); // Find index of course in recCourses array\n\n            if (index > -1) {\n              // If index was found\n              recCourses.splice(index, 1); // Remove course from recCourses array\n            }\n          }\n        }\n\n        if (prereq.length > 8) {\n          // If course has 2 prerequisites or an alternative prerequisite\n          var prereq1 = prereq.slice(0, 8); // Get 1st prereq\n\n          var prereq2 = prereq.slice(-8); // Get 2nd prereq\n\n          if (prereq.charAt(9) === \"|\") {\n            // If the prereqs have OR condition\n            if (!(studentCourses[prereq1] === \"P\" || studentCourses[prereq2] === \"P\")) {\n              index = recCourses.indexOf(courses[i].courseCode);\n\n              if (index > -1) {\n                recCourses.splice(index, 1);\n              }\n            }\n          }\n\n          if (prereq.charAt(9) === \"&\") {\n            // If the prereqs have AND condition\n            if (!(studentCourses[prereq1] === \"P\" && studentCourses[prereq2] === \"P\")) {\n              index = recCourses.indexOf(courses[i].courseCode);\n\n              if (index > -1) {\n                recCourses.splice(index, 1);\n              }\n            }\n          }\n        }\n      }\n    }\n  } // Function to indicate is a student passed, failed, didn't do a course or is in progress\n\n\n  function determineStudentCourses(core) {\n    var coreRes = {};\n    var inProgCourseNCreds = [];\n\n    for (var i = 0; i < core.length; i++) {\n      for (var j = 0; j < studentCourses.length; j++) {\n        if (studentCourses[j].courseCode === core[i].courseCode && studentCourses[j].grade === \"IP\") {\n          coreRes[`${core[i].courseCode}`] = \"IP\";\n          inProgressCourseArr.push(studentCourses[j].courseCode);\n          const obj = {\n            courseCode: studentCourses[j].courseCode,\n            credits: core[i].credits\n          };\n          inProgCourseNCreds.push(obj); //setInprogressCourses(current => [current.., studentCourses[j].courseCode]);\n        } else if (studentCourses[j].courseCode === core[i].courseCode && !noCreditGrade.includes(studentCourses[j].grade)) {\n          coreRes[`${core[i].courseCode}`] = \"P\";\n        } else if (studentCourses[j].courseCode === core[i].courseCode && noCreditGrade.includes(studentCourses[j].grade)) {\n          coreRes[`${core[i].courseCode}`] = \"F\";\n        } else {\n          if (!coreRes[`${core[i].courseCode}`]) {\n            coreRes[`${core[i].courseCode}`] = \"N\";\n          }\n        }\n      }\n    }\n\n    props.setInProgressCourses(inProgressCourseArr);\n    props.setCourseInProgNCredits(inProgCourseNCreds);\n    return coreRes;\n  } // Function to determine the recommended courses\n\n\n  async function determineCourses(programmeId) {\n    let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n\n    let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n\n    let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n\n    let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n\n    let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n\n    let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n\n    var programmeCourses = {}; // Dictionary to store all programme courses\n\n    var semesterArr = []; // Array to store courses by semester\n\n    var coreSemesterArr = []; // Array to store core courses by semester\n\n    var today = new Date(); // Today's date\n\n    var currentSem; // Value to store current semester\n\n    var courses = getProgrammeCourses(programmeId);\n\n    for (var i = 0; i < courses.length; i++) {\n      // Initialise Courses for Degree using their Level and Semester\n      if (courses[i].level === \"I\") {\n        if (courses[i].semester === \"1\") {\n          Y1S1[courses[i].courseCode] = \"N\";\n        }\n\n        if (courses[i].semester === \"2\") {\n          Y1S2[courses[i].courseCode] = \"N\";\n        }\n      }\n\n      if (courses[i].level === \"II\") {\n        if (courses[i].semester === \"1\") {\n          Y2S1[courses[i].courseCode] = \"N\";\n        }\n\n        if (courses[i].semester === \"2\") {\n          Y2S2[courses[i].courseCode] = \"N\";\n        }\n      }\n\n      if (courses[i].level === \"III\") {\n        if (courses[i].semester === \"1\") {\n          Y3S1[courses[i].courseCode] = \"N\";\n        }\n\n        if (courses[i].semester === \"2\") {\n          Y3S2[courses[i].courseCode] = \"N\";\n        }\n      }\n    }\n\n    programmeCourses = determineStudentCourses(courses); // Determine what courses a student failed, passed, didnt do or is in progress\n    //console.log(\"progcourses \"+JSON.stringify(programmeCourses));\n    //console.log(courses);\n\n    semesterArr = splitBySem(programmeCourses, courses); // Split courses by semester\n\n    var coreCourses = getCoreCourses(courses); // Get core courses\n    //console.log(coreCourses);\n\n    coreSemesterArr = splitBySem(programmeCourses, coreCourses); // Split core courses by semester\n\n    var recCourses = [];\n    var counter = 0;\n    var year = 1;\n    var sem = 1;\n    var key;\n    Y1S1 = semesterArr[0]; //console.log(programmeCourses);\n\n    Y1S2 = semesterArr[1];\n    Y2S1 = semesterArr[2];\n    Y2S2 = semesterArr[3];\n    Y3S1 = semesterArr[4];\n    Y3S2 = semesterArr[5];\n    counter = 0; // If a student passed, failed or the course is in progress, assume that the student is in the next semester\n\n    for (key in Y1S1) {\n      if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n        counter += 1;\n      }\n    }\n\n    if (counter > 1) {\n      sem = 2;\n    }\n\n    counter = 0;\n\n    if (year === 1 && sem === 2) {\n      for (key in Y1S2) {\n        if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 1;\n        year = 2;\n      }\n    }\n\n    counter = 0;\n\n    if (year === 2 && sem === 1) {\n      for (key in Y2S1) {\n        if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 2;\n      }\n    }\n\n    counter = 0;\n\n    if (year === 2 && sem === 2) {\n      for (key in Y2S2) {\n        if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 1;\n        year = 3;\n      }\n    }\n\n    counter = 0;\n\n    if (year === 3 && sem === 1) {\n      for (key in Y3S1) {\n        if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 2;\n      }\n    }\n\n    if (today.getMonth() < 4) {\n      // If the date is currently between January and April\n      currentSem = 2;\n    } // else if (today.getMonth() < 6) { // If the date is currently between May and July\n    //     currentSem = 1;\n    // }\n    else {\n        // If the date is currently between August and December\n        currentSem = 1;\n      } // Recommended courses based on current year and semester if the student has not done the course yet\n\n\n    if (year === 1 && currentSem === 1) {\n      for (key in Y1S1) {\n        if (Y1S1[key].grade === \"N\") {\n          recCourses.push(Y1S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 1 && currentSem === 2) {\n      for (key in Y1S2) {\n        if (Y1S2[key].grade === \"N\") {\n          recCourses.push(Y1S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 1) {\n      for (key in Y2S1) {\n        if (Y2S1[key].grade === \"N\") {\n          recCourses.push(Y2S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 2) {\n      for (key in Y2S2) {\n        if (Y2S2[key].grade === \"N\") {\n          recCourses.push(Y2S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 1) {\n      for (key in Y3S1) {\n        if (Y3S1[key].grade === \"N\") {\n          recCourses.push(Y3S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 2) {\n      for (key in Y3S2) {\n        if (Y3S2[key].grade === \"N\") {\n          recCourses.push(Y3S2[key].courseCode);\n        }\n      }\n    }\n\n    recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n    removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n    props.setRecommended(recCourses);\n    props.setLevel(year); //console.log(props.recCourses);\n\n    if (props.recCourses !== null) {\n      props.setLoad(false);\n    }\n\n    setProcessed(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header blue-txt\",\n            children: \"Student Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12\",\n              children: uploaded ? /*#__PURE__*/_jsxDEV(DetailsCard, {\n                details: details,\n                uploadedHandler: uploadedHandler,\n                setProg: props.setProg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(NoTranscript, {\n                uploadedHandler: uploadedHandler,\n                setProg: props.setProg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header blue-txt\",\n            children: \"Courses Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 21\n          }, this), uploaded ? /*#__PURE__*/_jsxDEV(StudentCoursesCard, {\n            courses: studentCourses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card details-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                class: \"table table-borderless table-striped\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    class: \"d-flex blue-txt\",\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-1 level-cell\",\n                      children: \"Level\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 586,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-2 code-cell\",\n                      children: \"Course Code\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 587,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-8 title-cell\",\n                      children: \"Course Title\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 588,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-1 credit-cell\",\n                      children: \"Grade\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 589,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 585,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 584,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 565,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StudentProfile, \"jwjbBymSM1qBPrgAvJH14ocXtc4=\");\n\n_c = StudentProfile;\nexport default StudentProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentProfile\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentProfile.js"],"names":["React","Component","useEffect","useState","DetailsCard","NoTranscript","PullDetails","PullStudentCourses","PullCourses","PullProgrammes","StudentCoursesCard","axios","StudentProfile","props","uploaded","setUploaded","processed","setProcessed","inProgressCourseArr","uploadedHandler","window","location","reload","details","localStorage","getItem","studentCourses","programmes","courses","getCreditsInprogressCourses","amountCreditsInProg","j","length","grade","count","courseCode","credits","setCreditsCompleted","setStudentGpa","gpa","setCourseInprogCreds","setTransDetails","setDisplay","setHidden","setShowBotButtons","setAcWarning","setDegProg","setCreds","progress","studentProgramme","programme","i","name","programmeId","id","determineCourses","getProgrammeCourses","data","response","get","console","log","error","noCreditGrade","splitBySem","coreRes","coursesArr","semesterArr","key","semester","level","push","getCoreCourses","core","type","recommendCoreCourses","coreSemesterArr","year","currentSem","coreY1S1","coreY1S2","coreY2S1","coreY2S2","coreY3S1","coreY3S2","recCourses","includes","removeCoursesNoPrereq","index","prereq","prerequisites","indexOf","splice","prereq1","slice","prereq2","charAt","determineStudentCourses","inProgCourseNCreds","obj","setInProgressCourses","setCourseInProgNCredits","Y1S1","Y1S2","Y2S1","Y2S2","Y3S1","Y3S2","programmeCourses","today","Date","coreCourses","counter","sem","getMonth","setRecommended","setLevel","setLoad","setProg"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\"\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullCourses from \"./PullCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\";\n\n\nconst StudentProfile = (props) => {\n\n    const [uploaded, setUploaded] = useState(true); // Boolean value to indicate whether or not a transcript has been uploaded\n    const [processed, setProcessed] = useState(false); // Boolean value to indicate whether or not the recommended courses have been finished generating\n    //const newDegProg = props.newDeg;\n    var inProgressCourseArr = [];//array for student's in progress courses\n\n    // Function to refresh page once a transcript has been uploaded\n    function uploadedHandler() {\n        window.location.reload();\n    }\n\n    var details = PullDetails(localStorage.getItem(\"username\")); // Get student details from database\n    //console.log(details);\n    var studentCourses = PullStudentCourses(localStorage.getItem(\"username\")); // Get student courses from database\n    var programmes = PullProgrammes(); // Get list of all degree programmes from database\n    var courses = PullCourses(); //Get list of all courses from database\n    //console.log(courses);\n    //var courseInProgCreds = 0;\n    \n   \n    function getCreditsInprogressCourses(){\n        var amountCreditsInProg = 0;\n        \n        // Iterate through student courses list\n        for(var j=0; j<studentCourses.length; j++){\n            if(studentCourses[j].grade === \"IP\"){//if an \"In Progress\" course is found\n                for(var count=0; count<courses.length; count++){\n                    if(studentCourses[j].courseCode === courses[count].courseCode){\n                        amountCreditsInProg = amountCreditsInProg + courses[count].credits;\n                    }\n                }\n            }\n        }\n        return amountCreditsInProg;\n    }\n \n    useEffect(() => {\n        props.setCreditsCompleted(details.credits);\n        props.setStudentGpa(details.gpa);\n        //props.setNewDegProg(newDegProg);\n        //courseInProgCreds = getCreditsInprogressCourses();\n        props.setCourseInprogCreds(getCreditsInprogressCourses());\n        props.setTransDetails(details);\n        props.setDisplay(true); // Show the \"Begin Advising\" button on the sidebar\n        props.setHidden(false); // Unhide the sidebar\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        if (!processed) { // If the student's transcript hasn't been processed as yet\n            if (details.gpa < 2.0 && details.gpa != 0) { // If the student's gpa is less than 2 and not 0 (0 means their GPA hasn't been calculated by UWI yet)\n                props.setAcWarning(true); // Indicate that they are on academic warning\n            }\n            if (details.length === 0) { // If nothing was pulled from the student's details\n                setUploaded(false); // Indicate that the user has not uploaded their transcript\n                props.setDegProg(0); // Set degree progress to 0%\n                props.setCreds(93); // Set remaining credits left for degree to 93\n            }\n            else {\n                setUploaded(true); // Indicate that the user has uploaded their transcript\n                props.setDegProg(details.progress); // Set degree progress percentage\n                props.setCreds(93 - details.credits); // Set credits left for degree\n            }\n\n            var studentProgramme = props.programme; // Get student programme that they selected on Start page\n\n            if (studentProgramme === null) { // If student programme data has been lost from state\n                studentProgramme = localStorage.getItem(\"programme\");\n            }\n\n            // Iterate through programmes list\n            for (var i=0; i<programmes.length; i++) {\n                if (programmes[i].name === studentProgramme) { // If student programme is in programmes list\n                    var programmeId = programmes[i].id;\n                }\n            }\n            if (programmeId) { \n                determineCourses(programmeId);\n            }\n        }\n    });\n\n    // Function to fetch courses that are associated with a given programme\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          console.log(response);\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    // Grades which do not give credits\n    let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\", \"FMP\"]\n\n    // Function to split courses by semester and level\n    function splitBySem(coreRes, coursesArr) {\n        var semesterArr = [[]];\n        //console.log(coursesArr);\n\n        // Iterate through programme courses\n        for (var key in coreRes) {\n\n            // Iterate through student courses\n            for (var i=0; i<coursesArr.length; i++) {\n                if (key === coursesArr[i].courseCode) { // If programme course is in courses array\n                    if ((coursesArr[i].semester === \"1\" && coursesArr[i].level === \"I\")) { // If Year 1, Semester 1 course\n                        if (!semesterArr[0]) { // Initialise 2D array\n                            semesterArr[0] = [];\n                        }\n                        semesterArr[0].push({ // Push course code and student grade into array\n                            courseCode: key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((coursesArr[i].semester === \"2\" && coursesArr[i].level === \"I\")) {\n                        if (!semesterArr[1]) {\n                            semesterArr[1] = [];\n                        }\n                        semesterArr[1].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((coursesArr[i].semester === \"1\" && coursesArr[i].level === \"II\")) {\n                        if (!semesterArr[2]) {\n                            semesterArr[2] = [];\n                        }\n                        semesterArr[2].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((coursesArr[i].semester === \"2\" && coursesArr[i].level === \"II\")) {\n                        if (!semesterArr[3]) {\n                            semesterArr[3] = [];\n                        }\n                        semesterArr[3].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((coursesArr[i].semester === \"1\" && coursesArr[i].level === \"III\")) {\n                        if (!semesterArr[4]) {\n                            semesterArr[4] = [];\n                        }\n                        semesterArr[4].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((coursesArr[i].semester === \"2\" && coursesArr[i].level === \"III\")) {\n                        if (!semesterArr[5]) {\n                            semesterArr[5] = [];\n                        }\n                        semesterArr[5].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n        return semesterArr;\n    }\n\n    // Function to get all core courses from programme courses\n    function getCoreCourses(courses) {\n        var core = [];\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\") {\n                core.push(courses[i]);\n            }\n        }\n        return core;\n    }\n\n    function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n        var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n        var coreY1S2 = coreSemesterArr[1];\n        var coreY2S1 = coreSemesterArr[2];\n        var coreY2S2 = coreSemesterArr[3];\n        var coreY3S1 = coreSemesterArr[4];\n        var coreY3S2 = coreSemesterArr[5];\n        var recCourses = courses;\n        //console.log(recCourses);\n        var key;\n\n        if (year === 1 && currentSem === 1) { //If student is in Year 1 Semester 1\n            for (key in coreY1S1) { // Iterate core courses offered in year 1 semester 1\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") { // If course has not been done before or student failed it in the past\n                    if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n                        recCourses.push(coreY1S1[key].courseCode) // Add course to recommended course array\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) { // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in coreY3S1) {\n                if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S1[key].courseCode))\n                        recCourses.push(coreY3S1[key].courseCode)\n                }\n            }\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) {\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in coreY3S2) {\n                if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S2[key].courseCode))\n                        recCourses.push(coreY3S2[key].courseCode)\n                }\n            }\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        return recCourses;\n    }\n\n    // Function to remove courses from recommended courses list if the student does not satisfy the prerequisites\n    function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n        var index;\n\n        // Iterate through programme courses\n        for (var i=0; i<courses.length; i++) {\n            if(recCourses.includes(courses[i].courseCode)) { // If course is being recommended\n                var prereq = courses[i].prerequisites; // Store course prerequisites\n                if (prereq.length === 8) { // If course only has 1 prerequisite\n                    if (!(studentCourses[prereq] === \"P\")) { // If the student didn't pass the course\n                        index = recCourses.indexOf(courses[i].courseCode); // Find index of course in recCourses array\n                            if (index > -1) { // If index was found\n                                recCourses.splice(index, 1); // Remove course from recCourses array\n                            }\n                    }\n                }\n                if (prereq.length > 8) { // If course has 2 prerequisites or an alternative prerequisite\n                    var prereq1 = prereq.slice(0, 8); // Get 1st prereq\n                    var prereq2 = prereq.slice(-8); // Get 2nd prereq\n                    if (prereq.charAt(9) === \"|\") { // If the prereqs have OR condition\n                        if (!((studentCourses[prereq1] === \"P\") || (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                    if (prereq.charAt(9) === \"&\") { // If the prereqs have AND condition\n                        if (!((studentCourses[prereq1] === \"P\") && (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Function to indicate is a student passed, failed, didn't do a course or is in progress\n    function determineStudentCourses(core) {\n        var coreRes = {};\n        var inProgCourseNCreds = [];\n        for (var i=0; i<core.length; i++){\n            for (var j=0; j<studentCourses.length; j++) {\n                if ((studentCourses[j].courseCode === core[i].courseCode) && (studentCourses[j].grade === \"IP\")){\n                    coreRes[`${core[i].courseCode}`] = \"IP\";\n                    inProgressCourseArr.push(studentCourses[j].courseCode);\n                    const obj = {\n                                courseCode: studentCourses[j].courseCode,\n                                credits: core[i].credits\n                            };\n                    inProgCourseNCreds.push(obj);\n\n                    //setInprogressCourses(current => [current.., studentCourses[j].courseCode]);\n                    \n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && !(noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"P\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && (noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"F\";\n                }\n                else {\n                    if (!coreRes[`${core[i].courseCode}`]) {\n                        coreRes[`${core[i].courseCode}`] = \"N\";\n                    }\n                }\n            }\n        }\n        props.setInProgressCourses(inProgressCourseArr);\n        props.setCourseInProgNCredits(inProgCourseNCreds);\n        return coreRes;\n    }\n\n    // Function to determine the recommended courses\n    async function determineCourses(programmeId){\n        \n        let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n        let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n        let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n        let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n        let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n        let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n        var programmeCourses = {}; // Dictionary to store all programme courses\n        var semesterArr = []; // Array to store courses by semester\n        var coreSemesterArr = []; // Array to store core courses by semester\n        var today = new Date(); // Today's date\n        var currentSem; // Value to store current semester\n\n        var courses = getProgrammeCourses(programmeId);\n\n        \n        for (var i=0; i<courses.length; i++) { // Initialise Courses for Degree using their Level and Semester\n            if (courses[i].level === \"I\") {\n                if (courses[i].semester === \"1\") {\n                    Y1S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y1S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"II\") {\n                if (courses[i].semester === \"1\") {\n                    Y2S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y2S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"III\") {\n                if (courses[i].semester === \"1\") {\n                    Y3S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y3S2[courses[i].courseCode] = \"N\";\n                }\n            }\n        }\n\n        programmeCourses = determineStudentCourses(courses); // Determine what courses a student failed, passed, didnt do or is in progress\n        //console.log(\"progcourses \"+JSON.stringify(programmeCourses));\n        //console.log(courses);\n        semesterArr = splitBySem(programmeCourses, courses); // Split courses by semester\n        var coreCourses = getCoreCourses(courses); // Get core courses\n        //console.log(coreCourses);\n        coreSemesterArr = splitBySem(programmeCourses, coreCourses); // Split core courses by semester\n\n        var recCourses = [];\n        var counter = 0;\n        var year = 1;\n        var sem = 1;\n        var key;\n\n\n        Y1S1 = semesterArr[0];\n        //console.log(programmeCourses);\n        Y1S2 = semesterArr[1];\n        Y2S1 = semesterArr[2];\n        Y2S2 = semesterArr[3];\n        Y3S1 = semesterArr[4];\n        Y3S2 = semesterArr[5];\n\n        counter = 0;\n        // If a student passed, failed or the course is in progress, assume that the student is in the next semester\n        for (key in Y1S1) {\n            if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n                counter+=1;\n            }\n        }\n        if (counter > 1) {\n            sem = 2;\n        }\n        counter = 0;\n        if (year === 1 && sem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 3;\n            }\n        }\n        counter = 0;\n        if (year === 3 && sem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n\n        if (today.getMonth() < 4) { // If the date is currently between January and April\n            currentSem = 2;\n        }\n        // else if (today.getMonth() < 6) { // If the date is currently between May and July\n        //     currentSem = 1;\n        // }\n        else { // If the date is currently between August and December\n            currentSem = 1;\n        }\n\n        // Recommended courses based on current year and semester if the student has not done the course yet\n        if (year === 1 && currentSem === 1) {\n            for (key in Y1S1) {\n                if (Y1S1[key].grade === \"N\") {\n                    recCourses.push(Y1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"N\") {\n                    recCourses.push(Y1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"N\") {\n                    recCourses.push(Y2S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"N\") {\n                    recCourses.push(Y2S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"N\") {\n                    recCourses.push(Y3S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in Y3S2) {\n                if (Y3S2[key].grade === \"N\") {\n                    recCourses.push(Y3S2[key].courseCode)\n                }\n            }\n        }\n        \n        recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n        removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n        props.setRecommended(recCourses);\n        props.setLevel(year);\n        //console.log(props.recCourses);\n        if (props.recCourses !== null) {\n            props.setLoad(false);\n        }\n        setProcessed(true);\n    }\n\n \n\n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                <div className=\"row\">\n                        <div className=\"col-sm-10\">\n                    <p className=\"header blue-txt\">Student Details</p>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            { uploaded ? (\n                                <DetailsCard details={details} uploadedHandler={uploadedHandler} setProg={props.setProg}></DetailsCard> ) : (\n                                <NoTranscript uploadedHandler={uploadedHandler} setProg={props.setProg}></NoTranscript>\n                            ) }\n                        </div>\n                    </div>\n                    <p className=\"header blue-txt\">Courses Completed</p>\n                     { uploaded ? (\n                        <StudentCoursesCard courses={studentCourses}></StudentCoursesCard> ) : (\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <table class=\"table table-borderless table-striped\">\n                                    <thead>\n                                        <tr class=\"d-flex blue-txt\">\n                                            <th class=\"col-1 level-cell\">Level</th>\n                                            <th class=\"col-2 code-cell\">Course Code</th>\n                                            <th class=\"col-8 title-cell\">Course Title</th>\n                                            <th class=\"col-1 credit-cell\">Grade</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        )\n                     } \n                     </div>\n                     </div>                 \n                </div>\n        </div>\n    );\n\n}\n\nexport default StudentProfile;\n"]},"metadata":{},"sourceType":"module"}