{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _useEnterKeyHint = _interopRequireDefault(require(\"../hooks/internal/useEnterKeyHint\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // Differences between <input type=\"text\"> and <AccessibleInputText>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onChange\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget is disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should jump to the next non-disabled widget\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves, using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all the code that checks disabled through the \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\n\nvar AccessibleInputText = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {\n  var disabled = _ref.disabled,\n      enterKeyHint = _ref.enterKeyHint,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onKeyDownCapture = _ref.onKeyDownCapture,\n      onKeyPress = _ref.onKeyPress,\n      onSelect = _ref.onSelect,\n      tabIndex = _ref.tabIndex,\n      props = _objectWithoutProperties(_ref, [\"disabled\", \"enterKeyHint\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onKeyDownCapture\", \"onKeyPress\", \"onSelect\", \"tabIndex\"]);\n\n  var targetRef = (0, _react.useRef)();\n  var ref = forwardedRef || targetRef;\n  (0, _useEnterKeyHint.default)(ref, enterKeyHint);\n  return /*#__PURE__*/_react.default.createElement(\"input\", _extends({\n    \"aria-disabled\": disabled || undefined,\n    onChange: disabled ? undefined : onChange,\n    onFocus: disabled ? undefined : onFocus,\n    onKeyDown: disabled ? undefined : onKeyDown,\n    onKeyDownCapture: disabled ? undefined : onKeyDownCapture,\n    onKeyPress: disabled ? undefined : onKeyPress,\n    onSelect: disabled ? undefined : onSelect,\n    readOnly: disabled,\n    ref: ref,\n    tabIndex: disabled ? -1 : tabIndex\n  }, props, {\n    type: \"text\"\n  }));\n});\nAccessibleInputText.defaultProps = {\n  disabled: undefined,\n  enterKeyHint: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  onKeyDown: undefined,\n  onKeyDownCapture: undefined,\n  onKeyPress: undefined,\n  onSelect: undefined,\n  tabIndex: undefined\n};\nAccessibleInputText.displayName = 'AccessibleInputText';\nAccessibleInputText.propTypes = {\n  disabled: _propTypes.default.bool,\n  enterKeyHint: _propTypes.default.string,\n  onChange: _propTypes.default.func,\n  onFocus: _propTypes.default.func,\n  onKeyDown: _propTypes.default.func,\n  onKeyDownCapture: _propTypes.default.func,\n  onKeyPress: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  tabIndex: _propTypes.default.number,\n  type: _propTypes.default.oneOf(['text']).isRequired\n};\nvar _default = AccessibleInputText;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Utils/AccessibleInputText.js"],"names":["AccessibleInputText","disabled","enterKeyHint","onChange","onFocus","onKeyDown","onKeyDownCapture","onKeyPress","onSelect","tabIndex","props","targetRef","ref","forwardedRef","undefined","PropTypes","type","isRequired"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [-1] }] */\n\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useRef } from 'react';\n\nimport useEnterKeyHint from '../hooks/internal/useEnterKeyHint';\n\n// Differences between <input type=\"text\"> and <AccessibleInputText>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onChange\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget is disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should jump to the next non-disabled widget\n\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves, using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all the code that checks disabled through the \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\nconst AccessibleInputText = forwardRef(\n  (\n    {\n      disabled,\n      enterKeyHint,\n      onChange,\n      onFocus,\n      onKeyDown,\n      onKeyDownCapture,\n      onKeyPress,\n      onSelect,\n      tabIndex,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const targetRef = useRef();\n\n    const ref = forwardedRef || targetRef;\n\n    useEnterKeyHint(ref, enterKeyHint);\n\n    return (\n      <input\n        aria-disabled={disabled || undefined}\n        onChange={disabled ? undefined : onChange}\n        onFocus={disabled ? undefined : onFocus}\n        onKeyDown={disabled ? undefined : onKeyDown}\n        onKeyDownCapture={disabled ? undefined : onKeyDownCapture}\n        onKeyPress={disabled ? undefined : onKeyPress}\n        onSelect={disabled ? undefined : onSelect}\n        readOnly={disabled}\n        ref={ref}\n        tabIndex={disabled ? -1 : tabIndex}\n        {...props}\n        type=\"text\"\n      />\n    );\n  }\n);\n\nAccessibleInputText.defaultProps = {\n  disabled: undefined,\n  enterKeyHint: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  onKeyDown: undefined,\n  onKeyDownCapture: undefined,\n  onKeyPress: undefined,\n  onSelect: undefined,\n  tabIndex: undefined\n};\n\nAccessibleInputText.displayName = 'AccessibleInputText';\n\nAccessibleInputText.propTypes = {\n  disabled: PropTypes.bool,\n  enterKeyHint: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyDownCapture: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onSelect: PropTypes.func,\n  tabIndex: PropTypes.number,\n  type: PropTypes.oneOf(['text']).isRequired\n};\n\nexport default AccessibleInputText;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}