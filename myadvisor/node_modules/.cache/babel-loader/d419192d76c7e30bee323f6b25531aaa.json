{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/DeleteProgramme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n/*\n    DeleteProgramme allows a staff member to delete programmes from the system.\n*/\n\nfunction DeleteProgramme({\n  setLoading,\n  setShowDeleteProg,\n  programmes,\n  refreshTable\n}) {\n  _s();\n\n  //const ref = useRef();\n\n  /*\n      The validated state is used to keep track of the validity of the delete programme form.\n      It's initial state is false.\n  */\n  const [validated, setValidated] = useState(false);\n  /*\n      The checkBoxState array is used to keep track of the checked state of the checkboxes.\n      It's initial state is false.\n  */\n\n  const [checkBoxState, setCheckBoxState] = useState(new Array(programmes.length).fill(false));\n  /*\n      notifyAdded is used to display toast notifications for events. It displays a green toast.\n  */\n\n  const notifyDeleted = text => toast.success(text);\n  /*\n      notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n  */\n\n\n  const notifyNotDeleted = text => toast.error(text);\n  /*\n      HandleChange gets the checkboxes that were checked and stores them in an array.\n  */\n\n\n  const handleChange = (event, index) => {\n    //console.log(event.target.checked);\n    const updateCheckboxState = checkBoxState.map((checkbox, count) => {\n      if (count === index) {\n        return !checkbox;\n      } else {\n        return checkbox;\n      }\n    }); //console.log(updateCheckboxState);\n\n    setCheckBoxState(updateCheckboxState);\n  };\n  /*\n      HandleSubmit gets the data from the form as passes it to the deleteProgramme function.\n  */\n\n\n  const handleSubmit = event => {\n    const selectedProgrammes = []; //console.log(checkBoxState);\n    //console.log(form.checkValidity());\n\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    setValidated(true); //Get the selected programmes and store them in an array\n\n    for (var i = 0; i < checkBoxState.length; i++) {\n      if (checkBoxState[i] === true) {\n        const programmeObject = {\n          id: programmes[i].id,\n          name: programmes[i].name\n        };\n        selectedProgrammes.push(programmeObject);\n        deleteProgramme(programmeObject);\n      }\n    }\n\n    console.log(programmes);\n    console.log(selectedProgrammes);\n    const formData = {//name : form.elements.name.value\n    }; //console.log(event)\n    //console.log(event.target.checked)\n    //deleteProgramme(formData)\n  };\n  /*\n      deleteProgramme creates a post request to the server, which deletes a programme from the system.\n  */\n\n\n  async function deleteProgramme(data) {\n    try {\n      const res = await fetch(\"/programmes/delete/\" + data.name, {\n        method: \"DELETE\",\n        headers: {\n          token: localStorage.getItem(\"token\") //\"Content-type\": \"application/json\",\n\n        } //body: JSON.stringify(data),\n\n      });\n      setShowDeleteProg(false);\n      setLoading(false);\n      refreshTable();\n      const status = await res.statusText;\n\n      if (res.status == 401) {\n        notifyNotDeleted(data.name + \" not deleted!\");\n      } else {\n        if (res.status === 200) {\n          notifyDeleted(\"Course Added to Programme!\");\n        }\n      }\n\n      if (status == \"Unauthorized\") {\n        notifyNotDeleted(data.name + \" not deleted!\");\n      } else {\n        notifyDeleted(data.name + \" Deleted!\");\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      validated: validated,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Choose Programme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this), programmes.map((programme, indexNum) => /*#__PURE__*/_jsxDEV(Form.Check, {\n          label: programme.name,\n          name: programme.name //checked={checkBoxState[indexNum]}\n          ,\n          onChange: event => handleChange(event, indexNum),\n          style: {\n            margin: 5,\n            marginTop: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"float-right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-custom\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      pauseOnHover: true,\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DeleteProgramme, \"ILlntlOsKrEPi39iPQqmKSuNUQs=\");\n\n_c = DeleteProgramme;\nexport default DeleteProgramme;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteProgramme\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/DeleteProgramme.js"],"names":["React","useState","useRef","Button","Form","Col","ToastContainer","toast","DeleteProgramme","setLoading","setShowDeleteProg","programmes","refreshTable","validated","setValidated","checkBoxState","setCheckBoxState","Array","length","fill","notifyDeleted","text","success","notifyNotDeleted","error","handleChange","event","index","updateCheckboxState","map","checkbox","count","handleSubmit","selectedProgrammes","form","currentTarget","checkValidity","preventDefault","stopPropagation","i","programmeObject","id","name","push","deleteProgramme","console","log","formData","data","res","fetch","method","headers","token","localStorage","getItem","status","statusText","err","message","programme","indexNum","margin","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    DeleteProgramme allows a staff member to delete programmes from the system.\n*/\n\nfunction DeleteProgramme({setLoading, setShowDeleteProg, programmes, refreshTable}) {\n    //const ref = useRef();\n            \n    /*\n        The validated state is used to keep track of the validity of the delete programme form.\n        It's initial state is false.\n    */    \n    const [validated, setValidated] = useState(false);\n\n    /*\n        The checkBoxState array is used to keep track of the checked state of the checkboxes.\n        It's initial state is false.\n    */    \n    const [checkBoxState, setCheckBoxState] = useState(new Array(programmes.length).fill(false));\n\n    /*\n        notifyAdded is used to display toast notifications for events. It displays a green toast.\n    */    \n    const notifyDeleted = (text) => toast.success(text);\n\n    /*\n        notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n    */    \n        const notifyNotDeleted = (text) => toast.error(text);\n\n    /*\n        HandleChange gets the checkboxes that were checked and stores them in an array.\n    */    \n        const handleChange = (event, index) => {\n            //console.log(event.target.checked);\n\n            const updateCheckboxState = checkBoxState.map((checkbox, count) => {\n                if(count === index){\n                    return !checkbox;\n                }\n                else{\n                    return checkbox;\n                }\n            });\n            //console.log(updateCheckboxState);\n            setCheckBoxState(updateCheckboxState);\n           \n        };\n\n    /*\n        HandleSubmit gets the data from the form as passes it to the deleteProgramme function.\n    */    \n        const handleSubmit = (event) => {\n            const selectedProgrammes = [];\n            \n            \n            //console.log(checkBoxState);\n            //console.log(form.checkValidity());\n            const form = event.currentTarget;\n    \n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n    \n            event.preventDefault();\n            event.stopPropagation();\n            setValidated(true);\n\n            //Get the selected programmes and store them in an array\n            for(var i=0; i<checkBoxState.length; i++){\n                if(checkBoxState[i] === true){\n                    const programmeObject = {\n                        id: programmes[i].id,\n                        name: programmes[i].name\n                    };\n                    selectedProgrammes.push(programmeObject);\n                    deleteProgramme(programmeObject);\n                }\n            }\n\n            console.log(programmes);\n            console.log(selectedProgrammes);\n\n\n    \n            const formData = {\n                //name : form.elements.name.value\n            }\n            //console.log(event)\n            //console.log(event.target.checked)\n            \n    \n            //deleteProgramme(formData)\n        };\n    \n        /*\n            deleteProgramme creates a post request to the server, which deletes a programme from the system.\n        */\n        async function deleteProgramme(data) {\n            try {\n              const res = await fetch(\"/programmes/delete/\" + data.name, {\n                method: \"DELETE\",\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    //\"Content-type\": \"application/json\",\n                },\n                //body: JSON.stringify(data),\n              });\n        \n              setShowDeleteProg(false);\n              setLoading(false);\n              refreshTable();\n\n              const status = await res.statusText;\n\n              if(res.status==401){\n                notifyNotDeleted(data.name + \" not deleted!\");\n              }\n              else{\n                if(res.status===200){\n                    notifyDeleted(\"Course Added to Programme!\");\n              }\n                }\n              if(status==\"Unauthorized\"){\n                notifyNotDeleted(data.name + \" not deleted!\");\n              }\n              else{\n                notifyDeleted(data.name + \" Deleted!\");\n              }\n              \n            } catch (err) {\n              console.error(err.message);\n            }\n        }\n    \n        return (\n            <>\n                <Form validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"name\">\n                        <Form.Label>Choose Programme</Form.Label>\n                        {programmes.map((programme, indexNum) => (\n                            \n                            \n        \n                            <Form.Check \n                                label={programme.name}\n                                name={programme.name}\n                                //checked={checkBoxState[indexNum]}\n                                onChange={event => handleChange(event, indexNum)}\n                                style={{margin:5, marginTop:10}}\n                                \n                                \n                            />\n                            \n                        ))}\n                        \n                    </Form.Group>\n    \n                    <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Delete</Button></div>\n                </Form>\n    \n                <ToastContainer \n                    pauseOnHover\n                    position=\"bottom-right\"\n                />\n            </>\n        );\n}\n\nexport default DeleteProgramme;"]},"metadata":{},"sourceType":"module"}