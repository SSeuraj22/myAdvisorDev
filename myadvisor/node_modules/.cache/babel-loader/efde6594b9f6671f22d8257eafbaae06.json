{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n/*\n    SetAdvisingWindow is a component that is used to set the current advising window on the system.\n*/\n\nfunction SetAdvisingWindow() {\n  _s();\n\n  /*\n      notifyEdit and notifyError  is used to display a toast notifications for events.\n      notifyEdit displays a green toast and notifyError displays a red toast.\n  */\n  const notifyEdit = text => toast.success(text);\n\n  const notifyError = text => toast.error(text);\n  /*\n      The validated state is used to keep track of the validity of the set advising window  form.\n      It's initial state is false.\n  */\n\n\n  const [validated, setValidated] = useState(false);\n  /*\n      The advisingStare and advisingEnd states store when the current advising window starts and end.\n  */\n\n  const [advisingStart, setadvisingStart] = useState(new Date());\n  const [advisingEnd, setadvisingEnd] = useState(new Date());\n  /*\n      HandleSubmit gets the data from the form, checks to see if it is valid, and passes it to the setWindow function.\n  */\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    const formData = {\n      advisingStart: form.elements.advisingStart.value,\n      advisingEnd: form.elements.advisingEnd.value,\n      semester: form.elements.semester.value\n    };\n\n    if (advisingStart > advisingEnd) {\n      notifyError(\"Error, Start Date After End Date\");\n    } else {\n      setValidated(true);\n      setWindow(formData);\n    }\n  };\n  /*\n      setWindow creates a post request to the server, which sets the advising window.\n  */\n\n\n  async function setWindow(data) {\n    try {\n      const res = await fetch(\"/admin/academic-advising/window\", {\n        method: \"POST\",\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      const status = await res.statusText;\n      notifyEdit(\"Advising Window Updated!\");\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      validated: validated,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"advisingStart\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Start Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          required: true,\n          selected: advisingStart,\n          dateFormat: \"yyyy-MM-dd\",\n          onChange: date => setadvisingStart(date),\n          customInput: /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"text\",\n            name: \"advisingStart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 147\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"advisingEnd\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"End Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          required: true,\n          selected: advisingEnd,\n          dateFormat: \"yyyy-MM-dd\",\n          onChange: date => setadvisingEnd(date),\n          customInput: /*#__PURE__*/_jsxDEV(Form.Control, {\n            required: true,\n            type: \"text\",\n            name: \"advisingEnd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 143\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"semester\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Semester\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          required: true,\n          as: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"float-right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-custom\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      pauseOnHover: true,\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SetAdvisingWindow, \"Sv6/xwFSMy+Hd03zTEq/S6TdCEQ=\");\n\n_c = SetAdvisingWindow;\nexport default SetAdvisingWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetAdvisingWindow\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js"],"names":["React","useState","Button","Form","DatePicker","ToastContainer","toast","SetAdvisingWindow","notifyEdit","text","success","notifyError","error","validated","setValidated","advisingStart","setadvisingStart","Date","advisingEnd","setadvisingEnd","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","formData","elements","value","semester","setWindow","data","res","fetch","method","headers","token","localStorage","getItem","body","JSON","stringify","status","statusText","err","console","message","date"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    SetAdvisingWindow is a component that is used to set the current advising window on the system.\n*/\nfunction SetAdvisingWindow() {\n    /*\n        notifyEdit and notifyError  is used to display a toast notifications for events.\n        notifyEdit displays a green toast and notifyError displays a red toast.\n    */    \n    const notifyEdit = (text) => toast.success(text);\n    const notifyError = (text) => toast.error(text);\n\n    /*\n        The validated state is used to keep track of the validity of the set advising window  form.\n        It's initial state is false.\n    */\n    const [validated, setValidated] = useState(false);\n\n    /*\n        The advisingStare and advisingEnd states store when the current advising window starts and end.\n    */   \n    const [advisingStart, setadvisingStart] = useState(new Date());\n    const [advisingEnd, setadvisingEnd] = useState(new Date());\n\n    /*\n        HandleSubmit gets the data from the form, checks to see if it is valid, and passes it to the setWindow function.\n    */    \n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        \n\n        const formData = {\n            advisingStart : form.elements.advisingStart.value,\n            advisingEnd : form.elements.advisingEnd.value,\n            semester : form.elements.semester.value\n        }\n\n        if(advisingStart > advisingEnd){\n            notifyError(\"Error, Start Date After End Date\");\n        } else {\n            setValidated(true);\n            setWindow(formData);\n        }\n    };\n\n    /*\n        setWindow creates a post request to the server, which sets the advising window.\n    */\n    async function setWindow(data) {\n        try {\n          const res = await fetch(\"/admin/academic-advising/window\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n          notifyEdit(\"Advising Window Updated!\");\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"advisingStart\">\n                    <Form.Label >Start Date</Form.Label>\n                    <DatePicker required selected={advisingStart} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingStart(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingStart\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"advisingEnd\">\n                    <Form.Label>End Date</Form.Label>\n                    <DatePicker required selected={advisingEnd} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingEnd(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingEnd\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"semester\">\n                    <Form.Label>Semester</Form.Label>\n                    <Form.Control required as=\"select\">\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Save</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default SetAdvisingWindow;"]},"metadata":{},"sourceType":"module"}