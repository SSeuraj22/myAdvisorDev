{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ConversationConnectionConfig, ConversationManager, ConversationRecognizerFactory, ConversationTranslatorCommandTypes, ConversationTranslatorMessageTypes, InternalParticipants } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { ConversationParticipantsChangedEventArgs, ConversationTranslationEventArgs, Participant, ParticipantChangedReason, ProfanityOption, PropertyCollection, PropertyId } from \"../Exports\";\nexport class Conversation {\n  constructor() {}\n  /**\n   * Create a conversation\n   * @param speechConfig\n   * @param cb\n   * @param err\n   */\n\n\n  static createConversationAsync(speechConfig, arg2, arg3, arg4) {\n    Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n    Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\n\n    if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\n      Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\n    }\n\n    if (typeof arg2 === \"string\") {\n      const conversationImpl = new ConversationImpl(speechConfig, arg2);\n      marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n        return;\n      }))(), arg3, arg4);\n      return conversationImpl;\n    } else {\n      const conversationImpl = new ConversationImpl(speechConfig);\n      const cb = arg2;\n      const err = arg3;\n      conversationImpl.createConversationAsync(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n      return conversationImpl;\n    }\n  }\n\n} // tslint:disable-next-line:max-classes-per-file\n\nexport class ConversationImpl extends Conversation {\n  /**\n   * Create a conversation impl\n   * @param speechConfig\n   * @param {string} id - optional conversationId\n   */\n  constructor(speechConfig, id) {\n    super();\n    this.privIsDisposed = false;\n    this.privIsConnected = false;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privConversationId = \"\";\n    /** websocket callbacks */\n\n    this.onConnected = e => {\n      this.privIsConnected = true;\n\n      try {\n        if (!!this.privConversationTranslator.sessionStarted) {\n          this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onDisconnected = e => __awaiter(this, void 0, void 0, function* () {\n      yield this.close(false);\n\n      try {\n        if (!!this.privConversationTranslator.sessionStopped) {\n          this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\n        }\n      } catch (e) {//\n      }\n    });\n\n    this.onCanceled = (r, e) => __awaiter(this, void 0, void 0, function* () {\n      yield this.close(false); // ?\n\n      try {\n        if (!!this.privConversationTranslator.canceled) {\n          this.privConversationTranslator.canceled(this.privConversationTranslator, e);\n        }\n      } catch (e) {//\n      }\n    });\n\n    this.onParticipantUpdateCommandReceived = (r, e) => {\n      var _a, _b;\n\n      try {\n        const updatedParticipant = this.privParticipants.getParticipant(e.id);\n\n        if (updatedParticipant !== undefined) {\n          switch (e.key) {\n            case ConversationTranslatorCommandTypes.changeNickname:\n              updatedParticipant.displayName = e.value;\n              break;\n\n            case ConversationTranslatorCommandTypes.setUseTTS:\n              updatedParticipant.useTts = e.value;\n              break;\n\n            case ConversationTranslatorCommandTypes.setProfanityFiltering:\n              updatedParticipant.profanity = e.value;\n              break;\n\n            case ConversationTranslatorCommandTypes.setMute:\n              updatedParticipant.isMuted = e.value;\n              break;\n\n            case ConversationTranslatorCommandTypes.setTranslateToLanguages:\n              updatedParticipant.translateToLanguages = e.value;\n              break;\n          }\n\n          this.privParticipants.addOrUpdateParticipant(updatedParticipant);\n\n          if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n            (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated, [this.toParticipant(updatedParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onLockRoomCommandReceived = (r, e) => {// TODO\n    };\n\n    this.onMuteAllCommandReceived = (r, e) => {\n      var _a, _b;\n\n      try {\n        this.privParticipants.participants.forEach(p => p.isMuted = p.isHost ? false : e.isMuted);\n\n        if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n          (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated, this.toParticipants(false), e.sessionId));\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onParticipantJoinCommandReceived = (r, e) => {\n      var _a, _b;\n\n      try {\n        const newParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\n\n        if (newParticipant !== undefined) {\n          if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n            (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, [this.toParticipant(newParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onParticipantLeaveCommandReceived = (r, e) => {\n      var _a, _b;\n\n      try {\n        const ejectedParticipant = this.privParticipants.getParticipant(e.participant.id);\n\n        if (ejectedParticipant !== undefined) {\n          // remove the participant from the internal participants list\n          this.privParticipants.deleteParticipant(e.participant.id);\n\n          if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n            // notify subscribers that the participant has left the conversation\n            (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation, [this.toParticipant(ejectedParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onTranslationReceived = (r, e) => {\n      var _a, _b, _c, _d, _e, _f;\n\n      try {\n        switch (e.command) {\n          case ConversationTranslatorMessageTypes.final:\n            if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.transcribed)) {\n              (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.transcribed(this.privConversationTranslator, new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n\n            break;\n\n          case ConversationTranslatorMessageTypes.partial:\n            if (!!((_c = this.privConversationTranslator) === null || _c === void 0 ? void 0 : _c.transcribing)) {\n              (_d = this.privConversationTranslator) === null || _d === void 0 ? void 0 : _d.transcribing(this.privConversationTranslator, new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n\n            break;\n\n          case ConversationTranslatorMessageTypes.instantMessage:\n            if (!!((_e = this.privConversationTranslator) === null || _e === void 0 ? void 0 : _e.textMessageReceived)) {\n              (_f = this.privConversationTranslator) === null || _f === void 0 ? void 0 : _f.textMessageReceived(this.privConversationTranslator, new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n\n            break;\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onParticipantsListReceived = (r, e) => {\n      var _a, _b, _c;\n\n      try {\n        // check if the session token needs to be updated\n        if (e.sessionToken !== undefined && e.sessionToken !== null) {\n          this.privRoom.token = e.sessionToken;\n        } // save the participants\n\n\n        this.privParticipants.participants = [...e.participants]; // enable the conversation\n\n        if (this.privParticipants.me !== undefined) {\n          this.privIsReady = true;\n        }\n\n        if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n          (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(this.privConversationTranslator, new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\n        } // if this is the host, update the nickname if needed\n\n\n        if (this.me.isHost) {\n          const nickname = (_c = this.privConversationTranslator) === null || _c === void 0 ? void 0 : _c.properties.getProperty(PropertyId.ConversationTranslator_Name);\n\n          if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\n            // issue a change nickname request\n            this.changeNicknameAsync(nickname);\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.onConversationExpiration = (r, e) => {\n      var _a, _b;\n\n      try {\n        if (!!((_a = this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.conversationExpiration)) {\n          (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.conversationExpiration(this.privConversationTranslator, e);\n        }\n      } catch (e) {//\n      }\n    };\n\n    this.privProperties = new PropertyCollection();\n    this.privManager = new ConversationManager(); // check the speech language\n\n    const language = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n    if (!language) {\n      speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\n    }\n\n    this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n    if (!id) {\n      // check the target language(s)\n      if (speechConfig.targetLanguages.length === 0) {\n        speechConfig.addTargetLanguage(this.privLanguage);\n      } // check the profanity setting: speech and conversationTranslator should be in sync\n\n\n      const profanity = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\n\n      if (!profanity) {\n        speechConfig.setProfanity(ProfanityOption.Masked);\n      } // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\n      // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\n      // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\n\n\n      let hostNickname = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\n\n      if (hostNickname === undefined || hostNickname === null || hostNickname.length <= 1 || hostNickname.length > 50) {\n        hostNickname = \"Host\";\n      }\n\n      speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\n    } else {\n      this.privConversationId = id;\n    } // save the speech config for future usage\n\n\n    this.privConfig = speechConfig; // save the config properties\n\n    const configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    this.privProperties = configImpl.properties.clone();\n    this.privIsConnected = false;\n    this.privParticipants = new InternalParticipants();\n    this.privIsReady = false;\n    this.privTextMessageMaxLength = 1000;\n  }\n\n  set conversationTranslator(value) {\n    this.privConversationTranslator = value;\n  } // get the internal data about a conversation\n\n\n  get room() {\n    return this.privRoom;\n  } // get the wrapper for connecting to the websockets\n\n\n  get connection() {\n    return this.privConversationRecognizer; // this.privConnection;\n  } // get / set the speech auth token\n\n\n  get authorizationToken() {\n    return this.privToken;\n  }\n\n  set authorizationToken(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\n    this.privToken = value;\n  } // get the config\n\n\n  get config() {\n    return this.privConfig;\n  } // get the conversation Id\n\n\n  get conversationId() {\n    return this.privRoom ? this.privRoom.roomId : this.privConversationId;\n  } // get the properties\n\n\n  get properties() {\n    return this.privProperties;\n  } // get the speech language\n\n\n  get speechRecognitionLanguage() {\n    return this.privLanguage;\n  }\n\n  get isMutedByHost() {\n    var _a, _b;\n\n    return ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost) ? false : (_b = this.privParticipants.me) === null || _b === void 0 ? void 0 : _b.isMuted;\n  }\n\n  get isConnected() {\n    return this.privIsConnected && this.privIsReady;\n  }\n\n  get participants() {\n    return this.toParticipants(true);\n  }\n\n  get me() {\n    return this.toParticipant(this.privParticipants.me);\n  }\n\n  get host() {\n    return this.toParticipant(this.privParticipants.host);\n  }\n  /**\n   * Create a new conversation as Host\n   * @param cb\n   * @param err\n   */\n\n\n  createConversationAsync(cb, err) {\n    try {\n      if (!!this.privConversationRecognizer) {\n        this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n      }\n\n      this.privManager.createOrJoin(this.privProperties, undefined, room => {\n        if (!room) {\n          this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\n        }\n\n        this.privRoom = room;\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Starts a new conversation as host.\n   * @param cb\n   * @param err\n   */\n\n\n  startConversationAsync(cb, err) {\n    try {\n      // check if there is already a recognizer\n      if (!!this.privConversationRecognizer) {\n        this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n      } // check if there is conversation data available\n\n\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect); // connect to the conversation websocket\n\n      this.privParticipants.meId = this.privRoom.participantId;\n      this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this.privConfig); // Because ConversationTranslator manually sets up and manages the connection, Conversation\n      // has to forward serviceRecognizer connection events that usually get passed automatically\n\n      this.privConversationRecognizer.connected = this.onConnected;\n      this.privConversationRecognizer.disconnected = this.onDisconnected;\n      this.privConversationRecognizer.canceled = this.onCanceled;\n      this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\n      this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\n      this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\n      this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\n      this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\n      this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\n      this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\n      this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\n      this.privConversationRecognizer.connect(this.privRoom.token, () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Join a conversation as a participant.\n   * @param { IParticipant } participant - participant to add\n   * @param cb\n   * @param err\n   */\n\n\n  addParticipantAsync(participant, cb, err) {\n    Contracts.throwIfNullOrUndefined(participant, \"Participant\");\n    marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\n  }\n  /**\n   * Join a conversation as a participant.\n   * @param conversation\n   * @param nickname\n   * @param lang\n   * @param cb\n   * @param err\n   */\n\n\n  joinConversationAsync(conversationId, nickname, lang, cb, err) {\n    try {\n      // TODO\n      // if (!!this.privConversationRecognizer) {\n      //     throw new Error(this.privErrors.permissionDeniedStart);\n      // }\n      Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\n      Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n      Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\")); // join the conversation\n\n      this.privManager.createOrJoin(this.privProperties, conversationId, room => {\n        Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\n        this.privRoom = room;\n        this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken; // join callback\n\n        if (!!cb) {\n          cb(room.cognitiveSpeechAuthToken);\n        }\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Deletes a conversation\n   * @param cb\n   * @param err\n   */\n\n\n  deleteConversationAsync(cb, err) {\n    marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\n  }\n\n  deleteConversationImplAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\n      Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\n      yield this.privManager.leave(this.privProperties, this.privRoom.token);\n      this.dispose();\n    });\n  }\n  /**\n   * Issues a request to close the client websockets\n   * @param cb\n   * @param err\n   */\n\n\n  endConversationAsync(cb, err) {\n    marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\n  }\n\n  endConversationImplAsync() {\n    return this.close(true);\n  }\n  /**\n   * Issues a request to lock the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  lockConversationAsync(cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getLockCommand(true), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to mute the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  muteAllParticipantsAsync(cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend); // check the user's permissions\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteAllCommand(true), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to mute a participant in the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n\n\n  muteParticipantAsync(userId, cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend); // check the connection is open (host + participant can perform the mute command)\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      } // if not host, check the participant is not muting another participant\n\n\n      if (!this.me.isHost && this.me.id !== userId) {\n        this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n      } // check the user exists\n\n\n      const exists = this.privParticipants.getParticipantIndex(userId);\n\n      if (exists === -1) {\n        this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteCommand(userId, true), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to remove a participant from the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n\n\n  removeParticipantAsync(userId, cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n\n      if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\n        // Assume this is a transcription participant\n        marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId), cb, err);\n      } else {\n        Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n        Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n        if (!this.canSendAsHost) {\n          this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\n        }\n\n        let participantId = \"\";\n\n        if (typeof userId === \"string\") {\n          participantId = userId;\n        } else if (userId.hasOwnProperty(\"id\")) {\n          const participant = userId;\n          participantId = participant.id;\n        } else if (userId.hasOwnProperty(\"userId\")) {\n          const user = userId;\n          participantId = user.userId;\n        }\n\n        Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\")); // check the participant exists\n\n        const index = this.participants.findIndex(p => p.id === participantId);\n\n        if (index === -1) {\n          this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n        }\n\n        (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getEjectCommand(participantId), () => {\n          this.handleCallback(cb, err);\n        }, error => {\n          this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to unlock the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  unlockConversationAsync(cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getLockCommand(false), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to unmute all participants in the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  unmuteAllParticipantsAsync(cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteAllCommand(false), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Issues a request to unmute a participant in the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n\n\n  unmuteParticipantAsync(userId, cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend); // check the connection is open (host + participant can perform the mute command)\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      } // if not host, check the participant is not muting another participant\n\n\n      if (!this.me.isHost && this.me.id !== userId) {\n        this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n      } // check the user exists\n\n\n      const exists = this.privParticipants.getParticipantIndex(userId);\n\n      if (exists === -1) {\n        this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteCommand(userId, false), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  sendTextMessageAsync(message, cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      } // TODO: is a max length check required?\n\n\n      if (message.length > this.privTextMessageMaxLength) {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMessageCommand(message), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Change nickname\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  changeNicknameAsync(nickname, cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n      Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getChangeNicknameCommand(nickname), () => {\n        this.handleCallback(cb, err);\n      }, error => {\n        this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  dispose(reason) {\n    var _a;\n\n    if (this.isDisposed) {\n      return;\n    }\n\n    this.privIsDisposed = true;\n    (_a = this.config) === null || _a === void 0 ? void 0 : _a.close();\n    this.privConfig = undefined;\n    this.privLanguage = undefined;\n    this.privProperties = undefined;\n    this.privRoom = undefined;\n    this.privToken = undefined;\n    this.privManager = undefined;\n    this.privConversationRecognizer = undefined;\n    this.privIsConnected = false;\n    this.privIsReady = false;\n    this.privParticipants = undefined;\n  }\n\n  get transcriberRecognizer() {\n    return this.privTranscriberRecognizer;\n  }\n\n  connectTranscriberRecognizer(recognizer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privTranscriberRecognizer) {\n        yield this.privTranscriberRecognizer.close();\n      }\n\n      this.privTranscriberRecognizer = recognizer;\n      this.privTranscriberRecognizer.conversation = this;\n    });\n  }\n\n  get conversationInfo() {\n    const convId = this.conversationId;\n    const p = this.participants.map(part => {\n      return {\n        id: part.id,\n        preferredLanguage: part.preferredLanguage,\n        voice: part.voice\n      };\n    });\n    const props = {};\n\n    for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\n      const val = this.properties.getProperty(key, \"\");\n\n      if (val !== \"\") {\n        props[key] = val;\n      }\n    }\n\n    const info = {\n      id: convId,\n      participants: p,\n      conversationProperties: props\n    };\n    return info;\n  }\n\n  addParticipantImplAsync(participant) {\n    const newParticipant = this.privParticipants.addOrUpdateParticipant(participant);\n\n    if (newParticipant !== undefined) {\n      if (!!this.privTranscriberRecognizer) {\n        const conversationInfo = this.conversationInfo;\n        conversationInfo.participants = [participant];\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\n      }\n    }\n  }\n\n  removeParticipantImplAsync(participant) {\n    this.privParticipants.deleteParticipant(participant.id);\n    const conversationInfo = this.conversationInfo;\n    conversationInfo.participants = [participant];\n    return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\n  }\n\n  close(dispose) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.privIsConnected = false;\n        yield this.privConversationRecognizer.close();\n        yield (_a = this.privTranscriberRecognizer) === null || _a === void 0 ? void 0 : _a.close();\n        this.privConversationRecognizer = undefined;\n        (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.dispose();\n      } catch (e) {// ignore error\n      }\n\n      if (dispose) {\n        this.dispose();\n      }\n    });\n  }\n  /** Helpers */\n\n\n  get canSend() {\n    var _a;\n\n    return this.privIsConnected && !((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isMuted);\n  }\n\n  get canSendAsHost() {\n    var _a;\n\n    return this.privIsConnected && ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost);\n  }\n\n  handleCallback(cb, err) {\n    if (!!cb) {\n      try {\n        cb();\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n\n      cb = undefined;\n    }\n  }\n\n  handleError(error, err) {\n    if (!!err) {\n      if (error instanceof Error) {\n        const typedError = error;\n        err(typedError.name + \": \" + typedError.message);\n      } else {\n        err(error);\n      }\n    }\n  }\n  /** Participant Helpers */\n\n\n  toParticipants(includeHost) {\n    const participants = this.privParticipants.participants.map(p => {\n      return this.toParticipant(p);\n    });\n\n    if (!includeHost) {\n      return participants.filter(p => p.isHost === false);\n    } else {\n      return participants;\n    }\n  }\n\n  toParticipant(p) {\n    return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\n  }\n\n  getMuteAllCommand(isMuted) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setMuteAll,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: isMuted\n    });\n  }\n\n  getMuteCommand(participantId, isMuted) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setMute,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: isMuted\n    });\n  }\n\n  getLockCommand(isLocked) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.setLockState,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: isLocked\n    });\n  }\n\n  getEjectCommand(participantId) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.ejectParticipant,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand\n    });\n  }\n\n  getChangeNicknameCommand(nickname) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: ConversationTranslatorCommandTypes.changeNickname,\n      nickname,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: ConversationTranslatorMessageTypes.participantCommand,\n      value: nickname\n    });\n  }\n\n  getMessageCommand(message) {\n    Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    Contracts.throwIfNullOrWhitespace(message, \"message\");\n    return JSON.stringify({\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomId: this.privRoom.roomId,\n      text: message,\n      type: ConversationTranslatorMessageTypes.instantMessage\n    });\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Transcription/Conversation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, ConversationInfo, IConversation } from \"./IConversation\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    public abstract get authorizationToken(): string;\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        if (typeof arg2 === \"string\") {\r\n            const conversationImpl: ConversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), arg3, arg4);\r\n            return conversationImpl;\r\n        } else {\r\n            const conversationImpl: ConversationImpl = new ConversationImpl(speechConfig);\r\n            const cb: Callback = arg2;\r\n            const err: Callback = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                (() => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any) => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            return conversationImpl;\r\n        }\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean = false;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean = false;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string = \"\";\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    public set conversationTranslator(value: ConversationTranslator) {\r\n        this.privConversationTranslator = value;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null || hostNickname.length <= 1 || hostNickname.length > 50) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation) => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation) => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(true),\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(true),\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, true), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId: string = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId as string;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant) => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                this.privConversationRecognizer?.sendRequest(this.getEjectCommand(participantId), (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMessageCommand(message), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getChangeNicknameCommand(nickname), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        this.config?.close();\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privConversationRecognizer = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant) => {\r\n            return {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            };\r\n        });\r\n        const props: { [id: string]: string } = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onDisconnected = async (e: ConnectionEventArgs): Promise<void> => {\r\n        await this.close(false);\r\n        try {\r\n            if (!!this.privConversationTranslator.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onCanceled = async (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): Promise<void> => {\r\n        await this.close(false); // ?\r\n        try {\r\n            if (!!this.privConversationTranslator.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: any = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.useTts = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value;\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onLockRoomCommandReceived = (r: ConversationRecognizer, e: LockRoomEventArgs): void => {\r\n        // TODO\r\n    }\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant) => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator?.participantsChanged) {\r\n                this.privConversationTranslator?.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator?.transcribed) {\r\n                        this.privConversationTranslator?.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator?.transcribing) {\r\n                        this.privConversationTranslator?.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator?.textMessageReceived) {\r\n                        this.privConversationTranslator?.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator?.participantsChanged) {\r\n                this.privConversationTranslator?.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.conversationExpiration) {\r\n                this.privConversationTranslator?.conversationExpiration(\r\n                    this.privConversationTranslator,\r\n                    e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer.close();\r\n            await this.privTranscriberRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            this.privConversationTranslator?.dispose();\r\n        } catch (e) {\r\n            // ignore error\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    private handleCallback(cb: any, err: any): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: any): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant) => {\r\n            return this.toParticipant(p);\r\n        });\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant) => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}