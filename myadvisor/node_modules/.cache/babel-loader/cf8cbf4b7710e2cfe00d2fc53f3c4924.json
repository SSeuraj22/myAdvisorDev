{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _adaptivecards = require(\"adaptivecards\");\n\nfunction addCardAction(cardAction, includesOAuthButtons) {\n  var type = cardAction.type;\n  var action;\n\n  if (type === 'imBack' || type === 'messageBack' || type === 'postBack' || type === 'signin' && includesOAuthButtons) {\n    action = new _adaptivecards.SubmitAction();\n    action.data = {\n      __isBotFrameworkCardAction: true,\n      cardAction: cardAction\n    };\n    action.title = cardAction.title;\n  } else {\n    action = new _adaptivecards.OpenUrlAction();\n    action.title = cardAction.title;\n    action.url = cardAction.type === 'call' ? \"tel:\".concat(cardAction.value) : cardAction.value;\n  }\n\n  return action;\n}\n\nvar AdaptiveCardBuilder = /*#__PURE__*/function () {\n  function AdaptiveCardBuilder(adaptiveCards, styleOptions) {\n    var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ltr';\n    (0, _classCallCheck2.default)(this, AdaptiveCardBuilder);\n    (0, _defineProperty2.default)(this, \"card\", void 0);\n    (0, _defineProperty2.default)(this, \"container\", void 0);\n    (0, _defineProperty2.default)(this, \"styleOptions\", void 0);\n    this.card = new adaptiveCards.AdaptiveCard();\n    this.container = new _adaptivecards.Container();\n    this.container.rtl = direction === 'rtl';\n    this.styleOptions = styleOptions;\n    this.card.addItem(this.container);\n  }\n\n  (0, _createClass2.default)(AdaptiveCardBuilder, [{\n    key: \"addColumnSet\",\n    value: function addColumnSet(sizes) {\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      var selectAction = arguments.length > 2 ? arguments[2] : undefined;\n      var columnSet = new _adaptivecards.ColumnSet();\n      columnSet.selectAction = selectAction && addCardAction(selectAction);\n      container.addItem(columnSet);\n      return sizes.map(function (size) {\n        var column = new _adaptivecards.Column();\n        column.width = new _adaptivecards.SizeAndUnit(size, _adaptivecards.SizeUnit.Weight);\n        columnSet.addColumn(column);\n        return column;\n      });\n    }\n  }, {\n    key: \"addItems\",\n    value: function addItems(cardElements) {\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      cardElements.forEach(function (cardElement) {\n        return container.addItem(cardElement);\n      });\n    }\n  }, {\n    key: \"addTextBlock\",\n    value: function addTextBlock(text, template) {\n      var container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.container;\n\n      if (typeof text !== 'undefined') {\n        var textblock = new _adaptivecards.TextBlock(); // tslint:disable-next-line:forin\n\n        for (var prop in template) {\n          textblock[prop] = template[prop];\n        }\n\n        textblock.text = text;\n        container.addItem(textblock);\n      }\n    }\n  }, {\n    key: \"addButtons\",\n    value: function addButtons(cardActions, includesOAuthButtons) {\n      var _this = this;\n\n      cardActions && cardActions.forEach(function (cardAction) {\n        _this.card.addAction(addCardAction(cardAction, includesOAuthButtons));\n      });\n    }\n  }, {\n    key: \"addCommonHeaders\",\n    value: function addCommonHeaders(content) {\n      var richCardWrapTitle = this.styleOptions.richCardWrapTitle;\n      this.addTextBlock(content.title, {\n        color: _adaptivecards.TextColor.Dark,\n        size: _adaptivecards.TextSize.Medium,\n        weight: _adaptivecards.TextWeight.Bolder,\n        wrap: richCardWrapTitle\n      });\n      this.addTextBlock(content.subtitle, {\n        color: _adaptivecards.TextColor.Dark,\n        isSubtle: true,\n        wrap: richCardWrapTitle\n      });\n      this.addTextBlock(content.text, {\n        color: _adaptivecards.TextColor.Dark,\n        wrap: true\n      });\n    }\n  }, {\n    key: \"addCommon\",\n    value: function addCommon(content) {\n      this.addCommonHeaders(content);\n      this.addButtons(content.buttons);\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(url, container, selectAction, altText) {\n      container = container || this.container;\n      var image = new _adaptivecards.Image();\n      image.altText = altText;\n      image.url = url;\n      image.selectAction = selectAction && addCardAction(selectAction);\n      image.size = _adaptivecards.Size.Stretch;\n      container.addItem(image);\n    }\n  }]);\n  return AdaptiveCardBuilder;\n}();\n\nexports.default = AdaptiveCardBuilder;","map":{"version":3,"sources":["../../../src/adaptiveCards/Attachment/AdaptiveCardBuilder.ts"],"names":["type","cardAction","action","SubmitAction","__isBotFrameworkCardAction","OpenUrlAction","AdaptiveCardBuilder","direction","adaptiveCards","Container","container","selectAction","columnSet","ColumnSet","addCardAction","column","Column","SizeAndUnit","SizeUnit","cardElements","textblock","TextBlock","template","cardActions","richCardWrapTitle","content","color","TextColor","size","TextSize","weight","TextWeight","wrap","isSubtle","image","Image","Size"],"mappings":"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","sourcesContent":["import {\n  AdaptiveCard,\n  CardElement,\n  Column,\n  ColumnSet,\n  Container,\n  Image,\n  OpenUrlAction,\n  Size,\n  SizeAndUnit,\n  SizeUnit,\n  SubmitAction,\n  TextBlock,\n  TextColor,\n  TextSize,\n  TextWeight\n} from 'adaptivecards';\n\nimport { CardAction } from 'botframework-directlinejs';\n\nexport interface BotFrameworkCardAction {\n  __isBotFrameworkCardAction: boolean;\n  cardAction: CardAction;\n}\n\nfunction addCardAction(cardAction: CardAction, includesOAuthButtons?: boolean) {\n  const { type } = cardAction;\n  let action;\n\n  if (\n    type === 'imBack' ||\n    type === 'messageBack' ||\n    type === 'postBack' ||\n    (type === 'signin' && includesOAuthButtons)\n  ) {\n    action = new SubmitAction();\n\n    action.data = {\n      __isBotFrameworkCardAction: true,\n      cardAction\n    };\n\n    action.title = cardAction.title;\n  } else {\n    action = new OpenUrlAction();\n\n    action.title = cardAction.title;\n    action.url = cardAction.type === 'call' ? `tel:${cardAction.value}` : cardAction.value;\n  }\n\n  return action;\n}\n\nexport default class AdaptiveCardBuilder {\n  card: AdaptiveCard;\n  container: Container;\n  styleOptions: any;\n\n  constructor(adaptiveCards, styleOptions, direction = 'ltr') {\n    this.card = new adaptiveCards.AdaptiveCard();\n    this.container = new Container();\n    this.container.rtl = direction === 'rtl';\n    this.styleOptions = styleOptions;\n\n    this.card.addItem(this.container);\n  }\n\n  addColumnSet(sizes: number[], container: Container = this.container, selectAction?: CardAction) {\n    const columnSet = new ColumnSet();\n\n    columnSet.selectAction = selectAction && addCardAction(selectAction);\n    container.addItem(columnSet);\n\n    return sizes.map(size => {\n      const column = new Column();\n\n      column.width = new SizeAndUnit(size, SizeUnit.Weight);\n\n      columnSet.addColumn(column);\n\n      return column;\n    });\n  }\n\n  addItems(cardElements: CardElement[], container: Container = this.container) {\n    cardElements.forEach(cardElement => container.addItem(cardElement));\n  }\n\n  addTextBlock(text: string, template: Partial<TextBlock>, container: Container = this.container) {\n    if (typeof text !== 'undefined') {\n      const textblock = new TextBlock();\n\n      // tslint:disable-next-line:forin\n      for (const prop in template) {\n        textblock[prop] = template[prop];\n      }\n\n      textblock.text = text;\n\n      container.addItem(textblock);\n    }\n  }\n\n  addButtons(cardActions: CardAction[], includesOAuthButtons?: boolean) {\n    cardActions &&\n      cardActions.forEach(cardAction => {\n        this.card.addAction(addCardAction(cardAction, includesOAuthButtons));\n      });\n  }\n\n  addCommonHeaders(content: ICommonContent) {\n    const { richCardWrapTitle } = this.styleOptions;\n    this.addTextBlock(content.title, {\n      color: TextColor.Dark,\n      size: TextSize.Medium,\n      weight: TextWeight.Bolder,\n      wrap: richCardWrapTitle\n    });\n    this.addTextBlock(content.subtitle, { color: TextColor.Dark, isSubtle: true, wrap: richCardWrapTitle });\n    this.addTextBlock(content.text, { color: TextColor.Dark, wrap: true });\n  }\n\n  addCommon(content: ICommonContent) {\n    this.addCommonHeaders(content);\n    this.addButtons(content.buttons);\n  }\n\n  addImage(url: string, container?: Container, selectAction?: CardAction, altText?: string) {\n    container = container || this.container;\n\n    const image = new Image();\n\n    image.altText = altText;\n    image.url = url;\n    image.selectAction = selectAction && addCardAction(selectAction);\n    image.size = Size.Stretch;\n\n    container.addItem(image);\n  }\n}\n\nexport interface ICommonContent {\n  buttons?: CardAction[];\n  subtitle?: string;\n  text?: string;\n  title?: string;\n}\n"],"sourceRoot":"bundle:///"},"metadata":{},"sourceType":"script"}