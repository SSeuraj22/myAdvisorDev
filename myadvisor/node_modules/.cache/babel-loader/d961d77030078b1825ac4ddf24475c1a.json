{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RestConfigBase } from \"../../common.browser/RestConfigBase\"; // Node.JS specific xmlhttprequest / browser support.\n\nimport * as XHR from \"xmlhttprequest-ts\";\n/**\n * Config settings for Conversation Translator\n */\n\n/**\n * Helpers for sending / receiving HTTPS requests / responses.\n * @param params\n */\n\nfunction queryParams(params = {}) {\n  return Object.keys(params).map(k => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k])).join(\"&\");\n}\n\nfunction withQuery(url, params = {}) {\n  const queryString = queryParams(params);\n  return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n}\n\nfunction parseXHRResult(xhr) {\n  return {\n    data: xhr.responseText,\n    headers: xhr.getAllResponseHeaders(),\n    json: () => JSON.parse(xhr.responseText),\n    ok: xhr.status >= 200 && xhr.status < 300,\n    status: xhr.status,\n    statusText: xhr.statusText\n  };\n}\n\nfunction errorResponse(xhr, message = null) {\n  return {\n    data: message || xhr.statusText,\n    headers: xhr.getAllResponseHeaders(),\n    json: () => JSON.parse(message || \"\\\"\" + xhr.statusText + \"\\\"\"),\n    ok: false,\n    status: xhr.status,\n    statusText: xhr.statusText\n  };\n}\n\nexport function extractHeaderValue(headerKey, headers) {\n  let headerValue = \"\";\n\n  try {\n    const arr = headers.trim().split(/[\\r\\n]+/);\n    const headerMap = {};\n    arr.forEach(line => {\n      const parts = line.split(\": \");\n      const header = parts.shift().toLowerCase();\n      const value = parts.join(\": \");\n      headerMap[header] = value;\n    });\n    headerValue = headerMap[headerKey.toLowerCase()];\n  } catch (e) {// ignore the error\n  }\n\n  return headerValue;\n}\nexport function request(method, url, queryParams = {}, body = null, options = {}, callback) {\n  const defaultRequestOptions = RestConfigBase.requestOptions;\n  const ignoreCache = options.ignoreCache || defaultRequestOptions.ignoreCache;\n  const headers = options.headers || defaultRequestOptions.headers;\n  const timeout = options.timeout || defaultRequestOptions.timeout;\n  let xhr;\n\n  if (typeof window === \"undefined\") {\n    // Node\n    xhr = new XHR.XMLHttpRequest();\n  } else {\n    xhr = new XMLHttpRequest();\n  }\n\n  xhr.open(method, withQuery(url, queryParams), true);\n\n  if (headers) {\n    Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n  }\n\n  if (ignoreCache) {\n    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n  }\n\n  xhr.timeout = timeout;\n\n  xhr.onload = evt => {\n    callback(parseXHRResult(xhr));\n  };\n\n  xhr.onerror = evt => {\n    callback(errorResponse(xhr, \"Failed to make request.\"));\n  };\n\n  xhr.ontimeout = evt => {\n    callback(errorResponse(xhr, \"Request took longer than expected.\"));\n  };\n\n  if (method === \"post\" && body) {\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.send(JSON.stringify(body));\n  } else {\n    xhr.send();\n  }\n}\nexport function PromiseToEmptyCallback(promise, cb, err) {\n  if (!!promise) {\n    promise.then(result => {\n      try {\n        if (!!cb) {\n          cb();\n        }\n      } catch (e) {\n        if (!!err) {\n          err(`'Unhandled error on promise callback: ${e}'`);\n        }\n      }\n    }, reason => {\n      try {\n        if (!!err) {\n          err(reason);\n        }\n        /* tslint:disable:no-empty */\n\n      } catch (error) {}\n    });\n  } else {\n    if (!!err) {\n      err(\"Null promise\");\n    }\n  }\n}","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IResponse } from \"./ConversationTranslatorInterfaces\";\r\n\r\nimport { IRequestOptions, RestConfigBase } from \"../../common.browser/RestConfigBase\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\n/**\r\n * Config settings for Conversation Translator\r\n */\r\n/**\r\n * Helpers for sending / receiving HTTPS requests / responses.\r\n * @param params\r\n */\r\nfunction queryParams(params: any = {}): any {\r\n    return Object.keys(params)\r\n        .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n        .join(\"&\");\r\n}\r\n\r\nfunction withQuery(url: string, params: any = {}): any {\r\n    const queryString = queryParams(params);\r\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n}\r\n\r\nfunction parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IResponse {\r\n    return {\r\n        data: xhr.responseText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(xhr.responseText) as T,\r\n        ok: xhr.status >= 200 && xhr.status < 300,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nfunction errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IResponse {\r\n    return {\r\n        data: message || xhr.statusText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n        ok: false,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nexport function extractHeaderValue(headerKey: string, headers: string): string {\r\n\r\n    let headerValue: string = \"\";\r\n\r\n    try {\r\n        const arr = headers.trim().split(/[\\r\\n]+/);\r\n        const headerMap: any = {};\r\n        arr.forEach((line: any) => {\r\n            const parts = line.split(\": \");\r\n            const header = parts.shift().toLowerCase();\r\n            const value = parts.join(\": \");\r\n            headerMap[header] = value;\r\n        });\r\n\r\n        headerValue = headerMap[headerKey.toLowerCase()];\r\n    } catch (e) {\r\n        // ignore the error\r\n    }\r\n\r\n    return headerValue;\r\n}\r\n\r\nexport function request(\r\n    method: \"get\" | \"post\" | \"delete\",\r\n    url: string,\r\n    queryParams: any = {},\r\n    body: any = null,\r\n    options: IRequestOptions = {},\r\n    callback: any): any {\r\n\r\n    const defaultRequestOptions = RestConfigBase.requestOptions;\r\n\r\n    const ignoreCache = options.ignoreCache || defaultRequestOptions.ignoreCache;\r\n    const headers = options.headers || defaultRequestOptions.headers;\r\n    const timeout = options.timeout || defaultRequestOptions.timeout;\r\n\r\n    let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n    if (typeof window === \"undefined\") { // Node\r\n        xhr = new XHR.XMLHttpRequest();\r\n\r\n    } else {\r\n        xhr = new XMLHttpRequest();\r\n    }\r\n    xhr.open(method, withQuery(url, queryParams), true);\r\n\r\n    if (headers) {\r\n        Object.keys(headers).forEach((key: any) => xhr.setRequestHeader(key, headers[key]));\r\n    }\r\n\r\n    if (ignoreCache) {\r\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n    }\r\n\r\n    xhr.timeout = timeout;\r\n\r\n    xhr.onload = (evt: any) => {\r\n        callback(parseXHRResult(xhr));\r\n    };\r\n\r\n    xhr.onerror = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Failed to make request.\"));\r\n    };\r\n\r\n    xhr.ontimeout = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Request took longer than expected.\"));\r\n    };\r\n\r\n    if (method === \"post\" && body) {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.send(JSON.stringify(body));\r\n    } else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nexport function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\r\n    if (!!promise) {\r\n        promise.then((result: T): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(`'Unhandled error on promise callback: ${e}'`);\r\n                }\r\n            }\r\n        }, (reason: any) => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    } else {\r\n        if (!!err) {\r\n            err(\"Null promise\");\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}