{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom'; //import axios from \"axios\";\n\nimport PullCourses from \"./PullCourses\";\nimport { useEffect, useState } from \"react\";\n\nconst Finish = props => {\n  _s();\n\n  const history = useHistory(); // Used to redirect to a new path without losing state values\n\n  const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n\n  const courses = PullCourses(); // Retrieve all courses from the database\n\n  const chosenCourses = props.chosenCourses;\n  const transcriptDets = props.transcriptDetails;\n  const chosenCreds = props.chosenCoursesCreds;\n  console.log(\"chosen    \" + choseCred);\n  var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits); //this is a potential total number of credits completed\n  //console.log(transcriptDets);\n\n  var combinedDegreeGpa; //estimated gpa calculated using prior gpa and current gpa\n  //An array containing the grades and their quality points\n\n  const gradesArray = [{\n    grade: 'A+',\n    qualityPoints: 4.3\n  }, {\n    grade: 'A',\n    qualityPoints: 4.0\n  }, {\n    grade: 'A-',\n    qualityPoints: 3.7\n  }, {\n    grade: 'B+',\n    qualityPoints: 3.3\n  }, {\n    grade: 'B',\n    qualityPoints: 3.0\n  }, {\n    grade: 'B-',\n    qualityPoints: 2.7\n  }, {\n    grade: 'C+',\n    qualityPoints: 2.3\n  }, {\n    grade: 'C',\n    qualityPoints: 2.0\n  }, {\n    grade: 'F1',\n    qualityPoints: 1.7\n  }, {\n    grade: 'F2',\n    qualityPoints: 1.3\n  }, {\n    grade: 'F3',\n    qualityPoints: 0.0\n  }]; // If the user's recommended courses has been lost, redirect to start page to generate them again\n\n  if (props.recCourses === null) {\n    history.push({\n      pathname: '/start'\n    });\n  }\n  /*Calculate potential gpa and potential degree class\n  */\n  //Function to calculate current degree gpa hours\n\n\n  function calculateCurrentDegreeGpaHrs(chosenCourseCreds, inProgCourseCredits) {\n    var currDegGpaHrs = chosenCourseCredits + inProgCourseCredits;\n    return currDegGpaHrs;\n  } //Function to calculate current degree gpa\n\n\n  function calculateCurrentDegreeGpa(totGradePtsEarned, totQualityPts) {\n    var currDegGpa = totGradePtsEarned / totQualityPts;\n    return currDegGpa;\n  }\n  /*\n      priorDegGpaHrs - Prior Degree GPA Hours\n      priorDegGpa - Prior Degree GPA\n      currDegGpaHrs - Current Degree GPA Hours\n      currDegGpa - Current Degree GPA\n       FORMULA:\n      Combined Degree GPA = ((Prior Degree GPA Hours x Prior Degree GPA) + \n                              (Current Degree GPA Hours x Current Degree GPA)) / \n                              (Prior Degree GPA Hours + Current Degree GPA Hours)\n  */\n  //function to calculate estimated gpa\n\n\n  function calculateCombinedDegreeGpa(priorDegGpaHrs, priorDegGpa, currDegGpaHrs, currDegGpa) {\n    var estimatedGPA = (priorDegGpaHrs * priorDegGpa + currDegGpaHrs * currDegGpa) / (priorDegGpaHrs + currDegGpaHrs);\n    return estimatedGPA;\n  } //console.log(calculateCombinedDegreeGpa(60.00, 3.00, 3.00, 4.00).toFixed(2));\n  //function to calculate the potential degree gpa for the semester\n\n\n  function calculateSemPotentialGpa() {\n    const priorDegGpaHrs = transcriptDets.degreeGpaHours;\n    const priorDegGpa = transcriptDets.gpa;\n    const inProgressCredits = props.courseInProgCredits;\n    const chosenCredits = 0;\n    const currDegGpaHrs = 0; //total credits of courses that you are pursuing this semester (including inprogress course & course chosen for advising)\n    //const currDegGpa;\n    //console.log(priorDegGpa);\n  } //calculateSemPotentialGpa();\n\n\n  useEffect(() => {\n    props.setProg(100); // Set advising progress to 100%\n\n    props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n    //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n    //getAllPotentialGraduate();\n    //console.log(\"1\");\n\n    /*\n    \n    async function getPotentialGraduate() {\n        try{\n            const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n            const parseData = await res.json();\n            setPotentialGrad(parseData);\n        }\n        catch(err){\n            console.log(\"Error: \" + err.message);\n        }\n        /*\n        fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data);\n                setPotentialGrad(data);\n            })\n            .catch((err) =>{\n                console.log(err.message);\n            });\n        */\n    //}\n    //getPotentialGraduate();\n  }, []);\n  useEffect(() => {\n    if (!uploaded) {\n      // If advising session has not yet been uploaded\n      var requestOptions = {\n        // Create POST request\n        method: 'POST',\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        redirect: 'follow'\n      };\n      fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n      .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n      setUploaded(true);\n    }\n\n    if (totalCreditsCompleted >= 93) {\n      if (!props.gradUploaded) {\n        //if potential graduate has not been uploaded to database yet\n        var requestOptions = {\n          // Create POST request\n          method: 'POST',\n          headers: {\n            token: localStorage.getItem(\"token\"),\n            \"Content-type\": \"application/json\"\n          },\n          redirect: 'follow'\n        };\n        fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n        .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n        props.setGradUploaded(true);\n      }\n    }\n\n    if (totalCreditsCompleted >= 0 && totalCreditsCompleted < 93) {\n      var requestOptions = {\n        // Create POST request\n        method: 'GET',\n        redirect: 'follow'\n      };\n      fetch(`/student/potential-graduates/all`, requestOptions) // Make request to server to get all potential graduate\n      .then(response => response.json()).then(data => {\n        let graduates = data;\n\n        if (graduates !== null) {\n          graduates.map(function (graduate) {\n            if (graduate.studentId === parseInt(localStorage.getItem(\"username\"))) {\n              //if potential graduate found in database\n              var requestOptions2 = {\n                //create DELETE request\n                method: 'DELETE',\n                headers: {\n                  token: localStorage.getItem(\"token\")\n                }\n              };\n              fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2) //delete potential graduate\n              .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n            }\n          });\n        }\n      }).catch(error => console.log('error', error));\n    }\n  }, [totalCreditsCompleted]); // async function uploadAdvisingSession() {\n  //     try {\n  //       const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n  //       return response\n  //     }\n  //     catch (error) {\n  //       console.log(error);\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card almost-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-header blue-txt\",\n                children: \"You're all done with advising!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-text\",\n                children: \"Here's a list of all the courses you chose:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 33\n              }, this), Array.from({\n                length: props.chosenCourses.length\n              }, (_, k) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"course-chosen blue-txt\",\n                  children: props.chosenCourses[k]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 48\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card body-tips\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-header2\",\n                children: \"Potential Degree Class:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-text2\",\n                children: \"Here's a list of all the courses you chose:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Finish, \"ayKO17///ZoiD4k/J3lHhJIIflU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Finish;\nexport default Finish;\n\nvar _c;\n\n$RefreshReg$(_c, \"Finish\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js"],"names":["React","Component","useHistory","PullCourses","useEffect","useState","Finish","props","history","uploaded","setUploaded","courses","chosenCourses","transcriptDets","transcriptDetails","chosenCreds","chosenCoursesCreds","console","log","choseCred","totalCreditsCompleted","parseInt","studCredComplete","newDeg","courseInProgCredits","combinedDegreeGpa","gradesArray","grade","qualityPoints","recCourses","push","pathname","calculateCurrentDegreeGpaHrs","chosenCourseCreds","inProgCourseCredits","currDegGpaHrs","chosenCourseCredits","calculateCurrentDegreeGpa","totGradePtsEarned","totQualityPts","currDegGpa","calculateCombinedDegreeGpa","priorDegGpaHrs","priorDegGpa","estimatedGPA","calculateSemPotentialGpa","degreeGpaHours","gpa","inProgressCredits","chosenCredits","setProg","setShowBotButtons","requestOptions","method","headers","token","localStorage","getItem","redirect","fetch","then","response","text","result","catch","error","gradUploaded","setGradUploaded","json","data","graduates","map","graduate","studentId","requestOptions2","Array","from","length","_","k"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\n//import axios from \"axios\";\nimport PullCourses from \"./PullCourses\";\nimport { useEffect, useState } from \"react\";\n\nconst Finish = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n\n    const courses = PullCourses(); // Retrieve all courses from the database\n    \n    const chosenCourses = props.chosenCourses;\n    const transcriptDets = props.transcriptDetails;\n    \n    const chosenCreds = props.chosenCoursesCreds;\n    console.log(\"chosen    \"+choseCred);\n\n    var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits); //this is a potential total number of credits completed\n    \n\n   \n    //console.log(transcriptDets);\n\n    var combinedDegreeGpa; //estimated gpa calculated using prior gpa and current gpa\n\n    //An array containing the grades and their quality points\n    const gradesArray = [ {grade: 'A+', qualityPoints: 4.3}, \n                          {grade: 'A', qualityPoints: 4.0},\n                          {grade: 'A-', qualityPoints: 3.7},\n                          {grade: 'B+', qualityPoints: 3.3},\n                          {grade: 'B', qualityPoints: 3.0},\n                          {grade: 'B-', qualityPoints: 2.7},\n                          {grade: 'C+', qualityPoints: 2.3},\n                          {grade: 'C', qualityPoints: 2.0},\n                          {grade: 'F1', qualityPoints: 1.7},\n                          {grade: 'F2', qualityPoints: 1.3},\n                          {grade: 'F3', qualityPoints: 0.0},\n                        ];\n\n    // If the user's recommended courses has been lost, redirect to start page to generate them again\n    if (props.recCourses === null) { \n        history.push({\n        pathname: '/start'\n        })\n    }\n\n\n    /*Calculate potential gpa and potential degree class\n    */\n\n\n    //Function to calculate current degree gpa hours\n    function calculateCurrentDegreeGpaHrs(chosenCourseCreds, inProgCourseCredits){\n        var currDegGpaHrs = chosenCourseCredits + inProgCourseCredits;\n        return currDegGpaHrs;\n    }\n\n    //Function to calculate current degree gpa\n    function calculateCurrentDegreeGpa(totGradePtsEarned, totQualityPts){\n        var currDegGpa = totGradePtsEarned / totQualityPts;\n        return currDegGpa;\n    }\n    \n\n    \n\n    \n\n    /*\n        priorDegGpaHrs - Prior Degree GPA Hours\n        priorDegGpa - Prior Degree GPA\n        currDegGpaHrs - Current Degree GPA Hours\n        currDegGpa - Current Degree GPA\n\n        FORMULA:\n        Combined Degree GPA = ((Prior Degree GPA Hours x Prior Degree GPA) + \n                                (Current Degree GPA Hours x Current Degree GPA)) / \n                                (Prior Degree GPA Hours + Current Degree GPA Hours)\n    */\n    \n    //function to calculate estimated gpa\n    function calculateCombinedDegreeGpa(priorDegGpaHrs, priorDegGpa, currDegGpaHrs, currDegGpa){\n        var estimatedGPA = ((priorDegGpaHrs * priorDegGpa) + (currDegGpaHrs * currDegGpa)) / (priorDegGpaHrs + currDegGpaHrs);\n        return estimatedGPA;\n    }\n    //console.log(calculateCombinedDegreeGpa(60.00, 3.00, 3.00, 4.00).toFixed(2));\n\n    //function to calculate the potential degree gpa for the semester\n    function calculateSemPotentialGpa(){\n        const priorDegGpaHrs = transcriptDets.degreeGpaHours;\n        const priorDegGpa = transcriptDets.gpa;\n\n        const inProgressCredits = props.courseInProgCredits;\n        const chosenCredits = 0;\n        const currDegGpaHrs = 0; //total credits of courses that you are pursuing this semester (including inprogress course & course chosen for advising)\n        //const currDegGpa;\n        //console.log(priorDegGpa);\n    }\n    //calculateSemPotentialGpa();\n\n    useEffect(() => {\n        props.setProg(100); // Set advising progress to 100%\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n        \n        //getAllPotentialGraduate();\n        //console.log(\"1\");\n        \n        /*\n        \n        async function getPotentialGraduate() {\n            try{\n                const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n                const parseData = await res.json();\n                setPotentialGrad(parseData);\n            }\n            catch(err){\n                console.log(\"Error: \" + err.message);\n            }\n            /*\n            fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n                .then((res) => res.json())\n                .then((data) => {\n                    console.log(data);\n                    setPotentialGrad(data);\n                })\n                .catch((err) =>{\n                    console.log(err.message);\n                });\n            */\n               \n        //}\n        \n        //getPotentialGraduate();\n        \n        \n    }, []);\n    \n    useEffect(() => {\n        if (!uploaded) { // If advising session has not yet been uploaded\n            var requestOptions = { // Create POST request\n                method: 'POST',\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                redirect: 'follow'\n            };\n\n            fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            \n            setUploaded(true);\n        }\n\n        if(totalCreditsCompleted >= 93){\n            if(!props.gradUploaded){//if potential graduate has not been uploaded to database yet\n                var requestOptions = { // Create POST request\n                    method: 'POST',\n                    headers: {\n                        token: localStorage.getItem(\"token\"),\n                        \"Content-type\": \"application/json\",\n                    },\n                    redirect: 'follow'\n                };\n                fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                \n                props.setGradUploaded(true); \n            }\n        }\n        \n        if((totalCreditsCompleted >= 0 && totalCreditsCompleted < 93)){\n            var requestOptions = { // Create POST request\n                method: 'GET',\n                redirect: 'follow'\n            };\n\n            fetch(`/student/potential-graduates/all`, requestOptions) // Make request to server to get all potential graduate\n                .then(response => response.json())\n                .then((data) => {\n                    let graduates = data;\n\n                    if(graduates!==null){\n                        graduates.map(function(graduate){ \n\n                            if(graduate.studentId === parseInt(localStorage.getItem(\"username\"))){ //if potential graduate found in database\n                                var requestOptions2 = {//create DELETE request\n                                    method: 'DELETE',\n                                    headers: {\n                                        token: localStorage.getItem(\"token\")\n                                    }\n                                };\n\n                                fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2) //delete potential graduate\n                                    .then(response => response.text())\n                                    .then(result => console.log(result))\n                                    .catch(error => console.log('error', error));\n                            }\n                            \n                        })\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }, [totalCreditsCompleted]);\n\n    // async function uploadAdvisingSession() {\n    //     try {\n    //       const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n    //       return response\n    //     }\n    //     catch (error) {\n    //       console.log(error);\n    //     }\n    // }\n\n\n    return (\n        <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're all done with advising!</p>\n                                <p className=\"almost-text\">Here's a list of all the courses you chose:</p>\n                                {\n                                    Array.from({ length: props.chosenCourses.length }, (_, k) => {\n                                        return <p className=\"course-chosen blue-txt\">{props.chosenCourses[k]}</p>\n                                    })\n                                }\n                            </div>\n\n                            <div className=\"card body-tips\" >\n                                <p className=\"almost-header2\">Potential Degree Class:</p>\n                                <p className=\"almost-text2\">Here's a list of all the courses you chose:</p>\n                            </div>\n                                \n                            \n\n                        </div>\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  \n}\n\nexport default Finish;\n"]},"metadata":{},"sourceType":"module"}