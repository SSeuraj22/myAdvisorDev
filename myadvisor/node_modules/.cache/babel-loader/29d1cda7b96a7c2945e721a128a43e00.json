{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfileResult } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\nexport class VoiceProfileClient {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   *        specifies the keyword to be recognized.\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @param cb - Callback invoked once Voice Profile has been created.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  createProfileAsync(profileType, lang, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createProfile(profileType, lang);\n      const response = result.json();\n      const profile = new VoiceProfile(response.profileId, profileType);\n      return profile;\n    }))(), cb, err);\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @param cb - Callback invoked once Enrollment request has been submitted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  enrollProfileAsync(profile, audioConfig, cb, err) {\n    const configImpl = audioConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n      const ret = new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n      return ret;\n    }))(), cb, err);\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @param cb - Callback invoked once Voice Profile has been deleted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  deleteProfileAsync(profile, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.deleteProfile(profile);\n      return this.getResult(result, ResultReason.DeletedVoiceProfile);\n    }))(), cb, err);\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @param cb - Callback invoked once Voice Profile has been reset.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  resetProfileAsync(profile, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.resetProfile(profile);\n      return this.getResult(result, ResultReason.ResetVoiceProfile);\n    }))(), cb, err);\n  }\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implClientSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(result, successReason, cb) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/VoiceProfileClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    FileAudioSource,\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once Voice Profile has been created.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfile> => {\r\n            const result: IRestResponse = await this.privAdapter.createProfile(profileType, lang);\r\n            const response: { profileId: string } = result.json();\r\n            const profile = new VoiceProfile(response.profileId, profileType);\r\n            return profile;\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @param cb - Callback invoked once Enrollment request has been submitted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\r\n            const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\r\n            const ret: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                result.data,\r\n                result.statusText,\r\n            );\r\n            return ret;\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @param cb - Callback invoked once Voice Profile has been deleted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\r\n            const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\r\n            return this.getResult(result, ResultReason.DeletedVoiceProfile);\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @param cb - Callback invoked once Voice Profile has been reset.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\r\n            const result: IRestResponse = await this.privAdapter.resetProfile(profile);\r\n            return this.getResult(result, ResultReason.ResetVoiceProfile);\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}