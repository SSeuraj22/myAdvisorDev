{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddAccount.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n/*\n    AddAccount allows a staff member to add staff and student accounts to the system.\n*/\n\nfunction AddAccount() {\n  _s();\n\n  /*\n      The validated state is used to keep track of the validity of the add account form.\n      It's initial state is false.\n  */\n  const [validated, setValidated] = useState(false);\n  /*\n      formRef is is reference to the form, which allows for the resetting of the form.\n  */\n\n  const formRef = useRef(null);\n  /*\n      notifyError and notifyEdit is used to display toast notifications for events.\n      notifyError displays a red toast and notifyEdit displays a green toast.\n  */\n\n  const notifyError = text => toast.error(text);\n\n  const notifyEdit = text => toast.success(text);\n  /*\n      HandleSubmit gets the data from the form, checks to see if it is valid, and passes it to the addAccount function.\n  */\n\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n    const url = \"\";\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      event.preventDefault();\n      event.stopPropagation();\n      const formData = {\n        username: form.elements.username.value,\n        password: form.elements.password.value,\n        confirm_password: form.elements.confirm_password.value,\n        account_type: form.elements.account_type.value\n      };\n\n      if (formData.password !== formData.confirm_password) {\n        notifyError(\"Passwords Don't Match\");\n      } else {\n        if (formData.account_type === \"Staff\") {\n          addAccount(formData, \"/admin/staff/create\");\n        } else if (formData.account_type === \"Student\") {\n          addAccount(formData, \"/admin/students/create\");\n        }\n\n        setValidated(true);\n        formRef.current.reset();\n        setValidated(false);\n      }\n    }\n  };\n  /*\n      addAccount creates a post request to the server, which creates a new account based on the account type selected.\n  */\n\n\n  async function addAccount(data, url) {\n    try {\n      const res = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          token: localStorage.token,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      const status = await res.statusText;\n\n      if (status == \"OK\") {\n        notifyEdit(\"Account Added!\");\n      } else {\n        notifyError(\"Error, Account Already Exists.\");\n      }\n    } catch (err) {\n      notifyError(err.message);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      ref: formRef,\n      validated: validated,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"account_type\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Account Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Staff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"username\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"confirm_password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"float-right\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-custom\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(AddAccount, \"Z7GxNEfxXdRAbXBuBeSPCzcgeQw=\");\n\n_c = AddAccount;\nexport default AddAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAccount\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddAccount.js"],"names":["React","useState","useRef","Button","Form","Col","ToastContainer","toast","AddAccount","validated","setValidated","formRef","notifyError","text","error","notifyEdit","success","handleSubmit","event","form","currentTarget","url","checkValidity","preventDefault","stopPropagation","formData","username","elements","value","password","confirm_password","account_type","addAccount","current","reset","data","res","fetch","method","headers","token","localStorage","body","JSON","stringify","status","statusText","err","message"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    AddAccount allows a staff member to add staff and student accounts to the system.\n*/\n\nfunction AddAccount() {\n    /*\n        The validated state is used to keep track of the validity of the add account form.\n        It's initial state is false.\n    */\n    const [validated, setValidated] = useState(false);\n\n    /*\n        formRef is is reference to the form, which allows for the resetting of the form.\n    */\n    const formRef = useRef(null);\n\n    /*\n        notifyError and notifyEdit is used to display toast notifications for events.\n        notifyError displays a red toast and notifyEdit displays a green toast.\n    */\n    const notifyError = (text) => toast.error(text);\n    const notifyEdit = (text) => toast.success(text);\n\n    /*\n        HandleSubmit gets the data from the form, checks to see if it is valid, and passes it to the addAccount function.\n    */\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        const url = \"\";\n\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else{\n\n            event.preventDefault();\n            event.stopPropagation();\n        \n            const formData = {\n                username : form.elements.username.value,\n                password : form.elements.password.value,\n                confirm_password : form.elements.confirm_password.value,\n                account_type: form.elements.account_type.value\n            }\n\n            if(formData.password !== formData.confirm_password){\n                notifyError(\"Passwords Don't Match\")\n            } else {\n\n                if(formData.account_type === \"Staff\"){\n                    addAccount(formData, \"/admin/staff/create\"); \n                } else if(formData.account_type === \"Student\") {\n                    addAccount(formData, \"/admin/students/create\"); \n                }\n\n                setValidated(true);\n\n                formRef.current.reset();\n                setValidated(false);\n            }\n        }\n    };\n\n    /*\n        addAccount creates a post request to the server, which creates a new account based on the account type selected.\n    */\n    async function addAccount(data, url) {\n        try {\n          const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                token: localStorage.token,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n\n          if(status == \"OK\"){\n            notifyEdit(\"Account Added!\");\n          }\n          else{\n            notifyError(\"Error, Account Already Exists.\");\n          }\n\n        } catch (err) {\n            notifyError(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form ref={formRef} validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"account_type\">\n                    <Form.Label>Account Type</Form.Label>\n                    <Form.Control as=\"select\">\n                    <option>Staff</option>\n                    <option>Student</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"username\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" required/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Col>\n                        <Form.Group controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" required/>\n                        </Form.Group>\n                    </Col>\n\n                    <Col>\n                        <Form.Group controlId=\"confirm_password\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control type=\"password\" required/>\n                        </Form.Group>\n                    </Col>\n                </Form.Row>\n \n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Add</Button></div>\n            </Form>\n\n        </> \n    );\n}\n\nexport default AddAccount;"]},"metadata":{},"sourceType":"module"}