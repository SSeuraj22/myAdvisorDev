{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\nimport { ArgumentNullError, BackgroundEvent, ConnectionClosedEvent, ConnectionErrorEvent, ConnectionEstablishedEvent, ConnectionMessageReceivedEvent, ConnectionMessageSentEvent, ConnectionOpenResponse, ConnectionStartEvent, ConnectionState, Deferred, Events, EventSource, MessageType, Queue, RawWebsocketMessage } from \"../common/Exports\"; // Node.JS specific web socket / browser support.\n\nimport ws from \"ws\";\nimport { CertCheckAgent } from \"./CertChecks\";\nexport class WebsocketMessageAdapter {\n  constructor(uri, connectionId, messageFormatter, proxyInfo, headers, enableCompression) {\n    this.open = () => {\n      if (this.privConnectionState === ConnectionState.Disconnected) {\n        return Promise.reject(`Cannot open a connection that is in ${this.privConnectionState} state`);\n      }\n\n      if (this.privConnectionEstablishDeferral) {\n        return this.privConnectionEstablishDeferral.promise;\n      }\n\n      this.privConnectionEstablishDeferral = new Deferred();\n      this.privCertificateValidatedDeferral = new Deferred();\n      this.privConnectionState = ConnectionState.Connecting;\n\n      try {\n        if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\n          // Browser handles cert checks.\n          this.privCertificateValidatedDeferral.resolve();\n          this.privWebsocketClient = new WebSocket(this.privUri);\n        } else {\n          const options = {\n            headers: this.privHeaders,\n            perMessageDeflate: this.privEnableCompression\n          }; // The ocsp library will handle validation for us and fail the connection if needed.\n\n          this.privCertificateValidatedDeferral.resolve();\n          const checkAgent = new CertCheckAgent(this.proxyInfo);\n          options.agent = checkAgent.GetAgent();\n          this.privWebsocketClient = new ws(this.privUri, options);\n        }\n\n        this.privWebsocketClient.binaryType = \"arraybuffer\";\n        this.privReceivingMessageQueue = new Queue();\n        this.privDisconnectDeferral = new Deferred();\n        this.privSendMessageQueue = new Queue();\n        this.processSendQueue().catch(reason => {\n          Events.instance.onEvent(new BackgroundEvent(reason));\n        });\n      } catch (error) {\n        this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\n        return this.privConnectionEstablishDeferral.promise;\n      }\n\n      this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\n\n      this.privWebsocketClient.onopen = e => {\n        this.privCertificateValidatedDeferral.promise.then(() => {\n          this.privConnectionState = ConnectionState.Connected;\n          this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\n          this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\n        }, error => {\n          this.privConnectionEstablishDeferral.reject(error);\n        });\n      };\n\n      this.privWebsocketClient.onerror = e => {\n        this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\n        this.privLastErrorReceived = e.message;\n      };\n\n      this.privWebsocketClient.onclose = e => {\n        if (this.privConnectionState === ConnectionState.Connecting) {\n          this.privConnectionState = ConnectionState.Disconnected; // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n\n          this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\n        } else {\n          this.privConnectionState = ConnectionState.Disconnected;\n          this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\n        }\n\n        this.onClose(e.code, e.reason).catch(reason => {\n          Events.instance.onEvent(new BackgroundEvent(reason));\n        });\n      };\n\n      this.privWebsocketClient.onmessage = e => {\n        const networkReceivedTime = new Date().toISOString();\n\n        if (this.privConnectionState === ConnectionState.Connected) {\n          const deferred = new Deferred(); // let id = ++this.idCounter;\n\n          this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\n\n          if (e.data instanceof ArrayBuffer) {\n            const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\n            this.privMessageFormatter.toConnectionMessage(rawMessage).then(connectionMessage => {\n              this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\n              deferred.resolve(connectionMessage);\n            }, error => {\n              // TODO: Events for these ?\n              deferred.reject(`Invalid binary message format. Error: ${error}`);\n            });\n          } else {\n            const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\n            this.privMessageFormatter.toConnectionMessage(rawMessage).then(connectionMessage => {\n              this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\n              deferred.resolve(connectionMessage);\n            }, error => {\n              // TODO: Events for these ?\n              deferred.reject(`Invalid text message format. Error: ${error}`);\n            });\n          }\n        }\n      };\n\n      return this.privConnectionEstablishDeferral.promise;\n    };\n\n    this.send = message => {\n      if (this.privConnectionState !== ConnectionState.Connected) {\n        return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\n      }\n\n      const messageSendStatusDeferral = new Deferred();\n      const messageSendDeferral = new Deferred();\n      this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\n      this.privMessageFormatter.fromConnectionMessage(message).then(rawMessage => {\n        messageSendDeferral.resolve({\n          Message: message,\n          RawWebsocketMessage: rawMessage,\n          sendStatusDeferral: messageSendStatusDeferral\n        });\n      }, error => {\n        messageSendDeferral.reject(`Error formatting the message. ${error}`);\n      });\n      return messageSendStatusDeferral.promise;\n    };\n\n    this.read = () => {\n      if (this.privConnectionState !== ConnectionState.Connected) {\n        return Promise.reject(`Cannot read on connection that is in ${this.privConnectionState} state`);\n      }\n\n      return this.privReceivingMessageQueue.dequeue();\n    };\n\n    this.close = reason => {\n      if (this.privWebsocketClient) {\n        if (this.privConnectionState !== ConnectionState.Disconnected) {\n          this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n        }\n      } else {\n        return Promise.resolve();\n      }\n\n      return this.privDisconnectDeferral.promise;\n    };\n\n    this.sendRawMessage = sendItem => {\n      try {\n        // indicates we are draining the queue and it came with no message;\n        if (!sendItem) {\n          return Promise.resolve();\n        }\n\n        this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message)); // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\n\n        if (this.isWebsocketOpen) {\n          this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\n        } else {\n          return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\n        }\n\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(`websocket send error: ${e}`);\n      }\n    };\n\n    this.onEvent = event => {\n      this.privConnectionEvents.onEvent(event);\n      Events.instance.onEvent(event);\n    };\n\n    if (!uri) {\n      throw new ArgumentNullError(\"uri\");\n    }\n\n    if (!messageFormatter) {\n      throw new ArgumentNullError(\"messageFormatter\");\n    }\n\n    this.proxyInfo = proxyInfo;\n    this.privConnectionEvents = new EventSource();\n    this.privConnectionId = connectionId;\n    this.privMessageFormatter = messageFormatter;\n    this.privConnectionState = ConnectionState.None;\n    this.privUri = uri;\n    this.privHeaders = headers;\n    this.privEnableCompression = enableCompression; // Add the connection ID to the headers\n\n    this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\n    this.privLastErrorReceived = \"\";\n  }\n\n  get state() {\n    return this.privConnectionState;\n  }\n\n  get events() {\n    return this.privConnectionEvents;\n  }\n\n  onClose(code, reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const closeReason = `Connection closed. ${code}: ${reason}`;\n      this.privConnectionState = ConnectionState.Disconnected;\n      this.privDisconnectDeferral.resolve();\n      yield this.privReceivingMessageQueue.drainAndDispose(pendingReceiveItem => {// TODO: Events for these ?\n        // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n      }, closeReason);\n      yield this.privSendMessageQueue.drainAndDispose(pendingSendItem => {\n        pendingSendItem.sendStatusDeferral.reject(closeReason);\n      }, closeReason);\n    });\n  }\n\n  processSendQueue() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const itemToSend = this.privSendMessageQueue.dequeue();\n      const sendItem = yield itemToSend; // indicates we are draining the queue and it came with no message;\n\n      if (!sendItem) {\n        return;\n      }\n\n      try {\n        yield this.sendRawMessage(sendItem);\n        sendItem.sendStatusDeferral.resolve();\n      } catch (sendError) {\n        sendItem.sendStatusDeferral.reject(sendError);\n      }\n\n      yield this.processSendQueue();\n    });\n  }\n\n  get isWebsocketOpen() {\n    return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\n  }\n\n}\nWebsocketMessageAdapter.forceNpmWebSocket = false;","map":{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string; };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string; },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\r\n\r\n                options.agent = checkAgent.GetAgent();\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<void> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<void> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n        const sendItem: ISendItem = await itemToSend;\r\n        // indicates we are draining the queue and it came with no message;\r\n        if (!sendItem) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await this.sendRawMessage(sendItem);\r\n            sendItem.sendStatusDeferral.resolve();\r\n        } catch (sendError) {\r\n            sendItem.sendStatusDeferral.reject(sendError);\r\n        }\r\n        await this.processSendQueue();\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}