{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioConfig, CancellationErrorCode, CancellationReason, Connection, ProfanityOption, PropertyCollection, PropertyId, SpeechTranslationConfig, TranslationRecognizer } from \"../Exports\";\nimport { ConversationImpl } from \"./Conversation\";\nimport { ConversationCommon, ConversationTranslationCanceledEventArgs } from \"./Exports\";\nexport var SpeechState;\n\n(function (SpeechState) {\n  SpeechState[SpeechState[\"Inactive\"] = 0] = \"Inactive\";\n  SpeechState[SpeechState[\"Connecting\"] = 1] = \"Connecting\";\n  SpeechState[SpeechState[\"Connected\"] = 2] = \"Connected\";\n})(SpeechState || (SpeechState = {}));\n/***\n * Join, leave or connect to a conversation.\n */\n\n\nexport class ConversationTranslator extends ConversationCommon {\n  constructor(audioConfig) {\n    super(audioConfig);\n    this.privIsDisposed = false;\n    this.privIsSpeaking = false;\n    this.privSpeechState = SpeechState.Inactive;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\n    this.privPlaceholderRegion = \"westus\";\n    /** Recognizer callbacks */\n\n    this.onSpeechConnected = e => {\n      this.privSpeechState = SpeechState.Connected;\n    };\n\n    this.onSpeechRecognizing = (r, e) => {// TODO: add support for getting recognitions from here if own speech\n    };\n\n    this.onSpeechSessionStarted = (r, e) => {\n      this.privSpeechState = SpeechState.Connected;\n    };\n\n    this.onSpeechSessionStopped = (r, e) => {\n      this.privSpeechState = SpeechState.Inactive;\n    };\n\n    this.privProperties = new PropertyCollection();\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n\n  get participants() {\n    var _a;\n\n    return (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.participants;\n  }\n\n  joinConversationAsync(conversation, nickname, param1, param2, param3) {\n    try {\n      if (typeof conversation === \"string\") {\n        Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n        if (!!this.privConversation) {\n          this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n        }\n\n        let lang = param1;\n\n        if (lang === undefined || lang === null || lang === \"\") {\n          lang = ConversationConnectionConfig.defaultLanguageCode;\n        } // create a placeholder config\n\n\n        this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(this.privPlaceholderKey, this.privPlaceholderRegion);\n        this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\n        this.privSpeechTranslationConfig.addTargetLanguage(lang);\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\n        const endpoint = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\n\n        if (endpoint) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\n        }\n\n        const speechEndpointHost = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\n\n        if (speechEndpointHost) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\n        } // join the conversation\n\n\n        this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\n        this.privConversation.conversationTranslator = this;\n        this.privConversation.joinConversationAsync(conversation, nickname, lang, result => {\n          if (!result) {\n            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\n          }\n\n          this.privSpeechTranslationConfig.authorizationToken = result; // connect to the ws\n\n          this.privConversation.startConversationAsync(() => {\n            this.handleCallback(param2, param3);\n          }, error => {\n            this.handleError(error, param3);\n          });\n        }, error => {\n          this.handleError(error, param3);\n        });\n      } else if (typeof conversation === \"object\") {\n        Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\")); // save the nickname\n\n        this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname); // ref the conversation object\n\n        this.privConversation = conversation; // ref the conversation translator object\n\n        this.privConversation.conversationTranslator = this;\n        Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n        Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n        this.privSpeechTranslationConfig = conversation.config;\n        this.handleCallback(param1, param2);\n      } else {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")), param2);\n      }\n    } catch (error) {\n      this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n    }\n  }\n  /**\n   * Leave the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  leaveConversationAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      // stop the speech websocket\n      yield this.cancelSpeech(); // stop the websocket\n\n      yield this.privConversation.endConversationImplAsync(); // https delete request\n\n      yield this.privConversation.deleteConversationImplAsync();\n      this.dispose();\n    }))(), cb, err);\n  }\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  sendTextMessageAsync(message, cb, err) {\n    var _a;\n\n    try {\n      Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n      Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n      (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.sendTextMessageAsync(message, cb, err);\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  }\n  /**\n   * Start speaking\n   * @param cb\n   * @param err\n   */\n\n\n  startTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n        Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n        if (!this.canSpeak) {\n          this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n        }\n\n        if (this.privTranslationRecognizer === undefined) {\n          yield this.connectTranslatorRecognizer();\n        }\n\n        yield this.startContinuousRecognition();\n        this.privIsSpeaking = true;\n      } catch (error) {\n        this.privIsSpeaking = false; // this.fireCancelEvent(error);\n\n        yield this.cancelSpeech();\n        throw error;\n      }\n    }))(), cb, err);\n  }\n  /**\n   * Stop speaking\n   * @param cb\n   * @param err\n   */\n\n\n  stopTranscribingAsync(cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!this.privIsSpeaking) {\n          // stop speech\n          yield this.cancelSpeech();\n          return;\n        } // stop the recognition but leave the websocket open\n\n\n        this.privIsSpeaking = false;\n        yield new Promise((resolve, reject) => {\n          var _a;\n\n          (_a = this.privTranslationRecognizer) === null || _a === void 0 ? void 0 : _a.stopContinuousRecognitionAsync(resolve, reject);\n        });\n      } catch (error) {\n        yield this.cancelSpeech();\n      }\n    }))(), cb, err);\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n\n  dispose(reason, success, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b;\n\n      if (this.isDisposed && !this.privIsSpeaking) {\n        return;\n      }\n\n      yield this.cancelSpeech();\n      this.privIsDisposed = true;\n      (_a = this.privSpeechTranslationConfig) === null || _a === void 0 ? void 0 : _a.close();\n      this.privSpeechRecognitionLanguage = undefined;\n      this.privProperties = undefined;\n      this.privAudioConfig = undefined;\n      this.privSpeechTranslationConfig = undefined;\n      (_b = this.privConversation) === null || _b === void 0 ? void 0 : _b.dispose();\n      this.privConversation = undefined;\n    }))(), success, err);\n  }\n  /**\n   * Cancel the speech websocket\n   */\n\n\n  cancelSpeech() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.privIsSpeaking = false;\n        (_a = this.privTranslationRecognizer) === null || _a === void 0 ? void 0 : _a.stopContinuousRecognitionAsync();\n        yield (_b = this.privTranslationRecognizerConnection) === null || _b === void 0 ? void 0 : _b.closeConnection();\n        this.privTranslationRecognizerConnection = undefined;\n        this.privTranslationRecognizer = undefined;\n        this.privSpeechState = SpeechState.Inactive;\n      } catch (e) {// ignore the error\n      }\n    });\n  }\n  /**\n   * Connect to the speech translation recognizer.\n   * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n   * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n   * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n   * @param cb\n   * @param err\n   */\n\n\n  connectTranslatorRecognizer() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.privAudioConfig === undefined) {\n          this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\n        } // clear the temp subscription key if it's a participant joining\n\n\n        if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) === this.privPlaceholderKey) {\n          this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\n        } // TODO\n\n\n        const token = encodeURIComponent(this.privConversation.room.token);\n        let endpointHost = this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\n        endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\n        const url = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\n        this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\n        this.privTranslationRecognizer = new TranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig);\n        this.privTranslationRecognizerConnection = Connection.fromRecognizer(this.privTranslationRecognizer);\n        this.privTranslationRecognizerConnection.connected = this.onSpeechConnected;\n        this.privTranslationRecognizerConnection.disconnected = this.onSpeechDisconnected;\n        this.privTranslationRecognizer.recognized = this.onSpeechRecognized;\n        this.privTranslationRecognizer.recognizing = this.onSpeechRecognizing;\n        this.privTranslationRecognizer.canceled = this.onSpeechCanceled;\n        this.privTranslationRecognizer.sessionStarted = this.onSpeechSessionStarted;\n        this.privTranslationRecognizer.sessionStopped = this.onSpeechSessionStopped;\n      } catch (error) {\n        yield this.cancelSpeech();\n        throw error;\n      }\n    });\n  }\n  /**\n   * Handle the start speaking request\n   * @param cb\n   * @param err\n   */\n\n\n  startContinuousRecognition() {\n    return new Promise((resolve, reject) => {\n      this.privTranslationRecognizer.startContinuousRecognitionAsync(resolve, reject);\n    });\n  }\n\n  onSpeechDisconnected(e) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privSpeechState = SpeechState.Inactive;\n      yield this.cancelSpeech();\n    });\n  }\n\n  onSpeechRecognized(r, e) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: add support for getting recognitions from here if own speech\n      // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\n      if ((_a = e.result) === null || _a === void 0 ? void 0 : _a.errorDetails) {\n        yield this.cancelSpeech(); // TODO: format the error message contained in 'errorDetails'\n\n        this.fireCancelEvent(e.result.errorDetails);\n      }\n    });\n  }\n\n  onSpeechCanceled(r, e) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privSpeechState !== SpeechState.Inactive) {\n        try {\n          yield this.cancelSpeech();\n        } catch (error) {\n          this.privSpeechState = SpeechState.Inactive;\n        }\n      }\n    });\n  }\n  /**\n   * Fire a cancel event\n   * @param error\n   */\n\n\n  fireCancelEvent(error) {\n    var _a, _b, _c;\n\n    try {\n      if (!!this.canceled) {\n        const cancelEvent = new ConversationTranslationCanceledEventArgs((_a = error === null || error === void 0 ? void 0 : error.reason) !== null && _a !== void 0 ? _a : CancellationReason.Error, (_b = error === null || error === void 0 ? void 0 : error.errorDetails) !== null && _b !== void 0 ? _b : error, (_c = error === null || error === void 0 ? void 0 : error.errorCode) !== null && _c !== void 0 ? _c : CancellationErrorCode.RuntimeError, undefined, error === null || error === void 0 ? void 0 : error.sessionId);\n        this.canceled(this, cancelEvent);\n      }\n    } catch (e) {//\n    }\n  }\n\n  get canSpeak() {\n    // is there a Conversation websocket available\n    if (!this.privConversation.isConnected) {\n      return false;\n    } // is the user already speaking\n\n\n    if (this.privIsSpeaking || this.privSpeechState === SpeechState.Connected || this.privSpeechState === SpeechState.Connecting) {\n      return false;\n    } // is the user muted\n\n\n    if (this.privConversation.isMutedByHost) {\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n/***\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privTranslationRecognizerConnection: Connection;\r\n    private privIsDisposed: boolean = false;\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n    private privIsSpeaking: boolean = false;\r\n    private privConversation: ConversationImpl;\r\n    private privSpeechState: SpeechState = SpeechState.Inactive;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n    private privPlaceholderRegion: string = \"westus\";\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: any, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") { lang = ConversationConnectionConfig.defaultLanguageCode; }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string) => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            (() => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any) => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation?.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                if (this.privTranslationRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                // this.fireCancelEvent(error);\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privTranslationRecognizer?.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig?.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation?.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            this.privTranslationRecognizer?.stopContinuousRecognitionAsync();\r\n            await this.privTranslationRecognizerConnection?.closeConnection();\r\n            this.privTranslationRecognizerConnection = undefined;\r\n            this.privTranslationRecognizer = undefined;\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url: string = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privTranslationRecognizer = new TranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig);\r\n            this.privTranslationRecognizerConnection = Connection.fromRecognizer(this.privTranslationRecognizer);\r\n            this.privTranslationRecognizerConnection.connected = this.onSpeechConnected;\r\n            this.privTranslationRecognizerConnection.disconnected = this.onSpeechDisconnected;\r\n            this.privTranslationRecognizer.recognized = this.onSpeechRecognized;\r\n            this.privTranslationRecognizer.recognizing = this.onSpeechRecognizing;\r\n            this.privTranslationRecognizer.canceled = this.onSpeechCanceled;\r\n            this.privTranslationRecognizer.sessionStarted = this.onSpeechSessionStarted;\r\n            this.privTranslationRecognizer.sessionStopped = this.onSpeechSessionStopped;\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privTranslationRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n\r\n    /** Recognizer callbacks */\r\n    private onSpeechConnected = (e: ConnectionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    private async onSpeechDisconnected(e: ConnectionEventArgs): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    private async onSpeechRecognized(r: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> {\r\n        // TODO: add support for getting recognitions from here if own speech\r\n\r\n        // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n        if (e.result?.errorDetails) {\r\n            await this.cancelSpeech();\r\n            // TODO: format the error message contained in 'errorDetails'\r\n            this.fireCancelEvent(e.result.errorDetails);\r\n        }\r\n    }\r\n\r\n    private onSpeechRecognizing = (r: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\r\n        // TODO: add support for getting recognitions from here if own speech\r\n    }\r\n\r\n    private async onSpeechCanceled(r: TranslationRecognizer, e: TranslationRecognitionCanceledEventArgs): Promise<void> {\r\n        if (this.privSpeechState !== SpeechState.Inactive) {\r\n            try {\r\n                await this.cancelSpeech();\r\n            } catch (error) {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onSpeechSessionStarted = (r: Recognizer, e: SessionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Connected;\r\n\r\n    }\r\n\r\n    private onSpeechSessionStopped = (r: Recognizer, e: SessionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: any): void {\r\n        try {\r\n            if (!!this.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    error?.reason ?? CancellationReason.Error,\r\n                    error?.errorDetails ?? error,\r\n                    error?.errorCode ?? CancellationErrorCode.RuntimeError,\r\n                    undefined,\r\n                    error?.sessionId);\r\n\r\n                this.canceled(this, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available\r\n        if (!this.privConversation.isConnected) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privSpeechState === SpeechState.Connected || this.privSpeechState === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}