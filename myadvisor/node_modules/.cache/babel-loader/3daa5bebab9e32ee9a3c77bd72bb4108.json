{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentProfile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\";\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\";\n\nconst StudentProfile = props => {\n  _s();\n\n  const [uploaded, setUploaded] = useState(true); // Boolean value to indicate whether or not a transcript has been uploaded\n\n  const [processed, setProcessed] = useState(false); // Boolean value to indicate whether or not the recommended courses have been finished generating\n  // Function to refresh page once a transcript has been uploaded\n\n  function uploadedHandler() {\n    window.location.reload();\n  }\n\n  var details = PullDetails(localStorage.getItem(\"username\")); // Get student details from database\n\n  var studentCourses = PullStudentCourses(localStorage.getItem(\"username\")); // Get student courses from database\n\n  var programmes = PullProgrammes(); // Get list of all degree programmes from database\n\n  console.log(\"studentcourse \" + JSON.stringify(studentCourses));\n  console.log(\"before \" + props.credits);\n  useEffect(() => {\n    props.setCreditsCompleted(details.credits);\n    props.setDisplay(true); // Show the \"Begin Advising\" button on the sidebar\n\n    props.setHidden(false); // Unhide the sidebar\n\n    props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n\n    if (!processed) {\n      // If the student's transcript hasn't been processed as yet\n      if (details.gpa < 2.0 && details.gpa != 0) {\n        // If the student's gpa is less than 2 and not 0 (0 means their GPA hasn't been calculated by UWI yet)\n        props.setAcWarning(true); // Indicate that they are on academic warning\n      }\n\n      if (details.length === 0) {\n        // If nothing was pulled from the student's details\n        setUploaded(false); // Indicate that the user has not uploaded their transcript\n\n        props.setDegProg(0); // Set degree progress to 0%\n\n        props.setCreds(93); // Set remaining credits left for degree to 93\n      } else {\n        setUploaded(true); // Indicate that the user has uploaded their transcript\n\n        props.setDegProg(details.progress); // Set degree progress percentage\n\n        props.setCreds(93 - details.credits); // Set credits left for degree\n      }\n\n      var studentProgramme = props.programme; // Get student programme that they selected on Start page\n\n      if (studentProgramme === null) {\n        // If student programme data has been lost from state\n        studentProgramme = localStorage.getItem(\"programme\");\n      } // Iterate through programmes list\n\n\n      for (var i = 0; i < programmes.length; i++) {\n        if (programmes[i].name == studentProgramme) {\n          // If student programme is in programmes list\n          var programmeId = programmes[i].id;\n        }\n      }\n\n      if (programmeId) {\n        determineCourses(programmeId);\n      } // Iterate through student courses list\n\n\n      for (var j = 0; j < studentCourses.length; j++) {\n        if (studentCourses[j].grade == \"IP\") {\n          //props.setCreds(props.credits - studentCourses[j].credits);\n          console.log(\"course credits\" + studentCourses[j].credits);\n          console.log(studentCourses[j]);\n        }\n      }\n    }\n  });\n  console.log(\"after \" + props.credits); // Function to fetch courses that are associated with a given programme\n\n  async function getProgrammeCourses(id) {\n    try {\n      const {\n        data: response\n      } = await axios.get(`/programmes/offered-courses/${id}`); //use data destructuring to get data from the promise object\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  } // Grades which do not give credits\n\n\n  let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\", \"FMP\"]; // Function to split courses by semester and level\n\n  function splitBySem(coreRes, courses) {\n    var semesterArr = [[]]; // Iterate through programme courses\n\n    for (var key in coreRes) {\n      // Iterate through student courses\n      for (var i = 0; i < courses.length; i++) {\n        if (key === courses[i].courseCode) {\n          // If programme course is in courses array\n          if (courses[i].semester === \"1\" && courses[i].level === \"I\") {\n            // If Year 1, Semester 1 course\n            if (!semesterArr[0]) {\n              // Initialise 2D array\n              semesterArr[0] = [];\n            }\n\n            semesterArr[0].push({\n              // Push course code and student grade into array\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (courses[i].semester === \"2\" && courses[i].level === \"I\") {\n            if (!semesterArr[1]) {\n              semesterArr[1] = [];\n            }\n\n            semesterArr[1].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (courses[i].semester === \"1\" && courses[i].level === \"II\") {\n            if (!semesterArr[2]) {\n              semesterArr[2] = [];\n            }\n\n            semesterArr[2].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (courses[i].semester === \"2\" && courses[i].level === \"II\") {\n            if (!semesterArr[3]) {\n              semesterArr[3] = [];\n            }\n\n            semesterArr[3].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (courses[i].semester === \"1\" && courses[i].level === \"III\") {\n            if (!semesterArr[4]) {\n              semesterArr[4] = [];\n            }\n\n            semesterArr[4].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n\n          if (courses[i].semester === \"2\" && courses[i].level === \"III\") {\n            if (!semesterArr[5]) {\n              semesterArr[5] = [];\n            }\n\n            semesterArr[5].push({\n              courseCode: key,\n              grade: coreRes[key]\n            });\n            break;\n          }\n        }\n      }\n    }\n\n    return semesterArr;\n  } // Function to get all core courses from programme courses\n\n\n  function getCoreCourses(courses) {\n    var core = [];\n\n    for (var i = 0; i < courses.length; i++) {\n      if (courses[i].type === \"Core\") {\n        core.push(courses[i]);\n      }\n    }\n\n    return core;\n  }\n\n  function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n    var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n\n    var coreY1S2 = coreSemesterArr[1];\n    var coreY2S1 = coreSemesterArr[2];\n    var coreY2S2 = coreSemesterArr[3];\n    var coreY3S1 = coreSemesterArr[4];\n    var coreY3S2 = coreSemesterArr[5];\n    var recCourses = courses;\n    var key;\n\n    if (year === 1 && currentSem === 1) {\n      //If student is in Year 1 Semester 1\n      for (key in coreY1S1) {\n        // Iterate core courses offered in year 1 semester 1\n        if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n          // If course has not been done before or student failed it in the past\n          if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n            recCourses.push(coreY1S1[key].courseCode); // Add course to recommended course array\n        }\n      }\n    }\n\n    if (year === 1 && currentSem === 2) {\n      for (key in coreY1S2) {\n        if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n          if (!courses.includes(coreY1S2[key].courseCode)) recCourses.push(coreY1S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 1) {\n      for (key in coreY2S1) {\n        if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n          if (!courses.includes(coreY2S1[key].courseCode)) recCourses.push(coreY2S1[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S1) {\n        // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n        if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n          if (!courses.includes(coreY1S1[key].courseCode)) recCourses.push(coreY1S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 2) {\n      for (key in coreY2S2) {\n        if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n          if (!courses.includes(coreY2S2[key].courseCode)) recCourses.push(coreY2S2[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S2) {\n        if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n          if (!courses.includes(coreY1S2[key].courseCode)) recCourses.push(coreY1S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 1) {\n      for (key in coreY3S1) {\n        if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n          if (!courses.includes(coreY3S1[key].courseCode)) recCourses.push(coreY3S1[key].courseCode);\n        }\n      }\n\n      for (key in coreY2S1) {\n        if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n          if (!courses.includes(coreY2S1[key].courseCode)) recCourses.push(coreY2S1[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S1) {\n        if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n          if (!courses.includes(coreY1S1[key].courseCode)) recCourses.push(coreY1S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 2) {\n      for (key in coreY3S2) {\n        if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n          if (!courses.includes(coreY3S2[key].courseCode)) recCourses.push(coreY3S2[key].courseCode);\n        }\n      }\n\n      for (key in coreY2S2) {\n        if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n          if (!courses.includes(coreY2S2[key].courseCode)) recCourses.push(coreY2S2[key].courseCode);\n        }\n      }\n\n      for (key in coreY1S2) {\n        if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n          if (!courses.includes(coreY1S2[key].courseCode)) recCourses.push(coreY1S2[key].courseCode);\n        }\n      }\n    }\n\n    return recCourses;\n  } // Function to remove courses from recommended courses list if the student does not satisfy the prerequisites\n\n\n  function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n    var index; // Iterate through programme courses\n\n    for (var i = 0; i < courses.length; i++) {\n      if (recCourses.includes(courses[i].courseCode)) {\n        // If course is being recommended\n        var prereq = courses[i].prerequisites; // Store course prerequisites\n\n        if (prereq.length === 8) {\n          // If course only has 1 prerequisite\n          if (!(studentCourses[prereq] === \"P\")) {\n            // If the student didn't pass the course\n            index = recCourses.indexOf(courses[i].courseCode); // Find index of course in recCourses array\n\n            if (index > -1) {\n              // If index was found\n              recCourses.splice(index, 1); // Remove course from recCourses array\n            }\n          }\n        }\n\n        if (prereq.length > 8) {\n          // If course has 2 prerequisites or an alternative prerequisite\n          var prereq1 = prereq.slice(0, 8); // Get 1st prereq\n\n          var prereq2 = prereq.slice(-8); // Get 2nd prereq\n\n          if (prereq.charAt(9) === \"|\") {\n            // If the prereqs have OR condition\n            if (!(studentCourses[prereq1] === \"P\" || studentCourses[prereq2] === \"P\")) {\n              index = recCourses.indexOf(courses[i].courseCode);\n\n              if (index > -1) {\n                recCourses.splice(index, 1);\n              }\n            }\n          }\n\n          if (prereq.charAt(9) === \"&\") {\n            // If the prereqs have AND condition\n            if (!(studentCourses[prereq1] === \"P\" && studentCourses[prereq2] === \"P\")) {\n              index = recCourses.indexOf(courses[i].courseCode);\n\n              if (index > -1) {\n                recCourses.splice(index, 1);\n              }\n            }\n          }\n        }\n      }\n    }\n  } // Function to indicate is a student passed, failed, didn't do a course or is in progress\n\n\n  function determineStudentCourses(core) {\n    var coreRes = {};\n\n    for (var i = 0; i < core.length; i++) {\n      for (var j = 0; j < studentCourses.length; j++) {\n        if (studentCourses[j].courseCode === core[i].courseCode && studentCourses[j].grade === \"IP\") {\n          coreRes[`${core[i].courseCode}`] = \"IP\";\n        } else if (studentCourses[j].courseCode === core[i].courseCode && !noCreditGrade.includes(studentCourses[j].grade)) {\n          coreRes[`${core[i].courseCode}`] = \"P\";\n        } else if (studentCourses[j].courseCode === core[i].courseCode && noCreditGrade.includes(studentCourses[j].grade)) {\n          coreRes[`${core[i].courseCode}`] = \"F\";\n        } else {\n          if (!coreRes[`${core[i].courseCode}`]) {\n            coreRes[`${core[i].courseCode}`] = \"N\";\n          }\n        }\n      }\n    }\n\n    return coreRes;\n  } // Function to determine the recommended courses\n\n\n  async function determineCourses(programmeId) {\n    let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n\n    let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n\n    let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n\n    let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n\n    let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n\n    let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n\n    var programmeCourses = {}; // Dictionary to store all programme courses\n\n    var semesterArr = []; // Array to store courses by semester\n\n    var coreSemesterArr = []; // Array to store core courses by semester\n\n    var today = new Date(); // Today's date\n\n    var currentSem; // Value to store current semester\n\n    var courses = await getProgrammeCourses(programmeId);\n\n    for (var i = 0; i < courses.length; i++) {\n      // Initialise Courses for Degree using their Level and Semester\n      if (courses[i].level === \"I\") {\n        if (courses[i].semester === \"1\") {\n          Y1S1[courses[i].courseCode] = \"N\";\n        }\n\n        if (courses[i].semester === \"2\") {\n          Y1S2[courses[i].courseCode] = \"N\";\n        }\n      }\n\n      if (courses[i].level === \"II\") {\n        if (courses[i].semester === \"1\") {\n          Y2S1[courses[i].courseCode] = \"N\";\n        }\n\n        if (courses[i].semester === \"2\") {\n          Y2S2[courses[i].courseCode] = \"N\";\n        }\n      }\n\n      if (courses[i].level === \"III\") {\n        if (courses[i].semester === \"1\") {\n          Y3S1[courses[i].courseCode] = \"N\";\n        }\n\n        if (courses[i].semester === \"2\") {\n          Y3S2[courses[i].courseCode] = \"N\";\n        }\n      }\n    }\n\n    programmeCourses = determineStudentCourses(courses); // Determine what courses a student failed, passed, didnt do or is in progress\n    //console.log(\"courses \"+JSON.stringify(programmeCourses));\n\n    semesterArr = splitBySem(programmeCourses, courses); // Split courses by semester\n\n    var coreCourses = getCoreCourses(courses); // Get core courses\n\n    coreSemesterArr = splitBySem(programmeCourses, coreCourses); // Split core courses by semester\n\n    var recCourses = [];\n    var counter = 0;\n    var year = 1;\n    var sem = 1;\n    var key;\n    Y1S1 = semesterArr[0]; //console.log(programmeCourses);\n\n    Y1S2 = semesterArr[1];\n    Y2S1 = semesterArr[2];\n    Y2S2 = semesterArr[3];\n    Y3S1 = semesterArr[4];\n    Y3S2 = semesterArr[5];\n    counter = 0; // If a student passed, failed or the course is in progress, assume that the student is in the next semester\n\n    for (key in Y1S1) {\n      if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n        counter += 1;\n      }\n    }\n\n    if (counter > 1) {\n      sem = 2;\n    }\n\n    counter = 0;\n\n    if (year === 1 && sem === 2) {\n      for (key in Y1S2) {\n        if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 1;\n        year = 2;\n      }\n    }\n\n    counter = 0;\n\n    if (year === 2 && sem === 1) {\n      for (key in Y2S1) {\n        if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 2;\n      }\n    }\n\n    counter = 0;\n\n    if (year === 2 && sem === 2) {\n      for (key in Y2S2) {\n        if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 1;\n        year = 3;\n      }\n    }\n\n    counter = 0;\n\n    if (year === 3 && sem === 1) {\n      for (key in Y3S1) {\n        if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n          counter += 1;\n        }\n      }\n\n      if (counter > 1) {\n        sem = 2;\n      }\n    }\n\n    if (today.getMonth() < 4) {\n      // If the date is currently between January and April\n      currentSem = 2;\n    } // else if (today.getMonth() < 6) { // If the date is currently between May and July\n    //     currentSem = 1;\n    // }\n    else {\n        // If the date is currently between August and December\n        currentSem = 1;\n      } // Recommended courses based on current year and semester if the student has not done the course yet\n\n\n    if (year === 1 && currentSem === 1) {\n      for (key in Y1S1) {\n        if (Y1S1[key].grade === \"N\") {\n          recCourses.push(Y1S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 1 && currentSem === 2) {\n      for (key in Y1S2) {\n        if (Y1S2[key].grade === \"N\") {\n          recCourses.push(Y1S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 1) {\n      for (key in Y2S1) {\n        if (Y2S1[key].grade === \"N\") {\n          recCourses.push(Y2S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 2 && currentSem === 2) {\n      for (key in Y2S2) {\n        if (Y2S2[key].grade === \"N\") {\n          recCourses.push(Y2S2[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 1) {\n      for (key in Y3S1) {\n        if (Y3S1[key].grade === \"N\") {\n          recCourses.push(Y3S1[key].courseCode);\n        }\n      }\n    }\n\n    if (year === 3 && currentSem === 2) {\n      for (key in Y3S2) {\n        if (Y3S2[key].grade === \"N\") {\n          recCourses.push(Y3S2[key].courseCode);\n        }\n      }\n    }\n\n    recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n    removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n    props.setRecommended(recCourses);\n    props.setLevel(year);\n\n    if (props.recCourses !== null) {\n      props.setLoad(false);\n    }\n\n    setProcessed(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header blue-txt\",\n            children: \"Student Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12\",\n              children: uploaded ? /*#__PURE__*/_jsxDEV(DetailsCard, {\n                details: details,\n                uploadedHandler: uploadedHandler,\n                setProg: props.setProg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(NoTranscript, {\n                uploadedHandler: uploadedHandler,\n                setProg: props.setProg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header blue-txt\",\n            children: \"Courses Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 21\n          }, this), uploaded ? /*#__PURE__*/_jsxDEV(StudentCoursesCard, {\n            courses: studentCourses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card details-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                class: \"table table-borderless table-striped\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    class: \"d-flex blue-txt\",\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-1 level-cell\",\n                      children: \"Level\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 551,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-2 code-cell\",\n                      children: \"Course Code\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 552,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-8 title-cell\",\n                      children: \"Course Title\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 553,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      class: \"col-1 credit-cell\",\n                      children: \"Grade\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 554,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 550,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 549,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StudentProfile, \"jwjbBymSM1qBPrgAvJH14ocXtc4=\");\n\n_c = StudentProfile;\nexport default StudentProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentProfile\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentProfile.js"],"names":["React","Component","useEffect","useState","DetailsCard","NoTranscript","PullDetails","PullStudentCourses","PullProgrammes","StudentCoursesCard","axios","StudentProfile","props","uploaded","setUploaded","processed","setProcessed","uploadedHandler","window","location","reload","details","localStorage","getItem","studentCourses","programmes","console","log","JSON","stringify","credits","setCreditsCompleted","setDisplay","setHidden","setShowBotButtons","gpa","setAcWarning","length","setDegProg","setCreds","progress","studentProgramme","programme","i","name","programmeId","id","determineCourses","j","grade","getProgrammeCourses","data","response","get","error","noCreditGrade","splitBySem","coreRes","courses","semesterArr","key","courseCode","semester","level","push","getCoreCourses","core","type","recommendCoreCourses","coreSemesterArr","year","currentSem","coreY1S1","coreY1S2","coreY2S1","coreY2S2","coreY3S1","coreY3S2","recCourses","includes","removeCoursesNoPrereq","index","prereq","prerequisites","indexOf","splice","prereq1","slice","prereq2","charAt","determineStudentCourses","Y1S1","Y1S2","Y2S1","Y2S2","Y3S1","Y3S2","programmeCourses","today","Date","coreCourses","counter","sem","getMonth","setRecommended","setLevel","setLoad","setProg"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\"\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\"\n\nconst StudentProfile = (props) => {\n\n    const [uploaded, setUploaded] = useState(true); // Boolean value to indicate whether or not a transcript has been uploaded\n    const [processed, setProcessed] = useState(false); // Boolean value to indicate whether or not the recommended courses have been finished generating\n    \n\n    // Function to refresh page once a transcript has been uploaded\n    function uploadedHandler() {\n        window.location.reload();\n    }\n\n    var details = PullDetails(localStorage.getItem(\"username\")); // Get student details from database\n    var studentCourses = PullStudentCourses(localStorage.getItem(\"username\")); // Get student courses from database\n    var programmes = PullProgrammes(); // Get list of all degree programmes from database\n    console.log(\"studentcourse \"+ JSON.stringify(studentCourses));\n    console.log(\"before \"+props.credits);\n \n    useEffect(() => {\n        props.setCreditsCompleted(details.credits);\n        props.setDisplay(true); // Show the \"Begin Advising\" button on the sidebar\n        props.setHidden(false); // Unhide the sidebar\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        if (!processed) { // If the student's transcript hasn't been processed as yet\n            if (details.gpa < 2.0 && details.gpa != 0) { // If the student's gpa is less than 2 and not 0 (0 means their GPA hasn't been calculated by UWI yet)\n                props.setAcWarning(true); // Indicate that they are on academic warning\n            }\n            if (details.length === 0) { // If nothing was pulled from the student's details\n                setUploaded(false); // Indicate that the user has not uploaded their transcript\n                props.setDegProg(0); // Set degree progress to 0%\n                props.setCreds(93); // Set remaining credits left for degree to 93\n            }\n            else {\n                setUploaded(true); // Indicate that the user has uploaded their transcript\n                props.setDegProg(details.progress); // Set degree progress percentage\n                props.setCreds(93 - details.credits); // Set credits left for degree\n            }\n\n            var studentProgramme = props.programme; // Get student programme that they selected on Start page\n\n            if (studentProgramme === null) { // If student programme data has been lost from state\n                studentProgramme = localStorage.getItem(\"programme\");\n            }\n\n            // Iterate through programmes list\n            for (var i=0; i<programmes.length; i++) {\n                if (programmes[i].name == studentProgramme) { // If student programme is in programmes list\n                    var programmeId = programmes[i].id;\n                }\n            }\n            if (programmeId) { \n                determineCourses(programmeId)\n            }\n\n            // Iterate through student courses list\n            for(var j=0; j<studentCourses.length; j++){\n                if(studentCourses[j].grade==\"IP\"){\n                    //props.setCreds(props.credits - studentCourses[j].credits);\n                    console.log(\"course credits\" + studentCourses[j].credits);\n                    console.log(studentCourses[j])\n                }\n            }\n        }\n    })\n    console.log(\"after \"+props.credits);\n\n    // Function to fetch courses that are associated with a given programme\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    // Grades which do not give credits\n    let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\", \"FMP\"]\n\n    // Function to split courses by semester and level\n    function splitBySem(coreRes, courses) {\n        var semesterArr = [[]];\n\n        // Iterate through programme courses\n        for (var key in coreRes) {\n\n            // Iterate through student courses\n            for (var i=0; i<courses.length; i++) {\n                if (key === courses[i].courseCode) { // If programme course is in courses array\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"I\")) { // If Year 1, Semester 1 course\n                        if (!semesterArr[0]) { // Initialise 2D array\n                            semesterArr[0] = [];\n                        }\n                        semesterArr[0].push({ // Push course code and student grade into array\n                            courseCode: key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"I\")) {\n                        if (!semesterArr[1]) {\n                            semesterArr[1] = [];\n                        }\n                        semesterArr[1].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[2]) {\n                            semesterArr[2] = [];\n                        }\n                        semesterArr[2].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[3]) {\n                            semesterArr[3] = [];\n                        }\n                        semesterArr[3].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[4]) {\n                            semesterArr[4] = [];\n                        }\n                        semesterArr[4].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[5]) {\n                            semesterArr[5] = [];\n                        }\n                        semesterArr[5].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n        return semesterArr;\n    }\n\n    // Function to get all core courses from programme courses\n    function getCoreCourses(courses) {\n        var core = [];\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\") {\n                core.push(courses[i]);\n            }\n        }\n        return core;\n    }\n\n    function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n        var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n        var coreY1S2 = coreSemesterArr[1];\n        var coreY2S1 = coreSemesterArr[2];\n        var coreY2S2 = coreSemesterArr[3];\n        var coreY3S1 = coreSemesterArr[4];\n        var coreY3S2 = coreSemesterArr[5];\n        var recCourses = courses;\n        var key;\n\n        if (year === 1 && currentSem === 1) { //If student is in Year 1 Semester 1\n            for (key in coreY1S1) { // Iterate core courses offered in year 1 semester 1\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") { // If course has not been done before or student failed it in the past\n                    if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n                        recCourses.push(coreY1S1[key].courseCode) // Add course to recommended course array\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) { // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in coreY3S1) {\n                if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S1[key].courseCode))\n                        recCourses.push(coreY3S1[key].courseCode)\n                }\n            }\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) {\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in coreY3S2) {\n                if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S2[key].courseCode))\n                        recCourses.push(coreY3S2[key].courseCode)\n                }\n            }\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        return recCourses;\n    }\n\n    // Function to remove courses from recommended courses list if the student does not satisfy the prerequisites\n    function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n        var index;\n\n        // Iterate through programme courses\n        for (var i=0; i<courses.length; i++) {\n            if(recCourses.includes(courses[i].courseCode)) { // If course is being recommended\n                var prereq = courses[i].prerequisites; // Store course prerequisites\n                if (prereq.length === 8) { // If course only has 1 prerequisite\n                    if (!(studentCourses[prereq] === \"P\")) { // If the student didn't pass the course\n                        index = recCourses.indexOf(courses[i].courseCode); // Find index of course in recCourses array\n                            if (index > -1) { // If index was found\n                                recCourses.splice(index, 1); // Remove course from recCourses array\n                            }\n                    }\n                }\n                if (prereq.length > 8) { // If course has 2 prerequisites or an alternative prerequisite\n                    var prereq1 = prereq.slice(0, 8); // Get 1st prereq\n                    var prereq2 = prereq.slice(-8); // Get 2nd prereq\n                    if (prereq.charAt(9) === \"|\") { // If the prereqs have OR condition\n                        if (!((studentCourses[prereq1] === \"P\") || (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                    if (prereq.charAt(9) === \"&\") { // If the prereqs have AND condition\n                        if (!((studentCourses[prereq1] === \"P\") && (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Function to indicate is a student passed, failed, didn't do a course or is in progress\n    function determineStudentCourses(core) {\n        var coreRes = {};\n        for (var i=0; i<core.length; i++){\n            for (var j=0; j<studentCourses.length; j++) {\n                if ((studentCourses[j].courseCode === core[i].courseCode) && (studentCourses[j].grade === \"IP\")){\n                    coreRes[`${core[i].courseCode}`] = \"IP\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && !(noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"P\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && (noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"F\";\n                }\n                else {\n                    if (!coreRes[`${core[i].courseCode}`]) {\n                        coreRes[`${core[i].courseCode}`] = \"N\";\n                    }\n                }\n            }\n        }\n        return coreRes;\n    }\n\n    // Function to determine the recommended courses\n    async function determineCourses(programmeId){\n        \n        let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n        let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n        let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n        let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n        let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n        let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n        var programmeCourses = {}; // Dictionary to store all programme courses\n        var semesterArr = []; // Array to store courses by semester\n        var coreSemesterArr = []; // Array to store core courses by semester\n        var today = new Date(); // Today's date\n        var currentSem; // Value to store current semester\n\n        var courses = await getProgrammeCourses(programmeId);\n\n        \n        for (var i=0; i<courses.length; i++) { // Initialise Courses for Degree using their Level and Semester\n            if (courses[i].level === \"I\") {\n                if (courses[i].semester === \"1\") {\n                    Y1S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y1S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"II\") {\n                if (courses[i].semester === \"1\") {\n                    Y2S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y2S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"III\") {\n                if (courses[i].semester === \"1\") {\n                    Y3S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y3S2[courses[i].courseCode] = \"N\";\n                }\n            }\n        }\n\n        programmeCourses = determineStudentCourses(courses); // Determine what courses a student failed, passed, didnt do or is in progress\n        //console.log(\"courses \"+JSON.stringify(programmeCourses));\n        semesterArr = splitBySem(programmeCourses, courses); // Split courses by semester\n        var coreCourses = getCoreCourses(courses); // Get core courses\n        coreSemesterArr = splitBySem(programmeCourses, coreCourses); // Split core courses by semester\n\n        var recCourses = [];\n        var counter = 0;\n        var year = 1;\n        var sem = 1;\n        var key;\n\n\n        Y1S1 = semesterArr[0];\n        //console.log(programmeCourses);\n        Y1S2 = semesterArr[1];\n        Y2S1 = semesterArr[2];\n        Y2S2 = semesterArr[3];\n        Y3S1 = semesterArr[4];\n        Y3S2 = semesterArr[5];\n\n        counter = 0;\n        // If a student passed, failed or the course is in progress, assume that the student is in the next semester\n        for (key in Y1S1) {\n            if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n                counter+=1;\n            }\n        }\n        if (counter > 1) {\n            sem = 2;\n        }\n        counter = 0;\n        if (year === 1 && sem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 3;\n            }\n        }\n        counter = 0;\n        if (year === 3 && sem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n\n        if (today.getMonth() < 4) { // If the date is currently between January and April\n            currentSem = 2;\n        }\n        // else if (today.getMonth() < 6) { // If the date is currently between May and July\n        //     currentSem = 1;\n        // }\n        else { // If the date is currently between August and December\n            currentSem = 1;\n        }\n\n        // Recommended courses based on current year and semester if the student has not done the course yet\n        if (year === 1 && currentSem === 1) {\n            for (key in Y1S1) {\n                if (Y1S1[key].grade === \"N\") {\n                    recCourses.push(Y1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"N\") {\n                    recCourses.push(Y1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"N\") {\n                    recCourses.push(Y2S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"N\") {\n                    recCourses.push(Y2S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"N\") {\n                    recCourses.push(Y3S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in Y3S2) {\n                if (Y3S2[key].grade === \"N\") {\n                    recCourses.push(Y3S2[key].courseCode)\n                }\n            }\n        }\n        \n        recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n        removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n        props.setRecommended(recCourses);\n        props.setLevel(year);\n        if (props.recCourses !== null) {\n            props.setLoad(false);\n        }\n        setProcessed(true);\n    }\n\n \n\n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                <div className=\"row\">\n                        <div className=\"col-sm-10\">\n                    <p className=\"header blue-txt\">Student Details</p>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            { uploaded ? (\n                                <DetailsCard details={details} uploadedHandler={uploadedHandler} setProg={props.setProg}></DetailsCard> ) : (\n                                <NoTranscript uploadedHandler={uploadedHandler} setProg={props.setProg}></NoTranscript>\n                            ) }\n                        </div>\n                    </div>\n                    <p className=\"header blue-txt\">Courses Completed</p>\n                     { uploaded ? (\n                        <StudentCoursesCard courses={studentCourses}></StudentCoursesCard> ) : (\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <table class=\"table table-borderless table-striped\">\n                                    <thead>\n                                        <tr class=\"d-flex blue-txt\">\n                                            <th class=\"col-1 level-cell\">Level</th>\n                                            <th class=\"col-2 code-cell\">Course Code</th>\n                                            <th class=\"col-8 title-cell\">Course Title</th>\n                                            <th class=\"col-1 credit-cell\">Grade</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        )\n                     } \n                     </div>\n                     </div>                 \n                </div>\n        </div>\n    );\n\n}\n\nexport default StudentProfile;\n"]},"metadata":{},"sourceType":"module"}