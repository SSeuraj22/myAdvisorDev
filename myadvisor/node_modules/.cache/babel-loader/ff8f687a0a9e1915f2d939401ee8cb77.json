{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst DataTypes = require('../../data-types');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, {\n      showWarnings: false,\n      ...options\n    });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await connection.query(this.sql, parameters);\n      complete(); // Log warnings if we've got them.\n\n      if (showWarnings && results && results.warningStatus > 0) {\n        await this.logWarnings(results);\n      }\n    } catch (err) {\n      // MariaDB automatically rolls-back transactions in the event of a\n      // deadlock.\n      //\n      // Even though we shouldn't need to do this, we initiate a manual\n      // rollback. Without the rollback, the next transaction using the\n      // connection seems to retain properties of the previous transaction\n      // (e.g. isolation level) and not work as expected.\n      //\n      // For example (in our tests), a follow-up READ_COMMITTED transaction\n      // doesn't work as expected unless we explicitly rollback the\n      // transaction: it would fail to read a value inserted outside of that\n      // transaction.\n      if (options.transaction && err.errno === 1213) {\n        try {\n          await options.transaction.rollback();\n        } catch (err) {// Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      complete();\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = {\n              [pkField]: startId + i\n            };\n          }\n\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(row[modelField.fieldName]) : null;\n\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);\n          }\n\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n    return results;\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let fields = {};\n          let message = 'Validation error';\n          const values = match ? match[1].split('-') : undefined;\n          const fieldKey = match ? match[2] : undefined;\n          const fieldVal = match ? match[1] : undefined;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : '`';\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n            table: match ? match[4] : undefined,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n            index: match ? match[2] : undefined,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n    return result;\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/node_modules/sequelize/lib/dialects/mariadb/query.js"],"names":["AbstractQuery","require","sequelizeErrors","_","DataTypes","logger","ER_DUP_ENTRY","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","constructor","connection","sequelize","options","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","values_","undefined","push","length","run","parameters","complete","_logQuery","results","query","warningStatus","logWarnings","err","transaction","errno","rollback","finished","formatError","formatResults","data","result","instance","isBulkUpdateQuery","isBulkDeleteQuery","affectedRows","isUpsertQuery","isInsertQuery","handleInsertQuery","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","Array","pkField","field","i","isSelectQuery","handleJsonSelectQuery","handleSelectQuery","isUpdateQuery","isCallQuery","isRawQuery","meta","isShowIndexesQuery","handleShowIndexesQuery","isForeignKeysQuery","isShowConstraintsQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","toLowerCase","startsWith","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","comment","Comment","isVersionQuery","version","rows","fieldRawAttributesMap","_field","keys","modelField","JSON","map","row","fieldName","parse","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","join","log","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","table","index","DatabaseError","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","currItem","forEach","item","name","Key_name","primary","Table","unique","Non_unique","Index_type","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await connection.query(this.sql, parameters);\n      complete();\n\n      // Log warnings if we've got them.\n      if (showWarnings && results && results.warningStatus > 0) {\n        await this.logWarnings(results);\n      }\n    } catch (err) {\n      // MariaDB automatically rolls-back transactions in the event of a\n      // deadlock.\n      //\n      // Even though we shouldn't need to do this, we initiate a manual\n      // rollback. Without the rollback, the next transaction using the\n      // connection seems to retain properties of the previous transaction\n      // (e.g. isolation level) and not work as expected.\n      //\n      // For example (in our tests), a follow-up READ_COMMITTED transaction\n      // doesn't work as expected unless we explicitly rollback the\n      // transaction: it would fail to read a value inserted outside of that\n      // transaction.\n      if (options.transaction && err.errno === 1213) {\n        try {\n          await options.transaction.rollback();\n        } catch (err) {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n        options.transaction.finished = 'rollback';\n      }\n\n      complete();\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(\n            row[modelField.fieldName]) : null;\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}