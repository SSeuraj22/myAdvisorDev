{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = firstTabbableDescendant;\nexports.orSelf = orSelf;\n\nvar _getTabIndex = _interopRequireDefault(require(\"./TypeFocusSink/getTabIndex\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ALWAYS_TRUE_FN = function ALWAYS_TRUE_FN() {\n  return true;\n};\n\nvar SELECTOR = 'a[href], audio, button, details, details summary, embed, iframe, input, object, rect, select, svg[focusable], textarea, video, [tabindex]';\n\nfunction firstTabbableDescendant(element) {\n  var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALWAYS_TRUE_FN;\n\n  if (!element) {\n    return;\n  } // This is best-effort for finding a tabbable element.\n  // For a comprehensive list, please refer to https://allyjs.io/data-tables/focusable.html and update this list accordingly.\n\n\n  var focusables = [].filter.call(element.querySelectorAll(SELECTOR), filter);\n  return [].find.call(focusables, function (focusable) {\n    var tabIndex = (0, _getTabIndex.default)(focusable);\n    return typeof tabIndex === 'number' && tabIndex >= 0;\n  });\n}\n\nfunction orSelf(element) {\n  if (!element) {\n    return;\n  }\n\n  if (element.matches(SELECTOR)) {\n    return element;\n  }\n\n  return firstTabbableDescendant(element);\n}","map":{"version":3,"sources":["../../src/Utils/firstTabbableDescendant.js"],"names":["ALWAYS_TRUE_FN","SELECTOR","filter","focusables","element","tabIndex","firstTabbableDescendant"],"mappings":";;;;;;;;AAAA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,6BAAA,CAAA,CAAA;;;;;;;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAA;AAAA,SAAA,IAAA;AAAvB,CAAA;;AAEA,IAAMC,QAAQ,GAAd,2IAAA;;AAGe,SAAA,uBAAA,CAAA,OAAA,EAAmE;AAAA,MAAzBC,MAAyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAhBF,cAAgB;;AAChF,MAAI,CAAJ,OAAA,EAAc;AACZ;AAF8E,GAAA,CAKhF;AACA;;;AACA,MAAMG,UAAU,GAAG,GAAA,MAAA,CAAA,IAAA,CAAeC,OAAO,CAAPA,gBAAAA,CAAf,QAAeA,CAAf,EAAnB,MAAmB,CAAnB;AAEA,SAAO,GAAA,IAAA,CAAA,IAAA,CAAA,UAAA,EAAyB,UAAA,SAAA,EAAa;AAC3C,QAAMC,QAAQ,GAAG,CAAA,GAAA,YAAA,CAAA,OAAA,EAAjB,SAAiB,CAAjB;AAEA,WAAO,OAAA,QAAA,KAAA,QAAA,IAAgCA,QAAQ,IAA/C,CAAA;AAHF,GAAO,CAAP;AAKD;;AAED,SAAA,MAAA,CAAA,OAAA,EAAyB;AACvB,MAAI,CAAJ,OAAA,EAAc;AACZ;AACD;;AAED,MAAID,OAAO,CAAPA,OAAAA,CAAJ,QAAIA,CAAJ,EAA+B;AAC7B,WAAA,OAAA;AACD;;AAED,SAAOE,uBAAuB,CAA9B,OAA8B,CAA9B;AACD","sourcesContent":["import getTabIndex from './TypeFocusSink/getTabIndex';\n\nconst ALWAYS_TRUE_FN = () => true;\n\nconst SELECTOR =\n  'a[href], audio, button, details, details summary, embed, iframe, input, object, rect, select, svg[focusable], textarea, video, [tabindex]';\n\nexport default function firstTabbableDescendant(element, filter = ALWAYS_TRUE_FN) {\n  if (!element) {\n    return;\n  }\n\n  // This is best-effort for finding a tabbable element.\n  // For a comprehensive list, please refer to https://allyjs.io/data-tables/focusable.html and update this list accordingly.\n  const focusables = [].filter.call(element.querySelectorAll(SELECTOR), filter);\n\n  return [].find.call(focusables, focusable => {\n    const tabIndex = getTabIndex(focusable);\n\n    return typeof tabIndex === 'number' && tabIndex >= 0;\n  });\n}\n\nfunction orSelf(element) {\n  if (!element) {\n    return;\n  }\n\n  if (element.matches(SELECTOR)) {\n    return element;\n  }\n\n  return firstTabbableDescendant(element);\n}\n\nexport { orSelf };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}