{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, Deferred } from \"../common/Exports\"; // Node.JS specific xmlhttprequest / browser support.\n\nimport * as XHR from \"xmlhttprequest-ts\";\nexport var RestRequestType;\n\n(function (RestRequestType) {\n  RestRequestType[\"Get\"] = \"get\";\n  RestRequestType[\"Post\"] = \"post\";\n  RestRequestType[\"Delete\"] = \"delete\";\n  RestRequestType[\"File\"] = \"file\";\n})(RestRequestType || (RestRequestType = {})); // accept rest operations via request method and return abstracted objects from server response\n\n\nexport class RestMessageAdapter {\n  constructor(configParams, connectionId) {\n    if (!configParams) {\n      throw new ArgumentNullError(\"configParams\");\n    }\n\n    this.privHeaders = configParams.headers;\n    this.privTimeout = configParams.timeout;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  setHeaders(key, value) {\n    this.privHeaders[key] = value;\n  }\n\n  request(method, uri, queryParams = {}, body = null, binaryBody = null) {\n    const responseReceivedDeferral = new Deferred();\n    let xhr;\n\n    if (typeof XMLHttpRequest === \"undefined\") {\n      xhr = new XHR.XMLHttpRequest();\n    } else {\n      xhr = new XMLHttpRequest();\n    }\n\n    const requestCommand = method === RestRequestType.File ? \"post\" : method;\n    xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\n\n    if (this.privHeaders) {\n      Object.keys(this.privHeaders).forEach(key => xhr.setRequestHeader(key, this.privHeaders[key]));\n    }\n\n    if (this.privIgnoreCache) {\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    }\n\n    xhr.timeout = this.privTimeout;\n\n    xhr.onload = () => {\n      responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\n    };\n\n    xhr.onerror = () => {\n      responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\n    };\n\n    xhr.ontimeout = () => {\n      responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\n    };\n\n    if (method === RestRequestType.File && binaryBody) {\n      xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n      xhr.send(binaryBody);\n    } else if (method === RestRequestType.Post && body) {\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send(JSON.stringify(body));\n    } else {\n      xhr.send();\n    }\n\n    return responseReceivedDeferral.promise;\n  }\n\n  parseXHRResult(xhr) {\n    return {\n      data: xhr.responseText,\n      headers: xhr.getAllResponseHeaders(),\n      json: () => JSON.parse(xhr.responseText),\n      ok: xhr.status >= 200 && xhr.status < 300,\n      status: xhr.status,\n      statusText: xhr.statusText\n    };\n  }\n\n  errorResponse(xhr, message = null) {\n    return {\n      data: message || xhr.statusText,\n      headers: xhr.getAllResponseHeaders(),\n      json: () => JSON.parse(message || \"\\\"\" + xhr.statusText + \"\\\"\"),\n      ok: false,\n      status: xhr.status,\n      statusText: xhr.statusText\n    };\n  }\n\n  withQuery(url, params = {}) {\n    const queryString = this.queryParams(params);\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n  }\n\n  queryParams(params = {}) {\n    return Object.keys(params).map(k => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k])).join(\"&\");\n  }\n\n}","map":{"version":3,"sources":["src/common.browser/RestMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"get\",\r\n    Post = \"post\",\r\n    Delete = \"delete\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privTimeout: number;\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions,\r\n        connectionId?: string\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privTimeout = configParams.timeout;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n        if (typeof (XMLHttpRequest) === \"undefined\") {\r\n            xhr = new XHR.XMLHttpRequest();\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n        }\r\n        const requestCommand = method === RestRequestType.File ? \"post\" : method;\r\n        xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\r\n\r\n        if (this.privHeaders) {\r\n            Object.keys(this.privHeaders).forEach((key: any) => xhr.setRequestHeader(key, this.privHeaders[key]));\r\n        }\r\n\r\n        if (this.privIgnoreCache) {\r\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n        }\r\n\r\n        xhr.timeout = this.privTimeout;\r\n\r\n        xhr.onload = () => {\r\n            responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\r\n        };\r\n\r\n        xhr.onerror = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\r\n        };\r\n\r\n        xhr.ontimeout = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\r\n        };\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n            xhr.send(binaryBody);\r\n        } else if (method === RestRequestType.Post && body) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.send(JSON.stringify(body));\r\n        } else {\r\n            xhr.send();\r\n        }\r\n\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IRestResponse {\r\n        return {\r\n            data: xhr.responseText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(xhr.responseText) as T,\r\n            ok: xhr.status >= 200 && xhr.status < 300,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IRestResponse {\r\n        return {\r\n            data: message || xhr.statusText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n            ok: false,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}