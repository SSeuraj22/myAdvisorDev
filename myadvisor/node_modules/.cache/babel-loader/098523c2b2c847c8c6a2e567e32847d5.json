{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport { isEqual } from 'lodash';\n\nconst Finish = props => {\n  _s();\n\n  const history = useHistory(); // Used to redirect to a new path without losing state values\n\n  const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n\n  const transcriptDets = props.transcriptDetails;\n  var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits); //this is a potential total number of credits completed\n\n  var gradeCombinationsArray; //2D array to contain grade combination\n\n  var potentialGpaArray; //array to hold calculate potential gpa\n\n  var coursesNCredits = [...props.courseInProgNCreds, ...props.courseChoseNCreds]; //join two arrays. To store courses a student is pursuing this semester\n  //var combinedDegreeGpa; //estimated gpa calculated using prior gpa and current gpa\n  //An array containing the grades and their quality points\n\n  const gradesArray = [{\n    grade: 'A+',\n    qualityPoints: 4.3\n  }, {\n    grade: 'A',\n    qualityPoints: 4.0\n  }, {\n    grade: 'A-',\n    qualityPoints: 3.7\n  }, {\n    grade: 'B+',\n    qualityPoints: 3.3\n  }, {\n    grade: 'B',\n    qualityPoints: 3.0\n  }, {\n    grade: 'B-',\n    qualityPoints: 2.7\n  }, {\n    grade: 'C+',\n    qualityPoints: 2.3\n  }, {\n    grade: 'C',\n    qualityPoints: 2.0\n  } //{grade: 'F1', qualityPoints: 1.7},\n  //{grade: 'F2', qualityPoints: 1.3},\n  //{grade: 'F3', qualityPoints: 0.0},\n  ]; // If the user's recommended courses has been lost, redirect to start page to generate them again\n\n  if (props.recCourses === null) {\n    history.push({\n      pathname: '/start'\n    });\n  }\n  /*\n      Calculate potential gpa and potential degree class\n  */\n\n  /*\n      priorDegGpaHrs - Prior Degree GPA Hours\n      priorDegGpa - Prior Degree GPA\n      currDegGpaHrs - Current Degree GPA Hours\n      currDegGpa - Current Degree GPA\n       FORMULA:\n      Combined Degree GPA = ((Prior Degree GPA Hours x Prior Degree GPA) + \n                              (Current Degree GPA Hours x Current Degree GPA)) / \n                              (Prior Degree GPA Hours + Current Degree GPA Hours)\n  */\n  //Function to calculate current degree gpa hours\n\n\n  function calculateCurrentDegreeGpaHrs(chosenCourseCreds, inProgCourseCreds) {\n    var currDegGpaHrs = chosenCourseCreds + inProgCourseCreds;\n    return currDegGpaHrs;\n  } //Function to calculate current degree gpa. Need to make sure course credits are all the sme\n\n\n  function calculateCurrentDegreeGpa(totGradePtsEarned, totQualityPts) {\n    var currDegGpa = totGradePtsEarned / totQualityPts;\n    return currDegGpa;\n  } //function to calculate estimated gpa\n\n\n  function calculateCombinedDegreeGpa(priDegGpaHrs, priDegGpa, curDegGpaHrs, curDegGpa) {\n    var estimatedGPA = (priDegGpaHrs * priDegGpa + curDegGpaHrs * curDegGpa) / (priDegGpaHrs + curDegGpaHrs);\n    return estimatedGPA;\n  } //console.log(\"testing  \"+calculateCombinedDegreeGpa(60, 3.00, 3, 4.3));\n  //Function to calculate grade points for a course\n\n\n  function calculateGradePoints(gradeQualityHrs, gradeQualityPts) {\n    const gradePoints = gradeQualityHrs * gradeQualityPts;\n    return gradePoints;\n  } //Function to get factorial of a number\n\n\n  function getFactorial(number) {\n    var factorial = 1;\n\n    if (number === 0) {\n      return 1;\n    }\n\n    for (let j = 1; j <= number; j++) {\n      factorial = factorial * j;\n    }\n\n    return factorial;\n  } //Function to calculate the number of grade combinations based on number of courses pursuing.\n\n\n  function calculateNumCombinations(numCoursesR, gradeArrSizeN) {\n    const top = getFactorial(numCoursesR + gradeArrSizeN - 1);\n    const bottom1 = getFactorial(numCoursesR);\n    const bottom2 = getFactorial(gradeArrSizeN - 1);\n    const numCombos = top / (bottom1 * bottom2);\n    return numCombos;\n  } //Function that creates grade combinations with repeats\n\n\n  function getGradeCombosWithRepeats(numCourses, gradeArr, gradeArrSize) {\n    var arrayWithRepeats = [];\n    var size = Math.pow(gradeArrSize, numCourses);\n\n    for (var i = 0; i < size; i++) {\n      var gradeSet = \"\";\n\n      for (var j = 0; j < numCourses; j++) {\n        if (j === numCourses - 1) {\n          gradeSet += gradeArr[Math.floor(i / Math.pow(gradeArrSize, j)) % gradeArrSize].grade;\n        } else {\n          gradeSet += gradeArr[Math.floor(i / Math.pow(gradeArrSize, j)) % gradeArrSize].grade + \" \";\n        }\n      }\n\n      arrayWithRepeats.push(gradeSet);\n    }\n\n    return arrayWithRepeats;\n  }\n  /*\n  //Function to check for repeated characters in a string\n  function checkRepeatedCharacters(splitArray){\n      var arrGradeQuantity = [];\n      var count;\n       //for loop to traverse split array to check for repeated characters\n      for(var a=0; a<splitArray.length; a++){\n          count = 1;\n          for(var b=a+1; b<splitArray.length; b++){\n              if(splitArray[a] === splitArray[b]){\n                  count++;\n              }\n          }\n          \n          var isEqual = false;\n          const obj = {grade: splitArray[a], quantity: count};\n          for(var s1=0; s1<arrGradeQuantity.length; s1++){\n              if(arrGradeQuantity[s1].grade === obj.grade){\n                  isEqual= true;\n              }\n          }\n           if(isEqual === false){\n              arrGradeQuantity.push(obj);\n          }\n           if(arrGradeQuantity.length===0){\n              arrGradeQuantity.push(obj);\n          }\n      }\n      return arrGradeQuantity;\n  }\n  */\n  //Function that checks if two strings of the same length contain the same grades regardless of order.\n\n\n  function checkStringSameGrades(string1, string2) {\n    //Original split arrays\n    var string1Split = string1.split(\" \");\n    var string2Split = string2.split(\" \"); //Copy split arrays\n\n    var string1SplitCopy = string1Split;\n    var string2SplitCopy = string2Split; //Sort both split arrays\n\n    const sortedArr1 = string1SplitCopy.sort();\n    const sortedArr2 = string2SplitCopy.sort();\n    var isTheSame = isEqual(sortedArr1, sortedArr2);\n    return isTheSame;\n  }\n\n  function getGradeCombosWithoutRepeats(arrayWithRepeats, numCourses, numCombos) {\n    var arrayWithoutRepeats = arrayWithRepeats;\n\n    while (arrayWithoutRepeats.length !== numCombos) {\n      //to cater for extra repeats\n      for (var i = 0; i < arrayWithoutRepeats.length; i++) {\n        for (var j = i + 1; j < arrayWithoutRepeats.length; j++) {\n          if (checkStringSameGrades(arrayWithoutRepeats[i], arrayWithoutRepeats[j])) {\n            arrayWithoutRepeats = arrayWithoutRepeats.toSpliced(j, 1);\n          }\n        }\n      }\n    }\n\n    return arrayWithoutRepeats;\n  } //Function to create grade combinations based on the number of courses a student is pursuing for the semester\n\n\n  function create2DGradeCombinations(numCourses, gradeArr, gradeArrSize) {\n    const arraySize = calculateNumCombinations(numCourses, gradeArrSize);\n    var combine2DArray = Array(arraySize).fill(0).map(row => new Array(numCourses).fill(1)); //initialize 2D array\n\n    var gradeArrRepeats = getGradeCombosWithRepeats(numCourses, gradeArr, gradeArrSize);\n    var gradeArrWithoutRepeats = getGradeCombosWithoutRepeats(gradeArrRepeats, numCourses, arraySize);\n    var count = 0;\n\n    for (var i = 0; i < combine2DArray.length; i++) {\n      for (var j = 0; j < combine2DArray[i].length; j++) {\n        var arrSplit = gradeArrWithoutRepeats[count].split(\" \");\n        combine2DArray[i][j] = arrSplit[j];\n      }\n\n      count++;\n    }\n\n    return combine2DArray;\n  } //Function to calculate total quality points\n\n\n  function calculateTotalQualityPoints(pursueCourses) {\n    var totQualityPoints = 0;\n\n    for (var i = 0; i < pursueCourses.length; i++) {\n      totQualityPoints = totQualityPoints + pursueCourses[i].credits;\n    }\n\n    return totQualityPoints;\n  } //Calculate total grade points for one combination\n\n\n  function calculateGradePointsEarned(gradeCombo, gradeArr, pursueCourses) {\n    var totalGradePointCombo = 0; //total grade point for 1 combination\n\n    for (var m = 0; m < gradeCombo.length; m++) {\n      for (var k = 0; k < gradeArr.length; k++) {\n        if (gradeCombo[m] === gradeArr[k].grade) {\n          totalGradePointCombo = totalGradePointCombo + calculateGradePoints(pursueCourses[m].credits, gradeArr[k].qualityPoints);\n        }\n      }\n    }\n    /*\n            var tempArr = gradeComboArr;\n            for(var i=0; i<tempArr.length; i++){\n                for(var j=0; j<tempArr[i].length; j++){\n                    for(var k=0; k<gradeArr.length; k++){\n                        if(tempArr[i][j] === gradeArr[k].grade){\n                            \n                        }\n                    }\n                    const obj = {totalGradePoints: 0};\n                    tempArr[i].push(obj);\n                    \n                }\n            }\n            */\n\n\n    return totalGradePointCombo.toFixed(1);\n  } //Function to check if all courses have the same credits\n\n\n  function checkAllCoursesSameCredits() {\n    var count = 0;\n\n    if (coursesNCredits !== null) {\n      var sameCreds = coursesNCredits[0].credits;\n\n      for (var num = 0; num < coursesNCredits.length; num++) {\n        if (coursesNCredits[num].credits === sameCreds) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n  } //function to calculate the potential degree gpa for the semester\n\n\n  function calculatePotentialGpa() {\n    const priorDegGpaHrs = transcriptDets.degreeGpaHours; //found on transcript\n    //console.log(\"priorDegGpaHrs  \"+priorDegGpaHrs);\n\n    const priorDegGpa = transcriptDets.gpa; //found on transcript\n    //console.log(\"priorDegGpa  \"+priorDegGpa);\n\n    gradeCombinationsArray = create2DGradeCombinations(coursesNCredits.length, gradesArray, gradesArray.length);\n    potentialGpaArray = Array(gradeCombinationsArray.length); //console.log(gradeCombinationsArray);\n\n    var inProgressCourseCredits = props.courseInProgCredits; //total credit for in progress courses\n\n    var chosenCourseCredits = props.chosenCoursesCreds; //total credits for chosen courses\n    //Check if all courses pursuing have the same credits\n\n    var numCoursesSameCreds = checkAllCoursesSameCredits();\n\n    if (numCoursesSameCreds === coursesNCredits.length) {\n      for (var f = 0; f < gradeCombinationsArray.length; f++) {\n        var currDegGpaHr = calculateCurrentDegreeGpaHrs(chosenCourseCredits, inProgressCourseCredits); //total credits of courses that you are pursuing this semester (including inprogress course & course chosen for advising)\n        //console.log(\"currDegGpaHrs  \"+currDegGpaHr);\n\n        var totalGradePointEarned = calculateGradePointsEarned(gradeCombinationsArray[f], gradesArray, coursesNCredits); //console.log(\"totalGradePointEarned  \"+totalGradePointEarned);\n\n        var totalQualityPoints = calculateTotalQualityPoints(coursesNCredits); //console.log(\"totalQualityPoints  \"+totalQualityPoints);\n\n        const currDegGpa = calculateCurrentDegreeGpa(totalGradePointEarned, totalQualityPoints); //console.log(\"currDegGpa  \"+currDegGpa);\n\n        const combinedGpaForCombo = calculateCombinedDegreeGpa(priorDegGpaHrs, priorDegGpa, currDegGpaHr, currDegGpa); //console.log(\"combinedGpaForCombo  \"+combinedGpaForCombo);\n\n        potentialGpaArray[f] = combinedGpaForCombo;\n      }\n    } //console.log(potentialGpaArray);\n\n  }\n\n  calculatePotentialGpa();\n  useEffect(() => {\n    props.setProg(100); // Set advising progress to 100%\n\n    props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n    //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n    //getAllPotentialGraduate();\n    //console.log(\"1\");\n\n    /*\n    \n    async function getPotentialGraduate() {\n        try{\n            const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n            const parseData = await res.json();\n            setPotentialGrad(parseData);\n        }\n        catch(err){\n            console.log(\"Error: \" + err.message);\n        }\n        /*\n        fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data);\n                setPotentialGrad(data);\n            })\n            .catch((err) =>{\n                console.log(err.message);\n            });\n        */\n    //}\n    //getPotentialGraduate();\n  }, []);\n  useEffect(() => {\n    if (!uploaded) {\n      // If advising session has not yet been uploaded\n      var requestOptions = {\n        // Create POST request\n        method: 'POST',\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        redirect: 'follow'\n      };\n      fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n      .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n      setUploaded(true);\n    }\n\n    if (totalCreditsCompleted >= 93) {\n      if (!props.gradUploaded) {\n        //if potential graduate has not been uploaded to database yet\n        var requestOptions = {\n          // Create POST request\n          method: 'POST',\n          headers: {\n            token: localStorage.getItem(\"token\"),\n            \"Content-type\": \"application/json\"\n          },\n          redirect: 'follow'\n        };\n        fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n        .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n        props.setGradUploaded(true);\n      }\n    }\n\n    if (totalCreditsCompleted >= 0 && totalCreditsCompleted < 93) {\n      var requestOptions = {\n        // Create POST request\n        method: 'GET',\n        redirect: 'follow'\n      };\n      fetch(`/student/potential-graduates/all`, requestOptions) // Make request to server to get all potential graduate\n      .then(response => response.json()).then(data => {\n        let graduates = data;\n\n        if (graduates !== null) {\n          graduates.map(function (graduate) {\n            if (graduate.studentId === parseInt(localStorage.getItem(\"username\"))) {\n              //if potential graduate found in database\n              var requestOptions2 = {\n                //create DELETE request\n                method: 'DELETE',\n                headers: {\n                  token: localStorage.getItem(\"token\")\n                }\n              };\n              fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2) //delete potential graduate\n              .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n            }\n          });\n        }\n      }).catch(error => console.log('error', error));\n    }\n  }, [totalCreditsCompleted]); // async function uploadAdvisingSession() {\n  //     try {\n  //       const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n  //       return response\n  //     }\n  //     catch (error) {\n  //       console.log(error);\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card almost-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-header blue-txt\",\n                children: \"You're all done with advising!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-text\",\n                children: \"Here's a list of all the courses you chose:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 33\n              }, this), Array.from({\n                length: props.chosenCourses.length\n              }, (_, k) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"course-chosen blue-txt\",\n                  children: props.chosenCourses[k]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 48\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Finish, \"ayKO17///ZoiD4k/J3lHhJIIflU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Finish;\nexport default Finish;\n\nvar _c;\n\n$RefreshReg$(_c, \"Finish\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js"],"names":["React","useHistory","useEffect","useState","isEqual","Finish","props","history","uploaded","setUploaded","transcriptDets","transcriptDetails","totalCreditsCompleted","parseInt","studCredComplete","newDeg","courseInProgCredits","gradeCombinationsArray","potentialGpaArray","coursesNCredits","courseInProgNCreds","courseChoseNCreds","gradesArray","grade","qualityPoints","recCourses","push","pathname","calculateCurrentDegreeGpaHrs","chosenCourseCreds","inProgCourseCreds","currDegGpaHrs","calculateCurrentDegreeGpa","totGradePtsEarned","totQualityPts","currDegGpa","calculateCombinedDegreeGpa","priDegGpaHrs","priDegGpa","curDegGpaHrs","curDegGpa","estimatedGPA","calculateGradePoints","gradeQualityHrs","gradeQualityPts","gradePoints","getFactorial","number","factorial","j","calculateNumCombinations","numCoursesR","gradeArrSizeN","top","bottom1","bottom2","numCombos","getGradeCombosWithRepeats","numCourses","gradeArr","gradeArrSize","arrayWithRepeats","size","Math","pow","i","gradeSet","floor","checkStringSameGrades","string1","string2","string1Split","split","string2Split","string1SplitCopy","string2SplitCopy","sortedArr1","sort","sortedArr2","isTheSame","getGradeCombosWithoutRepeats","arrayWithoutRepeats","length","toSpliced","create2DGradeCombinations","arraySize","combine2DArray","Array","fill","map","row","gradeArrRepeats","gradeArrWithoutRepeats","count","arrSplit","calculateTotalQualityPoints","pursueCourses","totQualityPoints","credits","calculateGradePointsEarned","gradeCombo","totalGradePointCombo","m","k","toFixed","checkAllCoursesSameCredits","sameCreds","num","calculatePotentialGpa","priorDegGpaHrs","degreeGpaHours","priorDegGpa","gpa","inProgressCourseCredits","chosenCourseCredits","chosenCoursesCreds","numCoursesSameCreds","f","currDegGpaHr","totalGradePointEarned","totalQualityPoints","combinedGpaForCombo","setProg","setShowBotButtons","requestOptions","method","headers","token","localStorage","getItem","redirect","fetch","then","response","text","result","console","log","catch","error","gradUploaded","setGradUploaded","json","data","graduates","graduate","studentId","requestOptions2","from","chosenCourses","_"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport { isEqual } from 'lodash';\n\nconst Finish = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n    \n    const transcriptDets = props.transcriptDetails;\n    \n    var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits); //this is a potential total number of credits completed\n    var gradeCombinationsArray; //2D array to contain grade combination\n    var potentialGpaArray; //array to hold calculate potential gpa\n    var coursesNCredits = [...props.courseInProgNCreds, ...props.courseChoseNCreds];//join two arrays. To store courses a student is pursuing this semester\n\n    //var combinedDegreeGpa; //estimated gpa calculated using prior gpa and current gpa\n\n    //An array containing the grades and their quality points\n    const gradesArray = [ {grade: 'A+', qualityPoints: 4.3}, \n                          {grade: 'A', qualityPoints: 4.0},\n                          {grade: 'A-', qualityPoints: 3.7},\n                          {grade: 'B+', qualityPoints: 3.3},\n                          {grade: 'B', qualityPoints: 3.0},\n                          {grade: 'B-', qualityPoints: 2.7},\n                          {grade: 'C+', qualityPoints: 2.3},\n                          {grade: 'C', qualityPoints: 2.0},\n                          //{grade: 'F1', qualityPoints: 1.7},\n                          //{grade: 'F2', qualityPoints: 1.3},\n                          //{grade: 'F3', qualityPoints: 0.0},\n                        ];\n\n    // If the user's recommended courses has been lost, redirect to start page to generate them again\n    if (props.recCourses === null) { \n        history.push({\n        pathname: '/start'\n        })\n    }\n\n    /*\n        Calculate potential gpa and potential degree class\n    */\n\n    /*\n        priorDegGpaHrs - Prior Degree GPA Hours\n        priorDegGpa - Prior Degree GPA\n        currDegGpaHrs - Current Degree GPA Hours\n        currDegGpa - Current Degree GPA\n\n        FORMULA:\n        Combined Degree GPA = ((Prior Degree GPA Hours x Prior Degree GPA) + \n                                (Current Degree GPA Hours x Current Degree GPA)) / \n                                (Prior Degree GPA Hours + Current Degree GPA Hours)\n    */\n    \n\n    //Function to calculate current degree gpa hours\n    function calculateCurrentDegreeGpaHrs(chosenCourseCreds, inProgCourseCreds){\n        var currDegGpaHrs = chosenCourseCreds + inProgCourseCreds;\n        return currDegGpaHrs;\n    }\n\n    //Function to calculate current degree gpa. Need to make sure course credits are all the sme\n    function calculateCurrentDegreeGpa(totGradePtsEarned, totQualityPts){\n        var currDegGpa = totGradePtsEarned / totQualityPts;\n        return currDegGpa;\n    }\n    \n    //function to calculate estimated gpa\n    function calculateCombinedDegreeGpa(priDegGpaHrs, priDegGpa, curDegGpaHrs, curDegGpa){\n        var estimatedGPA = ((priDegGpaHrs * priDegGpa) + (curDegGpaHrs * curDegGpa)) / (priDegGpaHrs + curDegGpaHrs);\n        return estimatedGPA;\n    }\n    //console.log(\"testing  \"+calculateCombinedDegreeGpa(60, 3.00, 3, 4.3));\n\n    //Function to calculate grade points for a course\n    function calculateGradePoints(gradeQualityHrs, gradeQualityPts){\n        const gradePoints = gradeQualityHrs * gradeQualityPts;\n        return gradePoints;\n    }\n\n    //Function to get factorial of a number\n    function getFactorial(number){\n        var factorial = 1;\n        if (number===0){\n            return 1;\n        }\n\n        for(let j=1; j<=number; j++){\n            factorial =  factorial * j;\n        }\n        return factorial;\n    }\n\n    //Function to calculate the number of grade combinations based on number of courses pursuing.\n    function calculateNumCombinations(numCoursesR, gradeArrSizeN){\n        const top = getFactorial(numCoursesR + gradeArrSizeN - 1);\n        const bottom1 = getFactorial(numCoursesR);\n        const bottom2 = getFactorial(gradeArrSizeN - 1);\n        const numCombos = top / (bottom1 * bottom2);\n        return numCombos;\n    }\n\n    //Function that creates grade combinations with repeats\n    function getGradeCombosWithRepeats(numCourses, gradeArr, gradeArrSize){\n        var arrayWithRepeats = [];\n        var size = Math.pow(gradeArrSize, numCourses);\n\n        for (var i = 0; i < size; i++) {\n            var gradeSet = \"\";\n            for (var j = 0; j < numCourses; j++) {\n                if(j===numCourses-1){\n                    gradeSet += gradeArr[Math.floor(i / Math.pow(gradeArrSize, j)) % gradeArrSize].grade;\n                }\n                else{\n                    gradeSet += gradeArr[Math.floor(i / Math.pow(gradeArrSize, j)) % gradeArrSize].grade + \" \";\n                }\n            }\n            arrayWithRepeats.push(gradeSet);\n        }    \n        return arrayWithRepeats;\n    }\n\n    /*\n    //Function to check for repeated characters in a string\n    function checkRepeatedCharacters(splitArray){\n        var arrGradeQuantity = [];\n        var count;\n\n        //for loop to traverse split array to check for repeated characters\n        for(var a=0; a<splitArray.length; a++){\n            count = 1;\n            for(var b=a+1; b<splitArray.length; b++){\n                if(splitArray[a] === splitArray[b]){\n                    count++;\n                }\n            }\n            \n            var isEqual = false;\n            const obj = {grade: splitArray[a], quantity: count};\n            for(var s1=0; s1<arrGradeQuantity.length; s1++){\n                if(arrGradeQuantity[s1].grade === obj.grade){\n                    isEqual= true;\n                }\n            }\n\n            if(isEqual === false){\n                arrGradeQuantity.push(obj);\n            }\n\n            if(arrGradeQuantity.length===0){\n                arrGradeQuantity.push(obj);\n            }\n        }\n        return arrGradeQuantity;\n    }\n    */\n\n    //Function that checks if two strings of the same length contain the same grades regardless of order.\n    function checkStringSameGrades(string1, string2){\n        //Original split arrays\n        var string1Split = string1.split(\" \");\n        var string2Split = string2.split(\" \");\n\n        //Copy split arrays\n        var string1SplitCopy = string1Split;\n        var string2SplitCopy = string2Split;\n\n        //Sort both split arrays\n        const sortedArr1 = string1SplitCopy.sort();\n        const sortedArr2 = string2SplitCopy.sort();\n    \n        var isTheSame = isEqual(sortedArr1, sortedArr2);\n        \n        return isTheSame;\n    }\n\n    function getGradeCombosWithoutRepeats(arrayWithRepeats, numCourses, numCombos){\n        var arrayWithoutRepeats = arrayWithRepeats;\n\n        while(arrayWithoutRepeats.length !== numCombos){ //to cater for extra repeats\n            for(var i=0; i<arrayWithoutRepeats.length; i++){\n                for(var j=i+1; j<arrayWithoutRepeats.length; j++){\n                    if(checkStringSameGrades(arrayWithoutRepeats[i], arrayWithoutRepeats[j])){\n                        arrayWithoutRepeats = arrayWithoutRepeats.toSpliced(j, 1);\n                    }\n                }\n            }\n        }\n        return arrayWithoutRepeats;\n    }\n\n    //Function to create grade combinations based on the number of courses a student is pursuing for the semester\n    function create2DGradeCombinations(numCourses, gradeArr, gradeArrSize){\n        const arraySize = calculateNumCombinations(numCourses, gradeArrSize);\n        var combine2DArray = Array(arraySize).fill(0).map(row => new Array(numCourses).fill(1)); //initialize 2D array\n\n        var gradeArrRepeats = getGradeCombosWithRepeats(numCourses, gradeArr, gradeArrSize);\n        var gradeArrWithoutRepeats = getGradeCombosWithoutRepeats(gradeArrRepeats, numCourses, arraySize);\n\n        var count = 0;\n\n        for(var i=0; i<combine2DArray.length; i++){\n            for(var j=0; j<combine2DArray[i].length; j++){\n                var arrSplit = gradeArrWithoutRepeats[count].split(\" \");\n                combine2DArray[i][j] = arrSplit[j];\n            }\n            count++;\n        }\n        return combine2DArray;\n    }\n\n    //Function to calculate total quality points\n    function calculateTotalQualityPoints(pursueCourses){\n        var totQualityPoints = 0;\n        for(var i=0; i<pursueCourses.length; i++){\n            totQualityPoints = totQualityPoints + pursueCourses[i].credits;\n        }\n        return totQualityPoints;\n    }\n\n    //Calculate total grade points for one combination\n    function calculateGradePointsEarned(gradeCombo, gradeArr, pursueCourses){\n        var totalGradePointCombo = 0; //total grade point for 1 combination\n        for(var m=0; m<gradeCombo.length; m++){\n            for(var k=0; k<gradeArr.length; k++){\n                if(gradeCombo[m] === gradeArr[k].grade){\n                    totalGradePointCombo = totalGradePointCombo + calculateGradePoints(pursueCourses[m].credits, gradeArr[k].qualityPoints);\n                }\n            }\n        }\n        \n\n/*\n        var tempArr = gradeComboArr;\n        for(var i=0; i<tempArr.length; i++){\n            for(var j=0; j<tempArr[i].length; j++){\n                for(var k=0; k<gradeArr.length; k++){\n                    if(tempArr[i][j] === gradeArr[k].grade){\n                        \n                    }\n                }\n                const obj = {totalGradePoints: 0};\n                tempArr[i].push(obj);\n                \n            }\n        }\n        */\n        return totalGradePointCombo.toFixed(1);\n    }\n\n    //Function to check if all courses have the same credits\n    function checkAllCoursesSameCredits(){\n        var count = 0;\n        if(coursesNCredits!==null){\n            var sameCreds = coursesNCredits[0].credits;\n            for(var num=0; num<coursesNCredits.length; num++){\n                if(coursesNCredits[num].credits === sameCreds){\n                    count++;\n            }\n        }\n        }\n        \n        return count;\n    }\n\n    //function to calculate the potential degree gpa for the semester\n    function calculatePotentialGpa(){\n        const priorDegGpaHrs = transcriptDets.degreeGpaHours; //found on transcript\n        //console.log(\"priorDegGpaHrs  \"+priorDegGpaHrs);\n        const priorDegGpa = transcriptDets.gpa; //found on transcript\n        //console.log(\"priorDegGpa  \"+priorDegGpa);\n        gradeCombinationsArray = create2DGradeCombinations(coursesNCredits.length, gradesArray, gradesArray.length);\n    \n        potentialGpaArray = Array(gradeCombinationsArray.length);\n        //console.log(gradeCombinationsArray);\n\n        var inProgressCourseCredits = props.courseInProgCredits; //total credit for in progress courses\n        var chosenCourseCredits = props.chosenCoursesCreds; //total credits for chosen courses\n\n        //Check if all courses pursuing have the same credits\n        var numCoursesSameCreds = checkAllCoursesSameCredits();\n        if(numCoursesSameCreds===coursesNCredits.length){\n            for(var f=0; f<gradeCombinationsArray.length; f++){\n                var currDegGpaHr = calculateCurrentDegreeGpaHrs(chosenCourseCredits, inProgressCourseCredits); //total credits of courses that you are pursuing this semester (including inprogress course & course chosen for advising)\n                //console.log(\"currDegGpaHrs  \"+currDegGpaHr);\n                var totalGradePointEarned = calculateGradePointsEarned(gradeCombinationsArray[f], gradesArray, coursesNCredits);\n                //console.log(\"totalGradePointEarned  \"+totalGradePointEarned);\n                var totalQualityPoints = calculateTotalQualityPoints(coursesNCredits);\n                //console.log(\"totalQualityPoints  \"+totalQualityPoints);\n                const currDegGpa = calculateCurrentDegreeGpa(totalGradePointEarned, totalQualityPoints); \n                //console.log(\"currDegGpa  \"+currDegGpa);\n                const combinedGpaForCombo = calculateCombinedDegreeGpa(priorDegGpaHrs, priorDegGpa, currDegGpaHr, currDegGpa);\n                //console.log(\"combinedGpaForCombo  \"+combinedGpaForCombo);\n                potentialGpaArray[f] = combinedGpaForCombo;\n            }\n\n        }\n\n        //console.log(potentialGpaArray);\n        \n    }\n    calculatePotentialGpa();\n\n    useEffect(() => {\n        props.setProg(100); // Set advising progress to 100%\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n        \n        //getAllPotentialGraduate();\n        //console.log(\"1\");\n        \n        /*\n        \n        async function getPotentialGraduate() {\n            try{\n                const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n                const parseData = await res.json();\n                setPotentialGrad(parseData);\n            }\n            catch(err){\n                console.log(\"Error: \" + err.message);\n            }\n            /*\n            fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n                .then((res) => res.json())\n                .then((data) => {\n                    console.log(data);\n                    setPotentialGrad(data);\n                })\n                .catch((err) =>{\n                    console.log(err.message);\n                });\n            */\n               \n        //}\n        \n        //getPotentialGraduate();\n        \n        \n    }, []);\n    \n    useEffect(() => {\n        if (!uploaded) { // If advising session has not yet been uploaded\n            var requestOptions = { // Create POST request\n                method: 'POST',\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                redirect: 'follow'\n            };\n\n            fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            \n            setUploaded(true);\n        }\n\n        if(totalCreditsCompleted >= 93){\n            if(!props.gradUploaded){//if potential graduate has not been uploaded to database yet\n                var requestOptions = { // Create POST request\n                    method: 'POST',\n                    headers: {\n                        token: localStorage.getItem(\"token\"),\n                        \"Content-type\": \"application/json\",\n                    },\n                    redirect: 'follow'\n                };\n                fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                \n                props.setGradUploaded(true); \n            }\n        }\n        \n        if((totalCreditsCompleted >= 0 && totalCreditsCompleted < 93)){\n            var requestOptions = { // Create POST request\n                method: 'GET',\n                redirect: 'follow'\n            };\n\n            fetch(`/student/potential-graduates/all`, requestOptions) // Make request to server to get all potential graduate\n                .then(response => response.json())\n                .then((data) => {\n                    let graduates = data;\n\n                    if(graduates!==null){\n                        graduates.map(function(graduate){ \n\n                            if(graduate.studentId === parseInt(localStorage.getItem(\"username\"))){ //if potential graduate found in database\n                                var requestOptions2 = {//create DELETE request\n                                    method: 'DELETE',\n                                    headers: {\n                                        token: localStorage.getItem(\"token\")\n                                    }\n                                };\n\n                                fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2) //delete potential graduate\n                                    .then(response => response.text())\n                                    .then(result => console.log(result))\n                                    .catch(error => console.log('error', error));\n                            }\n                            \n                        })\n                    }\n                })\n                .catch(error => console.log('error', error));\n        }\n    }, [totalCreditsCompleted]);\n\n    // async function uploadAdvisingSession() {\n    //     try {\n    //       const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n    //       return response\n    //     }\n    //     catch (error) {\n    //       console.log(error);\n    //     }\n    // }\n\n\n    return (\n        <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're all done with advising!</p>\n                                <p className=\"almost-text\">Here's a list of all the courses you chose:</p>\n                                {\n                                    Array.from({ length: props.chosenCourses.length }, (_, k) => {\n                                        return <p className=\"course-chosen blue-txt\">{props.chosenCourses[k]}</p>\n                                    })\n                                }\n                            </div>\n                            {/*\n                            <div className=\"card body-tips\" >\n                                <p className=\"almost-header2\">Potential Degree Class:</p>\n                                <p className=\"almost-text2\">Here's a list of all the courses you chose:</p>\n                            </div>\n\n                            */}\n                                \n                            \n\n                        </div>\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  \n}\n\nexport default Finish;\n"]},"metadata":{},"sourceType":"module"}