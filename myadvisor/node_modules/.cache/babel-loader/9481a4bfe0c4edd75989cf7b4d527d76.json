{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\"; //const PotentialGraduate = require(\"../../../../models/PotentialGraduate\");\n\nconst Finish = props => {\n  _s();\n\n  const history = useHistory(); // Used to redirect to a new path without losing state values\n\n  const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n  //const [totalCreditsCompleted, setTotCredComplete] = useState(0); //this is a potential total number of credits completed\n\n  const [potGrad, setPotentialGrad] = useState(null);\n  const [allPotGrads, setAllPotGrads] = useState(null);\n  var gradUpload = props.graaa;\n  var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits); // If the user's recommended courses has been lost, redirect to start page to generate them again\n\n  if (props.recCourses === null) {\n    history.push({\n      pathname: '/start'\n    });\n  }\n\n  async function getAllPotentialGraduate() {\n    try {\n      const res = await fetch(\"/student/potential-graduates/all\", {\n        method: \"GET\"\n      });\n      const parseData = await res.json(); //console.log(parseData);\n\n      setAllPotGrads(parseData);\n    } catch (err) {\n      console.log(\"Error: \" + err.message);\n    }\n  } //NOTE - fix the delete potential graduate\n\n  /*\n  async function getPotentialGraduate() {\n       \n      fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n          .then((res) => res.json())\n          .then((data) => {\n              console.log(data);\n              setPotentialGrad(data);\n          })\n          .catch((err) =>{\n              console.log(err.message);\n          });\n     \n      try {\n          const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"), {\n          method: \"GET\",\n          headers: {\n              //token: localStorage.getItem(\"token\")\n          }\n        });\n        \n        const parseData = await res.json();\n        //console.log(JSON.stringify(parseData));\n        setPotentialGrad(parseData);\n        \n      } catch (err) {\n        console.error(err.message);\n      }\n      \n  }\n  */\n  //getPotentialGraduate();\n\n\n  useEffect(() => {\n    props.setProg(100); // Set advising progress to 100%\n\n    props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n    //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n\n    getAllPotentialGraduate(); //console.log(\"1\");\n\n    /*\n    \n    async function getPotentialGraduate() {\n        try{\n            const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n            const parseData = await res.json();\n            setPotentialGrad(parseData);\n        }\n        catch(err){\n            console.log(\"Error: \" + err.message);\n        }\n        /*\n        fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data);\n                setPotentialGrad(data);\n            })\n            .catch((err) =>{\n                console.log(err.message);\n            });\n        */\n    //}\n    //getPotentialGraduate();\n  }, []); //console.log(\"pot grad \"+potGrad);\n\n  console.log(\"all pot grad \" + JSON.stringify(allPotGrads));\n  useEffect(() => {\n    if (!uploaded) {\n      // If advising session has not yet been uploaded\n      var requestOptions = {\n        // Create POST request\n        method: 'POST',\n        headers: {\n          token: localStorage.getItem(\"token\"),\n          \"Content-type\": \"application/json\"\n        },\n        redirect: 'follow'\n      };\n      fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n      .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n      setUploaded(true); //console.log(\"2\");\n    } //console.log( \"tots \" +totalCreditsCompleted);\n\n\n    if (totalCreditsCompleted >= 93) {\n      if (!props.gradUploaded) {\n        //if potential graduate has not been uploaded to database yet\n        var requestOptions = {\n          // Create POST request\n          method: 'POST',\n          headers: {\n            token: localStorage.getItem(\"token\"),\n            \"Content-type\": \"application/json\"\n          },\n          redirect: 'follow'\n        };\n        fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n        .then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n        props.setGradUploaded(true);\n      }\n    } //console.log(\"3\");\n    //console.log(\"delete \"+ totalCreditsCompleted);\n\n\n    if (totalCreditsCompleted >= 0 && totalCreditsCompleted < 93) {\n      //gradUploaded===true potGrad!=null\n      if (allPotGrads !== null) {\n        console.log(\"true\");\n        const found = allPotGrads.find(grad => {\n          return grad.studentId === localStorage.getItem(\"username\");\n        });\n        console.log(\"found \" + found);\n      }\n\n      var requestOptions2 = {\n        //create DELETE request\n        method: 'DELETE',\n        headers: {\n          token: localStorage.getItem(\"token\")\n        }\n      };\n      fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error)); //setGradUploaded(false);\n\n      console.log(\"4\");\n    }\n    /*\n    else{\n        if(totalCreditsCompleted >= 0 && totalCreditsCompleted < 93){\n            console.log(\"delete \"+ totalCreditsCompleted);\n       \n            var requestOptions2 = {//create DELETE request\n                method: 'DELETE',\n                headers: {\n                    token: localStorage.getItem(\"token\")\n                }\n            };\n            fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2)\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            }\n        \n    }\n    */\n\n  }, []); //console.log(\"total credits \"+ totalCreditsCompleted);\n\n  console.log(\"grad upload \" + gradUploaded);\n\n  async function uploadAdvisingSession() {\n    try {\n      const {\n        data: response\n      } = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`); //use data destructuring to get data from the promise object\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card almost-card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-header blue-txt\",\n                children: \"You're all done with advising!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"almost-text\",\n                children: \"Here's a list of all the courses you chose:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 33\n              }, this), Array.from({\n                length: props.chosenCourses.length\n              }, (_, k) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"course-chosen blue-txt\",\n                  children: props.chosenCourses[k]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 48\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Finish, \"P9R86AEtGhs8MiPzpEsRibFImxg=\", false, function () {\n  return [useHistory];\n});\n\n_c = Finish;\nexport default Finish;\n\nvar _c;\n\n$RefreshReg$(_c, \"Finish\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js"],"names":["React","Component","useHistory","axios","useEffect","useState","Finish","props","history","uploaded","setUploaded","potGrad","setPotentialGrad","allPotGrads","setAllPotGrads","gradUpload","graaa","totalCreditsCompleted","parseInt","studCredComplete","newDeg","courseInProgCredits","recCourses","push","pathname","getAllPotentialGraduate","res","fetch","method","parseData","json","err","console","log","message","setProg","setShowBotButtons","JSON","stringify","requestOptions","headers","token","localStorage","getItem","redirect","then","response","text","result","catch","error","gradUploaded","setGradUploaded","found","find","grad","studentId","requestOptions2","uploadAdvisingSession","data","post","Array","from","length","chosenCourses","_","k"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n//const PotentialGraduate = require(\"../../../../models/PotentialGraduate\");\n\nconst Finish = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n    \n    //const [totalCreditsCompleted, setTotCredComplete] = useState(0); //this is a potential total number of credits completed\n    const [potGrad, setPotentialGrad] = useState(null);\n    const [allPotGrads, setAllPotGrads] = useState(null);\n    var gradUpload = props.graaa\n\n    var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits);\n\n    // If the user's recommended courses has been lost, redirect to start page to generate them again\n    if (props.recCourses === null) { \n        history.push({\n        pathname: '/start'\n        })\n    }\n\n    async function getAllPotentialGraduate() {\n        try{\n            const res = await fetch(\"/student/potential-graduates/all\", {\n                method: \"GET\"\n            });\n            const parseData = await res.json();\n            //console.log(parseData);\n            setAllPotGrads(parseData);\n        }\n        catch(err){\n            console.log(\"Error: \" + err.message);\n        }\n    }\n\n    //NOTE - fix the delete potential graduate\n    /*\n    async function getPotentialGraduate() {\n         \n        fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data);\n                setPotentialGrad(data);\n            })\n            .catch((err) =>{\n                console.log(err.message);\n            });\n       \n        try {\n            const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"), {\n            method: \"GET\",\n            headers: {\n                //token: localStorage.getItem(\"token\")\n            }\n          });\n          \n          const parseData = await res.json();\n          //console.log(JSON.stringify(parseData));\n          setPotentialGrad(parseData);\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n        \n    }\n    */\n\n    //getPotentialGraduate();\n\n    useEffect(() => {\n        props.setProg(100); // Set advising progress to 100%\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n        getAllPotentialGraduate();\n        \n        //console.log(\"1\");\n        \n        /*\n        \n        async function getPotentialGraduate() {\n            try{\n                const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n                const parseData = await res.json();\n                setPotentialGrad(parseData);\n            }\n            catch(err){\n                console.log(\"Error: \" + err.message);\n            }\n            /*\n            fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n                .then((res) => res.json())\n                .then((data) => {\n                    console.log(data);\n                    setPotentialGrad(data);\n                })\n                .catch((err) =>{\n                    console.log(err.message);\n                });\n            */\n               \n        //}\n        \n        //getPotentialGraduate();\n        \n        \n    }, []);\n    //console.log(\"pot grad \"+potGrad);\n    console.log(\"all pot grad \"+JSON.stringify(allPotGrads));\n    \n    \n    useEffect(() => {\n        if (!uploaded) { // If advising session has not yet been uploaded\n            var requestOptions = { // Create POST request\n                method: 'POST',\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                redirect: 'follow'\n            };\n\n            fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            \n            setUploaded(true);\n            //console.log(\"2\");\n        }\n\n        //console.log( \"tots \" +totalCreditsCompleted);\n        if(totalCreditsCompleted >= 93){\n            if(!props.gradUploaded){//if potential graduate has not been uploaded to database yet\n                var requestOptions = { // Create POST request\n                    method: 'POST',\n                    headers: {\n                        token: localStorage.getItem(\"token\"),\n                        \"Content-type\": \"application/json\",\n                    },\n                    redirect: 'follow'\n                };\n                fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                \n                props.setGradUploaded(true);\n                \n\n                \n                \n            }\n\n            \n            \n            \n        }\n\n        \n        //console.log(\"3\");\n\n        //console.log(\"delete \"+ totalCreditsCompleted);\n        \n        if((totalCreditsCompleted >= 0 && totalCreditsCompleted < 93)){//gradUploaded===true potGrad!=null\n            if(allPotGrads!==null){\n                console.log(\"true\");\n                const found = allPotGrads.find(grad => {\n                    return grad.studentId === localStorage.getItem(\"username\");\n                });\n                console.log(\"found \"+found);\n            }\n            \n            var requestOptions2 = {//create DELETE request\n                method: 'DELETE',\n                headers: {\n                    token: localStorage.getItem(\"token\")\n                }\n            };\n            fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2)\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n\n            //setGradUploaded(false);\n            console.log(\"4\");\n        }\n    \n        /*\n        else{\n            if(totalCreditsCompleted >= 0 && totalCreditsCompleted < 93){\n                console.log(\"delete \"+ totalCreditsCompleted);\n           \n                var requestOptions2 = {//create DELETE request\n                    method: 'DELETE',\n                    headers: {\n                        token: localStorage.getItem(\"token\")\n                    }\n                };\n                fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2)\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                }\n            \n        }\n        */\n        \n\n    }, []);\n    //console.log(\"total credits \"+ totalCreditsCompleted);\n    console.log(\"grad upload \"+gradUploaded);\n\n    async function uploadAdvisingSession() {\n        try {\n          const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n          return response\n        }\n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    \n \n\n    return (\n        <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're all done with advising!</p>\n                                <p className=\"almost-text\">Here's a list of all the courses you chose:</p>\n                                {\n                                    Array.from({ length: props.chosenCourses.length }, (_, k) => {\n                                        return <p className=\"course-chosen blue-txt\">{props.chosenCourses[k]}</p>\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  \n}\n\nexport default Finish;\n"]},"metadata":{},"sourceType":"module"}