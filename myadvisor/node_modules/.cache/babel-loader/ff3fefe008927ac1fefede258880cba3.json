{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n/*\n  momentLocalizer is a date localization adapter that is used to localize the data for the calendar component.\n*/\n\nconst localizer = momentLocalizer(moment);\n/*\n  StaffCalendar is component that is displayed on the staff dashboard which shows the current advising schedule.\n*/\n\nfunction StaffCalendar() {\n  _s();\n\n  /*\n    The eventsList state is used to store the current academic advising window.\n  */\n  const [eventsList, setEventsList] = useState([]);\n  /*\n    getAdvisingWindow creates a get request to the server that gets the current advising window and stores it to the eventsList state.\n  */\n\n  async function getAdvisingWindow() {\n    try {\n      const res = await fetch(\"/admin/academic-advising/window\", {\n        method: \"GET\"\n      });\n      const parseData = await res.json();\n      const startDate = new Date(parseData.advisingStart);\n      startDate.setDate(startDate.getDate() + 1);\n      const endDate = new Date(parseData.advisingEnd);\n      endDate.setDate(endDate.getDate() + 1);\n      setEventsList([{\n        'title': 'Advising',\n        'allDay': true,\n        'start': startDate,\n        'end': endDate\n      }]);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  useEffect(() => {\n    getAdvisingWindow();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: eventsList,\n      view: \"month\",\n      views: ['month'],\n      style: {\n        height: 450\n      },\n      popup: true,\n      selectable: true //onSelectEvent={event => alert(event.id)}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n}\n\n_s(StaffCalendar, \"1ETiGU1gI3jMU7iob/vLiUQ99HY=\");\n\n_c = StaffCalendar;\nexport default StaffCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"StaffCalendar\");","map":{"version":3,"sources":["/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js"],"names":["React","useEffect","useState","Calendar","momentLocalizer","moment","localizer","StaffCalendar","eventsList","setEventsList","getAdvisingWindow","res","fetch","method","parseData","json","startDate","Date","advisingStart","setDate","getDate","endDate","advisingEnd","err","console","error","message","height"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,mDAAP;AAEA;AACA;AACA;;AACA,MAAMC,SAAS,GAAGF,eAAe,CAACC,MAAD,CAAjC;AAEA;AACA;AACA;;AACA,SAASE,aAAT,GAA0B;AAAA;;AACxB;AACF;AACA;AACE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AAEA;AACF;AACA;;AACE,iBAAeQ,iBAAf,GAAmC;AACjC,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAD,EAAoC;AACzDC,QAAAA,MAAM,EAAE;AADiD,OAApC,CAAvB;AAIA,YAAMC,SAAS,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAxB;AAEA,YAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASH,SAAS,CAACI,aAAnB,CAAlB;AACAF,MAAAA,SAAS,CAACG,OAAV,CAAkBH,SAAS,CAACI,OAAV,KAAsB,CAAxC;AAEA,YAAMC,OAAO,GAAG,IAAIJ,IAAJ,CAASH,SAAS,CAACQ,WAAnB,CAAhB;AACAD,MAAAA,OAAO,CAACF,OAAR,CAAgBE,OAAO,CAACD,OAAR,KAAoB,CAApC;AAGAX,MAAAA,aAAa,CACX,CAAC;AACC,iBAAS,UADV;AAEC,kBAAU,IAFX;AAGC,iBAASO,SAHV;AAIC,eAAOK;AAJR,OAAD,CADW,CAAb;AASD,KAvBD,CAuBE,OAAOE,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACD;AACF;;AAEDzB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,2BACA,QAAC,QAAD;AACE,MAAA,SAAS,EAAEJ,SADb;AAEE,MAAA,MAAM,EAAEE,UAFV;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAE,CAAC,OAAD,CAJT;AAKE,MAAA,KAAK,EAAE;AAAEmB,QAAAA,MAAM,EAAE;AAAV,OALT;AAME,MAAA,KAAK,MANP;AAOE,MAAA,UAAU,MAPZ,CAQE;;AARF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcD;;GAxDQpB,a;;KAAAA,a;AA0DT,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\n/*\n  momentLocalizer is a date localization adapter that is used to localize the data for the calendar component.\n*/\nconst localizer = momentLocalizer(moment)\n\n/*\n  StaffCalendar is component that is displayed on the staff dashboard which shows the current advising schedule.\n*/\nfunction StaffCalendar () {\n  /*\n    The eventsList state is used to store the current academic advising window.\n  */ \n  const [eventsList, setEventsList] = useState([]);\n\n  /*\n    getAdvisingWindow creates a get request to the server that gets the current advising window and stores it to the eventsList state.\n  */\n  async function getAdvisingWindow() {\n    try {\n      const res = await fetch(\"/admin/academic-advising/window\", {\n        method: \"GET\",\n      });\n\n      const parseData = await res.json();\n\n      const startDate = new Date(parseData.advisingStart)\n      startDate.setDate(startDate.getDate() + 1);\n      \n      const endDate = new Date(parseData.advisingEnd)\n      endDate.setDate(endDate.getDate() + 1);\n\n\n      setEventsList(\n        [{\n          'title': 'Advising',\n          'allDay': true,\n          'start': startDate,\n          'end': endDate\n        }]\n      )\n      \n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  useEffect(() => {\n    getAdvisingWindow();\n  }, []);\n\n  return (\n      <div>\n      <Calendar\n        localizer={localizer}\n        events={eventsList}\n        view='month'\n        views={['month']}\n        style={{ height: 450 }}\n        popup\n        selectable\n        //onSelectEvent={event => alert(event.id)}\n      />\n    </div>\n  );\n}\n\nexport default StaffCalendar;\n\n"]},"metadata":{},"sourceType":"module"}