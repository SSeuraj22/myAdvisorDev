"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = speakActivityAndStartDictateOnIncomingActivityFromOthersSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _incomingActivity = require("../actions/incomingActivity");

var _DictateState = require("../constants/DictateState");

var _markActivity = _interopRequireDefault(require("../actions/markActivity"));

var _setDictateState = _interopRequireDefault(require("../actions/setDictateState"));

var _shouldSpeakIncomingActivity = _interopRequireDefault(require("../selectors/shouldSpeakIncomingActivity"));

var _speakableActivity = _interopRequireDefault(require("../definitions/speakableActivity"));

var _stopDictate = _interopRequireDefault(require("../actions/stopDictate"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(speakActivityAndStartDictateOnIncomingActivityFromOthers),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(speakActivityAndStartDictateOnIncomingActivityFromOthersSaga);

function speakActivityAndStartDictateOnIncomingActivityFromOthers(_ref) {
  var userID;
  return _regenerator["default"].wrap(function speakActivityAndStartDictateOnIncomingActivityFromOthers$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          userID = _ref.userID;
          _context2.next = 3;
          return (0, _effects.takeEvery)(function (_ref2) {
            var payload = _ref2.payload,
                type = _ref2.type;
            return (// In Direct Line, the "role" is not filled (yet), but we do know the user ID.
              // In Direct Line Speech, we do not know the user ID, but "role" is filled with "bot" or "user".
              // Here, we do two checks: the speakable activity must not have user ID, and must not have role === 'user'
              type === _incomingActivity.INCOMING_ACTIVITY && payload.activity.from.id !== userID && payload.activity.from.role !== 'user'
            );
          }, /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref3) {
            var activity, shouldSpeakIncomingActivity, shouldSpeak;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    activity = _ref3.payload.activity;
                    _context.next = 3;
                    return (0, _effects.select)(_shouldSpeakIncomingActivity["default"]);

                  case 3:
                    shouldSpeakIncomingActivity = _context.sent;
                    shouldSpeak = (0, _speakableActivity["default"])(activity) && shouldSpeakIncomingActivity;

                    if (!(shouldSpeak && (activity.speak || activity.text || ~(activity.attachments || []).findIndex(function (_ref4) {
                      var _ref4$content = _ref4.content;
                      _ref4$content = _ref4$content === void 0 ? {} : _ref4$content;
                      var speak = _ref4$content.speak;
                      return speak;
                    })))) {
                      _context.next = 8;
                      break;
                    }

                    _context.next = 8;
                    return (0, _effects.put)((0, _markActivity["default"])(activity, 'speak', true));

                  case 8:
                    if (!(shouldSpeak && activity.inputHint === 'expectingInput')) {
                      _context.next = 13;
                      break;
                    }

                    _context.next = 11;
                    return (0, _effects.put)((0, _setDictateState["default"])(_DictateState.WILL_START));

                  case 11:
                    _context.next = 16;
                    break;

                  case 13:
                    if (!(activity.inputHint === 'ignoringInput')) {
                      _context.next = 16;
                      break;
                    }

                    _context.next = 16;
                    return (0, _effects.put)((0, _stopDictate["default"])());

                  case 16:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function speakActivityAndStartDictateOnIncomingActivityFromOthersSaga() {
  return _regenerator["default"].wrap(function speakActivityAndStartDictateOnIncomingActivityFromOthersSaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(speakActivityAndStartDictateOnIncomingActivityFromOthers);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zcGVha0FjdGl2aXR5QW5kU3RhcnREaWN0YXRlT25JbmNvbWluZ0FjdGl2aXR5RnJvbU90aGVyc1NhZ2EuanMiXSwibmFtZXMiOlsic3BlYWtBY3Rpdml0eUFuZFN0YXJ0RGljdGF0ZU9uSW5jb21pbmdBY3Rpdml0eUZyb21PdGhlcnMiLCJzcGVha0FjdGl2aXR5QW5kU3RhcnREaWN0YXRlT25JbmNvbWluZ0FjdGl2aXR5RnJvbU90aGVyc1NhZ2EiLCJ1c2VySUQiLCJwYXlsb2FkIiwidHlwZSIsIklOQ09NSU5HX0FDVElWSVRZIiwiYWN0aXZpdHkiLCJmcm9tIiwiaWQiLCJyb2xlIiwic2hvdWxkU3BlYWtJbmNvbWluZ0FjdGl2aXR5U2VsZWN0b3IiLCJzaG91bGRTcGVha0luY29taW5nQWN0aXZpdHkiLCJzaG91bGRTcGVhayIsInNwZWFrIiwidGV4dCIsImF0dGFjaG1lbnRzIiwiZmluZEluZGV4IiwiY29udGVudCIsImlucHV0SGludCIsIldJTExfU1RBUlQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7cURBRVVBLHdEO3NEQTZCZUMsNEQ7O0FBN0J6QixTQUFVRCx3REFBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBcUVFLFVBQUFBLE1BQXJFLFFBQXFFQSxNQUFyRTtBQUFBO0FBQ0UsaUJBQU0sd0JBQ0o7QUFBQSxnQkFBR0MsT0FBSCxTQUFHQSxPQUFIO0FBQUEsZ0JBQVlDLElBQVosU0FBWUEsSUFBWjtBQUFBLG1CQUNFO0FBQ0E7QUFDQTtBQUNBQSxjQUFBQSxJQUFJLEtBQUtDLG1DQUFULElBQThCRixPQUFPLENBQUNHLFFBQVIsQ0FBaUJDLElBQWpCLENBQXNCQyxFQUF0QixLQUE2Qk4sTUFBM0QsSUFBcUVDLE9BQU8sQ0FBQ0csUUFBUixDQUFpQkMsSUFBakIsQ0FBc0JFLElBQXRCLEtBQStCO0FBSnRHO0FBQUEsV0FESSw0Q0FNSjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUJILG9CQUFBQSxRQUF2QixTQUFZSCxPQUFaLENBQXVCRyxRQUF2QjtBQUFBO0FBQ3NDLDJCQUFNLHFCQUFPSSx1Q0FBUCxDQUFOOztBQUR0QztBQUNRQyxvQkFBQUEsMkJBRFI7QUFFUUMsb0JBQUFBLFdBRlIsR0FFc0IsbUNBQWtCTixRQUFsQixLQUErQkssMkJBRnJEOztBQUFBLDBCQUtJQyxXQUFXLEtBQ1ZOLFFBQVEsQ0FBQ08sS0FBVCxJQUNDUCxRQUFRLENBQUNRLElBRFYsSUFFQyxDQUFDLENBQUNSLFFBQVEsQ0FBQ1MsV0FBVCxJQUF3QixFQUF6QixFQUE2QkMsU0FBN0IsQ0FBdUM7QUFBQSxnREFBR0MsT0FBSDtBQUFBLGlFQUF3QixFQUF4QjtBQUFBLDBCQUFjSixLQUFkLGlCQUFjQSxLQUFkO0FBQUEsNkJBQWlDQSxLQUFqQztBQUFBLHFCQUF2QyxDQUhRLENBTGY7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFVSSwyQkFBTSxrQkFBSSw4QkFBYVAsUUFBYixFQUF1QixPQUF2QixFQUFnQyxJQUFoQyxDQUFKLENBQU47O0FBVko7QUFBQSwwQkFhTU0sV0FBVyxJQUFJTixRQUFRLENBQUNZLFNBQVQsS0FBdUIsZ0JBYjVDO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBY0ksMkJBQU0sa0JBQUksaUNBQWdCQyx3QkFBaEIsQ0FBSixDQUFOOztBQWRKO0FBQUE7QUFBQTs7QUFBQTtBQUFBLDBCQWVhYixRQUFRLENBQUNZLFNBQVQsS0FBdUIsZUFmcEM7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFnQkksMkJBQU0sa0JBQUksOEJBQUosQ0FBTjs7QUFoQko7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FOSSxFQUFOOztBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQTZCZSxTQUFVakIsNERBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU0sZ0NBQWVELHdEQUFmLENBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiY29yZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwdXQsIHNlbGVjdCwgdGFrZUV2ZXJ5IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgSU5DT01JTkdfQUNUSVZJVFkgfSBmcm9tICcuLi9hY3Rpb25zL2luY29taW5nQWN0aXZpdHknO1xuaW1wb3J0IHsgV0lMTF9TVEFSVCB9IGZyb20gJy4uL2NvbnN0YW50cy9EaWN0YXRlU3RhdGUnO1xuaW1wb3J0IG1hcmtBY3Rpdml0eSBmcm9tICcuLi9hY3Rpb25zL21hcmtBY3Rpdml0eSc7XG5pbXBvcnQgc2V0RGljdGF0ZVN0YXRlIGZyb20gJy4uL2FjdGlvbnMvc2V0RGljdGF0ZVN0YXRlJztcbmltcG9ydCBzaG91bGRTcGVha0luY29taW5nQWN0aXZpdHlTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvc2hvdWxkU3BlYWtJbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCBzcGVha2FibGVBY3Rpdml0eSBmcm9tICcuLi9kZWZpbml0aW9ucy9zcGVha2FibGVBY3Rpdml0eSc7XG5pbXBvcnQgc3RvcERpY3RhdGUgZnJvbSAnLi4vYWN0aW9ucy9zdG9wRGljdGF0ZSc7XG5pbXBvcnQgd2hpbGVDb25uZWN0ZWQgZnJvbSAnLi9lZmZlY3RzL3doaWxlQ29ubmVjdGVkJztcblxuZnVuY3Rpb24qIHNwZWFrQWN0aXZpdHlBbmRTdGFydERpY3RhdGVPbkluY29taW5nQWN0aXZpdHlGcm9tT3RoZXJzKHsgdXNlcklEIH0pIHtcbiAgeWllbGQgdGFrZUV2ZXJ5KFxuICAgICh7IHBheWxvYWQsIHR5cGUgfSkgPT5cbiAgICAgIC8vIEluIERpcmVjdCBMaW5lLCB0aGUgXCJyb2xlXCIgaXMgbm90IGZpbGxlZCAoeWV0KSwgYnV0IHdlIGRvIGtub3cgdGhlIHVzZXIgSUQuXG4gICAgICAvLyBJbiBEaXJlY3QgTGluZSBTcGVlY2gsIHdlIGRvIG5vdCBrbm93IHRoZSB1c2VyIElELCBidXQgXCJyb2xlXCIgaXMgZmlsbGVkIHdpdGggXCJib3RcIiBvciBcInVzZXJcIi5cbiAgICAgIC8vIEhlcmUsIHdlIGRvIHR3byBjaGVja3M6IHRoZSBzcGVha2FibGUgYWN0aXZpdHkgbXVzdCBub3QgaGF2ZSB1c2VyIElELCBhbmQgbXVzdCBub3QgaGF2ZSByb2xlID09PSAndXNlcidcbiAgICAgIHR5cGUgPT09IElOQ09NSU5HX0FDVElWSVRZICYmIHBheWxvYWQuYWN0aXZpdHkuZnJvbS5pZCAhPT0gdXNlcklEICYmIHBheWxvYWQuYWN0aXZpdHkuZnJvbS5yb2xlICE9PSAndXNlcicsXG4gICAgZnVuY3Rpb24qKHsgcGF5bG9hZDogeyBhY3Rpdml0eSB9IH0pIHtcbiAgICAgIGNvbnN0IHNob3VsZFNwZWFrSW5jb21pbmdBY3Rpdml0eSA9IHlpZWxkIHNlbGVjdChzaG91bGRTcGVha0luY29taW5nQWN0aXZpdHlTZWxlY3Rvcik7XG4gICAgICBjb25zdCBzaG91bGRTcGVhayA9IHNwZWFrYWJsZUFjdGl2aXR5KGFjdGl2aXR5KSAmJiBzaG91bGRTcGVha0luY29taW5nQWN0aXZpdHk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgc2hvdWxkU3BlYWsgJiZcbiAgICAgICAgKGFjdGl2aXR5LnNwZWFrIHx8XG4gICAgICAgICAgYWN0aXZpdHkudGV4dCB8fFxuICAgICAgICAgIH4oYWN0aXZpdHkuYXR0YWNobWVudHMgfHwgW10pLmZpbmRJbmRleCgoeyBjb250ZW50OiB7IHNwZWFrIH0gPSB7fSB9KSA9PiBzcGVhaykpXG4gICAgICApIHtcbiAgICAgICAgeWllbGQgcHV0KG1hcmtBY3Rpdml0eShhY3Rpdml0eSwgJ3NwZWFrJywgdHJ1ZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkU3BlYWsgJiYgYWN0aXZpdHkuaW5wdXRIaW50ID09PSAnZXhwZWN0aW5nSW5wdXQnKSB7XG4gICAgICAgIHlpZWxkIHB1dChzZXREaWN0YXRlU3RhdGUoV0lMTF9TVEFSVCkpO1xuICAgICAgfSBlbHNlIGlmIChhY3Rpdml0eS5pbnB1dEhpbnQgPT09ICdpZ25vcmluZ0lucHV0Jykge1xuICAgICAgICB5aWVsZCBwdXQoc3RvcERpY3RhdGUoKSk7XG4gICAgICB9XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogc3BlYWtBY3Rpdml0eUFuZFN0YXJ0RGljdGF0ZU9uSW5jb21pbmdBY3Rpdml0eUZyb21PdGhlcnNTYWdhKCkge1xuICB5aWVsZCB3aGlsZUNvbm5lY3RlZChzcGVha0FjdGl2aXR5QW5kU3RhcnREaWN0YXRlT25JbmNvbWluZ0FjdGl2aXR5RnJvbU90aGVycyk7XG59XG4iXX0=