"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = queueIncomingActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _queueIncomingActivity = require("../actions/queueIncomingActivity");

var _activities = _interopRequireWildcard(require("../selectors/activities"));

var _activityFromBot = _interopRequireDefault(require("../definitions/activityFromBot"));

var _incomingActivity = _interopRequireWildcard(require("../actions/incomingActivity"));

var _setSuggestedActions = _interopRequireDefault(require("../actions/setSuggestedActions"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(takeEveryAndSelect),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(waitForActivityId),
    _marked3 = /*#__PURE__*/_regenerator["default"].mark(queueIncomingActivity),
    _marked4 = /*#__PURE__*/_regenerator["default"].mark(queueIncomingActivitySaga);

// We will hold up the replying activity if the originating activity did not arrive, up to 5 seconds.
var REPLY_TIMEOUT = 5000;

function takeEveryAndSelect(actionType, selector, fn) {
  var action, state;
  return _regenerator["default"].wrap(function takeEveryAndSelect$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.cancelled)();

        case 2:
          if (_context.sent) {
            _context.next = 13;
            break;
          }

          _context.next = 5;
          return (0, _effects.take)(actionType);

        case 5:
          action = _context.sent;
          _context.next = 8;
          return (0, _effects.select)(selector);

        case 8:
          state = _context.sent;
          _context.next = 11;
          return (0, _effects.fork)(fn, action, state);

        case 11:
          _context.next = 0;
          break;

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
} // Wait for specific activity to arrive in the transcript.
// We will use the initial set of activities to close time gaps between select() and take().
// If another activity with the same "replyToId" is already rendered (in the "activities" array),
// we will skip the wait as we already waited long enough for the missing activity to show up.


function waitForActivityId(replyToId, initialActivities) {
  var activities, replied, _yield$take, activity;

  return _regenerator["default"].wrap(function waitForActivityId$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          activities = initialActivities;

        case 1:
          replied = activities.find(function (activity) {
            return activity.id === replyToId || activity.replyToId === replyToId;
          });

          if (!replied) {
            _context2.next = 4;
            break;
          }

          return _context2.abrupt("break", 15);

        case 4:
          _context2.next = 6;
          return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

        case 6:
          _yield$take = _context2.sent;
          activity = _yield$take.payload.activity;

          if (!(activity.id === replyToId)) {
            _context2.next = 10;
            break;
          }

          return _context2.abrupt("break", 15);

        case 10:
          _context2.next = 12;
          return (0, _effects.select)(_activities["default"]);

        case 12:
          activities = _context2.sent;

        case 13:
          _context2.next = 1;
          break;

        case 15:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function queueIncomingActivity(_ref) {
  var userID;
  return _regenerator["default"].wrap(function queueIncomingActivity$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          userID = _ref.userID;
          _context4.next = 3;
          return takeEveryAndSelect(_queueIncomingActivity.QUEUE_INCOMING_ACTIVITY, _activities["default"], /*#__PURE__*/_regenerator["default"].mark(function queueIncomingActivity(_ref2, initialActivities) {
            var activity, replyToId, initialBotActivities, result, messageActivities, lastMessageActivity, _lastMessageActivity$, actions, to;

            return _regenerator["default"].wrap(function queueIncomingActivity$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    activity = _ref2.payload.activity;
                    // This is for resolving an accessibility issue.
                    // If the incoming activity has "replyToId" field, hold on it until the activity replied to is in the transcript, then release this one.
                    replyToId = activity.replyToId;
                    initialBotActivities = initialActivities.filter(function (_ref3) {
                      var role = _ref3.from.role;
                      return role === 'bot';
                    }); // To speed up the first activity render time, we do not delay the first activity from the bot.
                    // Even if it is the first activity from the bot, the bot might be "replying" to the "conversationUpdate" event.
                    // Thus, the "replyToId" will always be there even it is the first activity in the conversation.

                    if (!(replyToId && initialBotActivities.length)) {
                      _context3.next = 8;
                      break;
                    }

                    _context3.next = 6;
                    return (0, _effects.race)({
                      _: waitForActivityId(replyToId, initialActivities),
                      timeout: (0, _effects.call)(_sleep["default"], REPLY_TIMEOUT)
                    });

                  case 6:
                    result = _context3.sent;

                    if ('timeout' in result) {
                      console.warn("botframework-webchat: Timed out while waiting for activity \"".concat(replyToId, "\" which activity \"").concat(activity.id, "\" is replying to."), {
                        activity: activity,
                        replyToId: replyToId
                      });
                    }

                  case 8:
                    _context3.next = 10;
                    return (0, _effects.put)((0, _incomingActivity["default"])(activity));

                  case 10:
                    _context3.next = 12;
                    return (0, _effects.select)((0, _activities.ofType)('message'));

                  case 12:
                    messageActivities = _context3.sent;
                    lastMessageActivity = messageActivities[messageActivities.length - 1];

                    if (!(0, _activityFromBot["default"])(lastMessageActivity)) {
                      _context3.next = 20;
                      break;
                    }

                    _lastMessageActivity$ = lastMessageActivity.suggestedActions;
                    _lastMessageActivity$ = _lastMessageActivity$ === void 0 ? {} : _lastMessageActivity$;
                    actions = _lastMessageActivity$.actions, to = _lastMessageActivity$.to; // If suggested actions is not destined to anyone, or is destined to the user, show it.
                    // In other words, if suggested actions is destined to someone else, don't show it.

                    _context3.next = 20;
                    return (0, _effects.put)((0, _setSuggestedActions["default"])(to && to.length && !to.includes(userID) ? null : actions));

                  case 20:
                  case "end":
                    return _context3.stop();
                }
              }
            }, queueIncomingActivity);
          }));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked3);
}

function queueIncomingActivitySaga() {
  return _regenerator["default"].wrap(function queueIncomingActivitySaga$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return (0, _whileConnected["default"])(queueIncomingActivity);

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked4);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,