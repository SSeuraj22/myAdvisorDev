"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = observeActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _observeEach = _interopRequireDefault(require("./effects/observeEach"));

var _queueIncomingActivity = _interopRequireDefault(require("../actions/queueIncomingActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivity),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivitySaga);

var PASSTHRU_FN = function PASSTHRU_FN(value) {
  return value;
};

function patchActivityWithFromRole(activity, userID) {
  // Some activities, such as "ConversationUpdate", does not have "from" defined.
  // And although "role" is defined in Direct Line spec, it was not sent over the wire.
  // We normalize the activity here to simplify null-check and logic later.
  // Patch activity.from.role to make sure its either "bot", "user", or "channel"
  if (!activity.from) {
    activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
      return 'channel';
    });
  } else if (!activity.from.role) {
    if (activity.from.id === userID) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'user';
      });
    } else if (activity.from.id) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'bot';
      });
    } else {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'channel';
      });
    }
  }

  return activity;
}

function patchNullAsUndefined(activity) {
  // These fields are known used in Web Chat and in any cases, they should not be null, but undefined.
  // The only field omitted is "value", as it could be null purposefully.
  return ['attachmentLayout', 'attachments', 'channelData', 'conversation', 'entities', 'from', 'inputHint', 'locale', 'name', 'recipient', 'speak', 'suggestedActions', 'text', 'textFormat', 'timestamp', 'type'].reduce(function (activity, name) {
    var value = activity[name];
    return (0, _simpleUpdateIn["default"])(activity, [name], typeof value === 'undefined' || value === null ? undefined : PASSTHRU_FN);
  }, activity);
}

function observeActivity(_ref) {
  var directLine, userID;
  return _regenerator["default"].wrap(function observeActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          directLine = _ref.directLine, userID = _ref.userID;
          _context2.next = 3;
          return (0, _observeEach["default"])(directLine.activity$, /*#__PURE__*/_regenerator["default"].mark(function observeActivity(activity) {
            return _regenerator["default"].wrap(function observeActivity$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    activity = patchNullAsUndefined(activity);
                    activity = patchActivityWithFromRole(activity, userID);
                    _context.next = 4;
                    return (0, _effects.put)((0, _queueIncomingActivity["default"])(activity));

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, observeActivity);
          }));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function observeActivitySaga() {
  return _regenerator["default"].wrap(function observeActivitySaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(observeActivity);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9vYnNlcnZlQWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbIm9ic2VydmVBY3Rpdml0eSIsIm9ic2VydmVBY3Rpdml0eVNhZ2EiLCJQQVNTVEhSVV9GTiIsInZhbHVlIiwicGF0Y2hBY3Rpdml0eVdpdGhGcm9tUm9sZSIsImFjdGl2aXR5IiwidXNlcklEIiwiZnJvbSIsInJvbGUiLCJpZCIsInBhdGNoTnVsbEFzVW5kZWZpbmVkIiwicmVkdWNlIiwibmFtZSIsInVuZGVmaW5lZCIsImRpcmVjdExpbmUiLCJhY3Rpdml0eSQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7cURBcURVQSxlO3NEQVNlQyxtQjs7QUE1RHpCLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFKO0FBQUEsQ0FBekI7O0FBRUEsU0FBU0MseUJBQVQsQ0FBbUNDLFFBQW5DLEVBQTZDQyxNQUE3QyxFQUFxRDtBQUNuRDtBQUNBO0FBQ0E7QUFFQTtBQUNBLE1BQUksQ0FBQ0QsUUFBUSxDQUFDRSxJQUFkLEVBQW9CO0FBQ2xCRixJQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGFBQU0sU0FBTjtBQUFBLEtBQXJDLENBQVg7QUFDRCxHQUZELE1BRU8sSUFBSSxDQUFDQSxRQUFRLENBQUNFLElBQVQsQ0FBY0MsSUFBbkIsRUFBeUI7QUFDOUIsUUFBSUgsUUFBUSxDQUFDRSxJQUFULENBQWNFLEVBQWQsS0FBcUJILE1BQXpCLEVBQWlDO0FBQy9CRCxNQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGVBQU0sTUFBTjtBQUFBLE9BQXJDLENBQVg7QUFDRCxLQUZELE1BRU8sSUFBSUEsUUFBUSxDQUFDRSxJQUFULENBQWNFLEVBQWxCLEVBQXNCO0FBQzNCSixNQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGVBQU0sS0FBTjtBQUFBLE9BQXJDLENBQVg7QUFDRCxLQUZNLE1BRUE7QUFDTEEsTUFBQUEsUUFBUSxHQUFHLGdDQUFTQSxRQUFULEVBQW1CLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBbkIsRUFBcUM7QUFBQSxlQUFNLFNBQU47QUFBQSxPQUFyQyxDQUFYO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQSxRQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssb0JBQVQsQ0FBOEJMLFFBQTlCLEVBQXdDO0FBQ3RDO0FBQ0E7QUFFQSxTQUFPLENBQ0wsa0JBREssRUFFTCxhQUZLLEVBR0wsYUFISyxFQUlMLGNBSkssRUFLTCxVQUxLLEVBTUwsTUFOSyxFQU9MLFdBUEssRUFRTCxRQVJLLEVBU0wsTUFUSyxFQVVMLFdBVkssRUFXTCxPQVhLLEVBWUwsa0JBWkssRUFhTCxNQWJLLEVBY0wsWUFkSyxFQWVMLFdBZkssRUFnQkwsTUFoQkssRUFpQkxNLE1BakJLLENBaUJFLFVBQUNOLFFBQUQsRUFBV08sSUFBWCxFQUFvQjtBQUFBLFFBQ1hULEtBRFcsR0FDREUsUUFEQyxDQUNsQk8sSUFEa0I7QUFHM0IsV0FBTyxnQ0FBU1AsUUFBVCxFQUFtQixDQUFDTyxJQUFELENBQW5CLEVBQTJCLE9BQU9ULEtBQVAsS0FBaUIsV0FBakIsSUFBZ0NBLEtBQUssS0FBSyxJQUExQyxHQUFpRFUsU0FBakQsR0FBNkRYLFdBQXhGLENBQVA7QUFDRCxHQXJCTSxFQXFCSkcsUUFyQkksQ0FBUDtBQXNCRDs7QUFFRCxTQUFVTCxlQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUE0QmMsVUFBQUEsVUFBNUIsUUFBNEJBLFVBQTVCLEVBQXdDUixNQUF4QyxRQUF3Q0EsTUFBeEM7QUFBQTtBQUNFLGlCQUFNLDZCQUFZUSxVQUFVLENBQUNDLFNBQXZCLDRDQUFrQyxTQUFVZixlQUFWLENBQTBCSyxRQUExQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ3RDQSxvQkFBQUEsUUFBUSxHQUFHSyxvQkFBb0IsQ0FBQ0wsUUFBRCxDQUEvQjtBQUNBQSxvQkFBQUEsUUFBUSxHQUFHRCx5QkFBeUIsQ0FBQ0MsUUFBRCxFQUFXQyxNQUFYLENBQXBDO0FBRnNDO0FBSXRDLDJCQUFNLGtCQUFJLHVDQUFzQkQsUUFBdEIsQ0FBSixDQUFOOztBQUpzQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBVUwsZUFBVjtBQUFBLFdBQWxDLEVBQU47O0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBU2UsU0FBVUMsbUJBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU0sZ0NBQWVELGVBQWYsQ0FBTjs7QUFEYTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB1dCB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgdXBkYXRlSW4gZnJvbSAnc2ltcGxlLXVwZGF0ZS1pbic7XG5cbmltcG9ydCBvYnNlcnZlRWFjaCBmcm9tICcuL2VmZmVjdHMvb2JzZXJ2ZUVhY2gnO1xuaW1wb3J0IHF1ZXVlSW5jb21pbmdBY3Rpdml0eSBmcm9tICcuLi9hY3Rpb25zL3F1ZXVlSW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgd2hpbGVDb25uZWN0ZWQgZnJvbSAnLi9lZmZlY3RzL3doaWxlQ29ubmVjdGVkJztcblxuY29uc3QgUEFTU1RIUlVfRk4gPSB2YWx1ZSA9PiB2YWx1ZTtcblxuZnVuY3Rpb24gcGF0Y2hBY3Rpdml0eVdpdGhGcm9tUm9sZShhY3Rpdml0eSwgdXNlcklEKSB7XG4gIC8vIFNvbWUgYWN0aXZpdGllcywgc3VjaCBhcyBcIkNvbnZlcnNhdGlvblVwZGF0ZVwiLCBkb2VzIG5vdCBoYXZlIFwiZnJvbVwiIGRlZmluZWQuXG4gIC8vIEFuZCBhbHRob3VnaCBcInJvbGVcIiBpcyBkZWZpbmVkIGluIERpcmVjdCBMaW5lIHNwZWMsIGl0IHdhcyBub3Qgc2VudCBvdmVyIHRoZSB3aXJlLlxuICAvLyBXZSBub3JtYWxpemUgdGhlIGFjdGl2aXR5IGhlcmUgdG8gc2ltcGxpZnkgbnVsbC1jaGVjayBhbmQgbG9naWMgbGF0ZXIuXG5cbiAgLy8gUGF0Y2ggYWN0aXZpdHkuZnJvbS5yb2xlIHRvIG1ha2Ugc3VyZSBpdHMgZWl0aGVyIFwiYm90XCIsIFwidXNlclwiLCBvciBcImNoYW5uZWxcIlxuICBpZiAoIWFjdGl2aXR5LmZyb20pIHtcbiAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2Zyb20nLCAncm9sZSddLCAoKSA9PiAnY2hhbm5lbCcpO1xuICB9IGVsc2UgaWYgKCFhY3Rpdml0eS5mcm9tLnJvbGUpIHtcbiAgICBpZiAoYWN0aXZpdHkuZnJvbS5pZCA9PT0gdXNlcklEKSB7XG4gICAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2Zyb20nLCAncm9sZSddLCAoKSA9PiAndXNlcicpO1xuICAgIH0gZWxzZSBpZiAoYWN0aXZpdHkuZnJvbS5pZCkge1xuICAgICAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydmcm9tJywgJ3JvbGUnXSwgKCkgPT4gJ2JvdCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2Zyb20nLCAncm9sZSddLCAoKSA9PiAnY2hhbm5lbCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhY3Rpdml0eTtcbn1cblxuZnVuY3Rpb24gcGF0Y2hOdWxsQXNVbmRlZmluZWQoYWN0aXZpdHkpIHtcbiAgLy8gVGhlc2UgZmllbGRzIGFyZSBrbm93biB1c2VkIGluIFdlYiBDaGF0IGFuZCBpbiBhbnkgY2FzZXMsIHRoZXkgc2hvdWxkIG5vdCBiZSBudWxsLCBidXQgdW5kZWZpbmVkLlxuICAvLyBUaGUgb25seSBmaWVsZCBvbWl0dGVkIGlzIFwidmFsdWVcIiwgYXMgaXQgY291bGQgYmUgbnVsbCBwdXJwb3NlZnVsbHkuXG5cbiAgcmV0dXJuIFtcbiAgICAnYXR0YWNobWVudExheW91dCcsXG4gICAgJ2F0dGFjaG1lbnRzJyxcbiAgICAnY2hhbm5lbERhdGEnLFxuICAgICdjb252ZXJzYXRpb24nLFxuICAgICdlbnRpdGllcycsXG4gICAgJ2Zyb20nLFxuICAgICdpbnB1dEhpbnQnLFxuICAgICdsb2NhbGUnLFxuICAgICduYW1lJyxcbiAgICAncmVjaXBpZW50JyxcbiAgICAnc3BlYWsnLFxuICAgICdzdWdnZXN0ZWRBY3Rpb25zJyxcbiAgICAndGV4dCcsXG4gICAgJ3RleHRGb3JtYXQnLFxuICAgICd0aW1lc3RhbXAnLFxuICAgICd0eXBlJ1xuICBdLnJlZHVjZSgoYWN0aXZpdHksIG5hbWUpID0+IHtcbiAgICBjb25zdCB7IFtuYW1lXTogdmFsdWUgfSA9IGFjdGl2aXR5O1xuXG4gICAgcmV0dXJuIHVwZGF0ZUluKGFjdGl2aXR5LCBbbmFtZV0sIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwgPyB1bmRlZmluZWQgOiBQQVNTVEhSVV9GTik7XG4gIH0sIGFjdGl2aXR5KTtcbn1cblxuZnVuY3Rpb24qIG9ic2VydmVBY3Rpdml0eSh7IGRpcmVjdExpbmUsIHVzZXJJRCB9KSB7XG4gIHlpZWxkIG9ic2VydmVFYWNoKGRpcmVjdExpbmUuYWN0aXZpdHkkLCBmdW5jdGlvbiogb2JzZXJ2ZUFjdGl2aXR5KGFjdGl2aXR5KSB7XG4gICAgYWN0aXZpdHkgPSBwYXRjaE51bGxBc1VuZGVmaW5lZChhY3Rpdml0eSk7XG4gICAgYWN0aXZpdHkgPSBwYXRjaEFjdGl2aXR5V2l0aEZyb21Sb2xlKGFjdGl2aXR5LCB1c2VySUQpO1xuXG4gICAgeWllbGQgcHV0KHF1ZXVlSW5jb21pbmdBY3Rpdml0eShhY3Rpdml0eSkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIG9ic2VydmVBY3Rpdml0eVNhZ2EoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKG9ic2VydmVBY3Rpdml0eSk7XG59XG4iXX0=