"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createStore;
exports.withDevTools = withDevTools;

var _redux = require("redux");

var _reduxDevtoolsExtension = require("redux-devtools-extension");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _reducer = _interopRequireDefault(require("./reducer"));

var _sagaError = _interopRequireDefault(require("./actions/sagaError"));

var _sagas = _interopRequireDefault(require("./sagas"));

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
// This is for the racing between sagaMiddleware and store

/* eslint no-use-before-define: "off" */
function createEnhancerAndSagaMiddleware(getStore) {
  var sagaMiddleware = (0, _reduxSaga["default"])({
    onError: function onError() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var err = args[0];
      console.error(err);
      var store = getStore();
      store && store.dispatch((0, _sagaError["default"])());
    }
  });

  for (var _len = arguments.length, middlewares = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    middlewares[_key - 1] = arguments[_key];
  }

  return {
    enhancer: _redux.applyMiddleware.apply(void 0, middlewares.concat([sagaMiddleware])),
    sagaMiddleware: sagaMiddleware
  };
}

function createStore(initialState) {
  for (var _len3 = arguments.length, middlewares = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    middlewares[_key3 - 1] = arguments[_key3];
  }

  var _createEnhancerAndSag = createEnhancerAndSagaMiddleware.apply(void 0, [function () {
    return store;
  }].concat(middlewares)),
      enhancer = _createEnhancerAndSag.enhancer,
      sagaMiddleware = _createEnhancerAndSag.sagaMiddleware;

  var store = (0, _redux.createStore)(_reducer["default"], initialState || {}, enhancer);
  sagaMiddleware.run(_sagas["default"]);
  return store;
}

function withDevTools(initialState) {
  for (var _len4 = arguments.length, middlewares = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    middlewares[_key4 - 1] = arguments[_key4];
  }

  var _createEnhancerAndSag2 = createEnhancerAndSagaMiddleware.apply(void 0, [function () {
    return store;
  }].concat(middlewares)),
      enhancer = _createEnhancerAndSag2.enhancer,
      sagaMiddleware = _createEnhancerAndSag2.sagaMiddleware;

  var store = (0, _redux.createStore)(_reducer["default"], initialState || {}, (0, _reduxDevtoolsExtension.composeWithDevTools)(enhancer));
  sagaMiddleware.run(_sagas["default"]);
  return store;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVTdG9yZS50cyJdLCJuYW1lcyI6WyJjcmVhdGVFbmhhbmNlckFuZFNhZ2FNaWRkbGV3YXJlIiwiZ2V0U3RvcmUiLCJzYWdhTWlkZGxld2FyZSIsIm9uRXJyb3IiLCJhcmdzIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwic3RvcmUiLCJkaXNwYXRjaCIsIm1pZGRsZXdhcmVzIiwiZW5oYW5jZXIiLCJhcHBseU1pZGRsZXdhcmUiLCJjcmVhdGVTdG9yZSIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXIiLCJydW4iLCJzYWdhcyIsIndpdGhEZXZUb29scyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQVZBO0FBQ0E7O0FBQ0E7QUFVQSxTQUFTQSwrQkFBVCxDQUF5Q0MsUUFBekMsRUFBbUU7QUFDakUsTUFBTUMsY0FBYyxHQUFHLDJCQUFxQjtBQUMxQ0MsSUFBQUEsT0FBTyxFQUFFLG1CQUFhO0FBQUEseUNBQVRDLElBQVM7QUFBVEEsUUFBQUEsSUFBUztBQUFBOztBQUFBLFVBQ2JDLEdBRGEsR0FDTkQsSUFETTtBQUdwQkUsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWNGLEdBQWQ7QUFFQSxVQUFNRyxLQUFLLEdBQUdQLFFBQVEsRUFBdEI7QUFFQU8sTUFBQUEsS0FBSyxJQUFJQSxLQUFLLENBQUNDLFFBQU4sQ0FBZSw0QkFBZixDQUFUO0FBQ0Q7QUFUeUMsR0FBckIsQ0FBdkI7O0FBRGlFLG9DQUFiQyxXQUFhO0FBQWJBLElBQUFBLFdBQWE7QUFBQTs7QUFhakUsU0FBTztBQUNMQyxJQUFBQSxRQUFRLEVBQUVDLHFDQUFtQkYsV0FBbkIsU0FBZ0NSLGNBQWhDLEdBREw7QUFFTEEsSUFBQUEsY0FBYyxFQUFkQTtBQUZLLEdBQVA7QUFJRDs7QUFFYyxTQUFTVyxXQUFULENBQXFCQyxZQUFyQixFQUEwRDtBQUFBLHFDQUFwQkosV0FBb0I7QUFBcEJBLElBQUFBLFdBQW9CO0FBQUE7O0FBQUEsOEJBQ2xDViwrQkFBK0IsTUFBL0IsVUFBZ0M7QUFBQSxXQUFNUSxLQUFOO0FBQUEsR0FBaEMsU0FBZ0RFLFdBQWhELEVBRGtDO0FBQUEsTUFDL0RDLFFBRCtELHlCQUMvREEsUUFEK0Q7QUFBQSxNQUNyRFQsY0FEcUQseUJBQ3JEQSxjQURxRDs7QUFFdkUsTUFBTU0sS0FBSyxHQUFHLHdCQUFpQk8sbUJBQWpCLEVBQTBCRCxZQUFZLElBQUksRUFBMUMsRUFBOENILFFBQTlDLENBQWQ7QUFFQVQsRUFBQUEsY0FBYyxDQUFDYyxHQUFmLENBQW1CQyxpQkFBbkI7QUFFQSxTQUFPVCxLQUFQO0FBQ0Q7O0FBRU0sU0FBU1UsWUFBVCxDQUFzQkosWUFBdEIsRUFBMkQ7QUFBQSxxQ0FBcEJKLFdBQW9CO0FBQXBCQSxJQUFBQSxXQUFvQjtBQUFBOztBQUFBLCtCQUMzQlYsK0JBQStCLE1BQS9CLFVBQWdDO0FBQUEsV0FBTVEsS0FBTjtBQUFBLEdBQWhDLFNBQWdERSxXQUFoRCxFQUQyQjtBQUFBLE1BQ3hEQyxRQUR3RCwwQkFDeERBLFFBRHdEO0FBQUEsTUFDOUNULGNBRDhDLDBCQUM5Q0EsY0FEOEM7O0FBRWhFLE1BQU1NLEtBQUssR0FBRyx3QkFBaUJPLG1CQUFqQixFQUEwQkQsWUFBWSxJQUFJLEVBQTFDLEVBQThDLGlEQUFvQkgsUUFBcEIsQ0FBOUMsQ0FBZDtBQUVBVCxFQUFBQSxjQUFjLENBQUNjLEdBQWYsQ0FBbUJDLGlCQUFuQjtBQUVBLFNBQU9ULEtBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMgKi9cbi8vIFRoaXMgaXMgZm9yIHRoZSByYWNpbmcgYmV0d2VlbiBzYWdhTWlkZGxld2FyZSBhbmQgc3RvcmVcbi8qIGVzbGludCBuby11c2UtYmVmb3JlLWRlZmluZTogXCJvZmZcIiAqL1xuXG5pbXBvcnQgeyBhcHBseU1pZGRsZXdhcmUsIGNyZWF0ZVN0b3JlIGFzIGNyZWF0ZVJlZHV4U3RvcmUsIFN0b3JlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgY29tcG9zZVdpdGhEZXZUb29scyB9IGZyb20gJ3JlZHV4LWRldnRvb2xzLWV4dGVuc2lvbic7XG5pbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSAncmVkdXgtc2FnYSc7XG5cbmltcG9ydCByZWR1Y2VyIGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQgc2FnYUVycm9yIGZyb20gJy4vYWN0aW9ucy9zYWdhRXJyb3InO1xuaW1wb3J0IHNhZ2FzIGZyb20gJy4vc2FnYXMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbmhhbmNlckFuZFNhZ2FNaWRkbGV3YXJlKGdldFN0b3JlLCAuLi5taWRkbGV3YXJlcykge1xuICBjb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKHtcbiAgICBvbkVycm9yOiAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgW2Vycl0gPSBhcmdzO1xuXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG5cbiAgICAgIGNvbnN0IHN0b3JlID0gZ2V0U3RvcmUoKTtcblxuICAgICAgc3RvcmUgJiYgc3RvcmUuZGlzcGF0Y2goc2FnYUVycm9yKCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBlbmhhbmNlcjogYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzLCBzYWdhTWlkZGxld2FyZSksXG4gICAgc2FnYU1pZGRsZXdhcmVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3RvcmUoaW5pdGlhbFN0YXRlLCAuLi5taWRkbGV3YXJlcyk6IFN0b3JlIHtcbiAgY29uc3QgeyBlbmhhbmNlciwgc2FnYU1pZGRsZXdhcmUgfSA9IGNyZWF0ZUVuaGFuY2VyQW5kU2FnYU1pZGRsZXdhcmUoKCkgPT4gc3RvcmUsIC4uLm1pZGRsZXdhcmVzKTtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVSZWR1eFN0b3JlKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSB8fCB7fSwgZW5oYW5jZXIpO1xuXG4gIHNhZ2FNaWRkbGV3YXJlLnJ1bihzYWdhcyk7XG5cbiAgcmV0dXJuIHN0b3JlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aERldlRvb2xzKGluaXRpYWxTdGF0ZSwgLi4ubWlkZGxld2FyZXMpOiBTdG9yZSB7XG4gIGNvbnN0IHsgZW5oYW5jZXIsIHNhZ2FNaWRkbGV3YXJlIH0gPSBjcmVhdGVFbmhhbmNlckFuZFNhZ2FNaWRkbGV3YXJlKCgpID0+IHN0b3JlLCAuLi5taWRkbGV3YXJlcyk7XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlUmVkdXhTdG9yZShyZWR1Y2VyLCBpbml0aWFsU3RhdGUgfHwge30sIGNvbXBvc2VXaXRoRGV2VG9vbHMoZW5oYW5jZXIpKTtcblxuICBzYWdhTWlkZGxld2FyZS5ydW4oc2FnYXMpO1xuXG4gIHJldHVybiBzdG9yZTtcbn1cbiJdfQ==