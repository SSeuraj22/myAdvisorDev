"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useParseAdaptiveCardJSON;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _react = require("react");

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../useAdaptiveCardsPackage"));

var useDirection = _botframeworkWebchatComponent.hooks.useDirection,
    useStyleOptions = _botframeworkWebchatComponent.hooks.useStyleOptions;

function updateRTLInline(element, rtl, adaptiveCardsPackage) {
  if (element instanceof adaptiveCardsPackage.Container) {
    element.rtl = rtl;
  } // Tree traversal to add rtl boolean to child elements


  if (element.getItemAt && element.getItemCount) {
    var count = element.getItemCount();

    for (var index = 0; index < count; index++) {
      var child = element.getItemAt(index);
      updateRTLInline(child, rtl, adaptiveCardsPackage);
    }
  }
}

function useParseAdaptiveCardJSON() {
  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];

  var _useDirection = useDirection(),
      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),
      direction = _useDirection2[0];

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = (0, _slicedToArray2.default)(_useStyleOptions, 1),
      adaptiveCardsParserMaxVersion = _useStyleOptions2[0].adaptiveCardsParserMaxVersion;

  var AdaptiveCard = adaptiveCardsPackage.AdaptiveCard,
      SerializationContext = adaptiveCardsPackage.SerializationContext,
      Version = adaptiveCardsPackage.Version;
  var maxVersion = (0, _react.useMemo)(function () {
    var maxVersion = Version.parse(adaptiveCardsParserMaxVersion, new SerializationContext());

    if (maxVersion && !maxVersion.isValid) {
      return console.warn('botframework-webchat: "adaptiveCardsParserMaxVersion" specified is not a valid version.');
    }

    return maxVersion;
  }, [adaptiveCardsParserMaxVersion, SerializationContext, Version]);
  return (0, _react.useCallback)(function (content) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$ignoreErrors = _ref.ignoreErrors,
        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;

    if (!content) {
      return;
    }

    var card = new AdaptiveCard();
    var errors = [];
    var serializationContext = new SerializationContext(maxVersion);
    card.parse(content, serializationContext);
    var eventCount = serializationContext.eventCount;

    for (var i = 0; i < eventCount; i++) {
      errors.push(serializationContext.getEventAt(i));
    }

    if (!ignoreErrors && errors.length) {
      console.error('botframework-webchat: Failed to parse Adaptive Card', {
        errors: errors
      });
      throw new Error('botframework-webchat: Failed to parse Adaptive Card');
    }

    updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);
    return card;
  }, [AdaptiveCard, adaptiveCardsPackage, direction, maxVersion, SerializationContext]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL2hvb2tzL2ludGVybmFsL3VzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTi5qcyJdLCJuYW1lcyI6WyJ1c2VEaXJlY3Rpb24iLCJob29rcyIsInVzZVN0eWxlT3B0aW9ucyIsInVwZGF0ZVJUTElubGluZSIsImVsZW1lbnQiLCJydGwiLCJhZGFwdGl2ZUNhcmRzUGFja2FnZSIsIkNvbnRhaW5lciIsImdldEl0ZW1BdCIsImdldEl0ZW1Db3VudCIsImNvdW50IiwiaW5kZXgiLCJjaGlsZCIsInVzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTiIsImRpcmVjdGlvbiIsImFkYXB0aXZlQ2FyZHNQYXJzZXJNYXhWZXJzaW9uIiwiQWRhcHRpdmVDYXJkIiwiU2VyaWFsaXphdGlvbkNvbnRleHQiLCJWZXJzaW9uIiwibWF4VmVyc2lvbiIsInBhcnNlIiwiaXNWYWxpZCIsImNvbnNvbGUiLCJ3YXJuIiwiY29udGVudCIsImlnbm9yZUVycm9ycyIsImNhcmQiLCJlcnJvcnMiLCJzZXJpYWxpemF0aW9uQ29udGV4dCIsImV2ZW50Q291bnQiLCJpIiwicHVzaCIsImdldEV2ZW50QXQiLCJsZW5ndGgiLCJlcnJvciIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztJQUVRQSxZLEdBQWtDQyxtQyxDQUFsQ0QsWTtJQUFjRSxlLEdBQW9CRCxtQyxDQUFwQkMsZTs7QUFFdEIsU0FBU0MsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLEdBQWxDLEVBQXVDQyxvQkFBdkMsRUFBNkQ7QUFDM0QsTUFBSUYsT0FBTyxZQUFZRSxvQkFBb0IsQ0FBQ0MsU0FBNUMsRUFBdUQ7QUFDckRILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixHQUFjQSxHQUFkO0FBQ0QsR0FIMEQsQ0FLM0Q7OztBQUNBLE1BQUlELE9BQU8sQ0FBQ0ksU0FBUixJQUFxQkosT0FBTyxDQUFDSyxZQUFqQyxFQUErQztBQUM3QyxRQUFNQyxLQUFLLEdBQUdOLE9BQU8sQ0FBQ0ssWUFBUixFQUFkOztBQUVBLFNBQUssSUFBSUUsS0FBSyxHQUFHLENBQWpCLEVBQW9CQSxLQUFLLEdBQUdELEtBQTVCLEVBQW1DQyxLQUFLLEVBQXhDLEVBQTRDO0FBQzFDLFVBQU1DLEtBQUssR0FBR1IsT0FBTyxDQUFDSSxTQUFSLENBQWtCRyxLQUFsQixDQUFkO0FBRUFSLE1BQUFBLGVBQWUsQ0FBQ1MsS0FBRCxFQUFRUCxHQUFSLEVBQWFDLG9CQUFiLENBQWY7QUFDRDtBQUNGO0FBQ0Y7O0FBRWMsU0FBU08sd0JBQVQsR0FBb0M7QUFBQSw4QkFDbEIsdUNBRGtCO0FBQUE7QUFBQSxNQUMxQ1Asb0JBRDBDOztBQUFBLHNCQUU3Qk4sWUFBWSxFQUZpQjtBQUFBO0FBQUEsTUFFMUNjLFNBRjBDOztBQUFBLHlCQUdMWixlQUFlLEVBSFY7QUFBQTtBQUFBLE1BR3hDYSw2QkFId0Msd0JBR3hDQSw2QkFId0M7O0FBQUEsTUFLekNDLFlBTHlDLEdBS09WLG9CQUxQLENBS3pDVSxZQUx5QztBQUFBLE1BSzNCQyxvQkFMMkIsR0FLT1gsb0JBTFAsQ0FLM0JXLG9CQUwyQjtBQUFBLE1BS0xDLE9BTEssR0FLT1osb0JBTFAsQ0FLTFksT0FMSztBQU9qRCxNQUFNQyxVQUFVLEdBQUcsb0JBQVEsWUFBTTtBQUMvQixRQUFNQSxVQUFVLEdBQUdELE9BQU8sQ0FBQ0UsS0FBUixDQUFjTCw2QkFBZCxFQUE2QyxJQUFJRSxvQkFBSixFQUE3QyxDQUFuQjs7QUFFQSxRQUFJRSxVQUFVLElBQUksQ0FBQ0EsVUFBVSxDQUFDRSxPQUE5QixFQUF1QztBQUNyQyxhQUFPQyxPQUFPLENBQUNDLElBQVIsQ0FBYSx5RkFBYixDQUFQO0FBQ0Q7O0FBRUQsV0FBT0osVUFBUDtBQUNELEdBUmtCLEVBUWhCLENBQUNKLDZCQUFELEVBQWdDRSxvQkFBaEMsRUFBc0RDLE9BQXRELENBUmdCLENBQW5CO0FBVUEsU0FBTyx3QkFDTCxVQUFDTSxPQUFELEVBQTRDO0FBQUEsbUZBQVAsRUFBTztBQUFBLGlDQUFoQ0MsWUFBZ0M7QUFBQSxRQUFoQ0EsWUFBZ0Msa0NBQWpCLEtBQWlCOztBQUMxQyxRQUFJLENBQUNELE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBRUQsUUFBTUUsSUFBSSxHQUFHLElBQUlWLFlBQUosRUFBYjtBQUNBLFFBQU1XLE1BQU0sR0FBRyxFQUFmO0FBQ0EsUUFBTUMsb0JBQW9CLEdBQUcsSUFBSVgsb0JBQUosQ0FBeUJFLFVBQXpCLENBQTdCO0FBRUFPLElBQUFBLElBQUksQ0FBQ04sS0FBTCxDQUFXSSxPQUFYLEVBQW9CSSxvQkFBcEI7QUFUMEMsUUFXbENDLFVBWGtDLEdBV25CRCxvQkFYbUIsQ0FXbENDLFVBWGtDOztBQWExQyxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELFVBQXBCLEVBQWdDQyxDQUFDLEVBQWpDLEVBQXFDO0FBQ25DSCxNQUFBQSxNQUFNLENBQUNJLElBQVAsQ0FBWUgsb0JBQW9CLENBQUNJLFVBQXJCLENBQWdDRixDQUFoQyxDQUFaO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDTCxZQUFELElBQWlCRSxNQUFNLENBQUNNLE1BQTVCLEVBQW9DO0FBQ2xDWCxNQUFBQSxPQUFPLENBQUNZLEtBQVIsQ0FBYyxxREFBZCxFQUFxRTtBQUFFUCxRQUFBQSxNQUFNLEVBQU5BO0FBQUYsT0FBckU7QUFFQSxZQUFNLElBQUlRLEtBQUosQ0FBVSxxREFBVixDQUFOO0FBQ0Q7O0FBRURoQyxJQUFBQSxlQUFlLENBQUN1QixJQUFELEVBQU9aLFNBQVMsS0FBSyxLQUFyQixFQUE0QlIsb0JBQTVCLENBQWY7QUFFQSxXQUFPb0IsSUFBUDtBQUNELEdBM0JJLEVBNEJMLENBQUNWLFlBQUQsRUFBZVYsb0JBQWYsRUFBcUNRLFNBQXJDLEVBQWdESyxVQUFoRCxFQUE0REYsb0JBQTVELENBNUJLLENBQVA7QUE4QkQiLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhvb2tzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29tcG9uZW50JztcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UgZnJvbSAnLi4vdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UnO1xuXG5jb25zdCB7IHVzZURpcmVjdGlvbiwgdXNlU3R5bGVPcHRpb25zIH0gPSBob29rcztcblxuZnVuY3Rpb24gdXBkYXRlUlRMSW5saW5lKGVsZW1lbnQsIHJ0bCwgYWRhcHRpdmVDYXJkc1BhY2thZ2UpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBhZGFwdGl2ZUNhcmRzUGFja2FnZS5Db250YWluZXIpIHtcbiAgICBlbGVtZW50LnJ0bCA9IHJ0bDtcbiAgfVxuXG4gIC8vIFRyZWUgdHJhdmVyc2FsIHRvIGFkZCBydGwgYm9vbGVhbiB0byBjaGlsZCBlbGVtZW50c1xuICBpZiAoZWxlbWVudC5nZXRJdGVtQXQgJiYgZWxlbWVudC5nZXRJdGVtQ291bnQpIHtcbiAgICBjb25zdCBjb3VudCA9IGVsZW1lbnQuZ2V0SXRlbUNvdW50KCk7XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY291bnQ7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gZWxlbWVudC5nZXRJdGVtQXQoaW5kZXgpO1xuXG4gICAgICB1cGRhdGVSVExJbmxpbmUoY2hpbGQsIHJ0bCwgYWRhcHRpdmVDYXJkc1BhY2thZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VQYXJzZUFkYXB0aXZlQ2FyZEpTT04oKSB7XG4gIGNvbnN0IFthZGFwdGl2ZUNhcmRzUGFja2FnZV0gPSB1c2VBZGFwdGl2ZUNhcmRzUGFja2FnZSgpO1xuICBjb25zdCBbZGlyZWN0aW9uXSA9IHVzZURpcmVjdGlvbigpO1xuICBjb25zdCBbeyBhZGFwdGl2ZUNhcmRzUGFyc2VyTWF4VmVyc2lvbiB9XSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuXG4gIGNvbnN0IHsgQWRhcHRpdmVDYXJkLCBTZXJpYWxpemF0aW9uQ29udGV4dCwgVmVyc2lvbiB9ID0gYWRhcHRpdmVDYXJkc1BhY2thZ2U7XG5cbiAgY29uc3QgbWF4VmVyc2lvbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IG1heFZlcnNpb24gPSBWZXJzaW9uLnBhcnNlKGFkYXB0aXZlQ2FyZHNQYXJzZXJNYXhWZXJzaW9uLCBuZXcgU2VyaWFsaXphdGlvbkNvbnRleHQoKSk7XG5cbiAgICBpZiAobWF4VmVyc2lvbiAmJiAhbWF4VmVyc2lvbi5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gY29uc29sZS53YXJuKCdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJhZGFwdGl2ZUNhcmRzUGFyc2VyTWF4VmVyc2lvblwiIHNwZWNpZmllZCBpcyBub3QgYSB2YWxpZCB2ZXJzaW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXhWZXJzaW9uO1xuICB9LCBbYWRhcHRpdmVDYXJkc1BhcnNlck1heFZlcnNpb24sIFNlcmlhbGl6YXRpb25Db250ZXh0LCBWZXJzaW9uXSk7XG5cbiAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgIChjb250ZW50LCB7IGlnbm9yZUVycm9ycyA9IGZhbHNlIH0gPSB7fSkgPT4ge1xuICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FyZCA9IG5ldyBBZGFwdGl2ZUNhcmQoKTtcbiAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgY29uc3Qgc2VyaWFsaXphdGlvbkNvbnRleHQgPSBuZXcgU2VyaWFsaXphdGlvbkNvbnRleHQobWF4VmVyc2lvbik7XG5cbiAgICAgIGNhcmQucGFyc2UoY29udGVudCwgc2VyaWFsaXphdGlvbkNvbnRleHQpO1xuXG4gICAgICBjb25zdCB7IGV2ZW50Q291bnQgfSA9IHNlcmlhbGl6YXRpb25Db250ZXh0O1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50Q291bnQ7IGkrKykge1xuICAgICAgICBlcnJvcnMucHVzaChzZXJpYWxpemF0aW9uQ29udGV4dC5nZXRFdmVudEF0KGkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpZ25vcmVFcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdib3RmcmFtZXdvcmstd2ViY2hhdDogRmFpbGVkIHRvIHBhcnNlIEFkYXB0aXZlIENhcmQnLCB7IGVycm9ycyB9KTtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBGYWlsZWQgdG8gcGFyc2UgQWRhcHRpdmUgQ2FyZCcpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVSVExJbmxpbmUoY2FyZCwgZGlyZWN0aW9uID09PSAncnRsJywgYWRhcHRpdmVDYXJkc1BhY2thZ2UpO1xuXG4gICAgICByZXR1cm4gY2FyZDtcbiAgICB9LFxuICAgIFtBZGFwdGl2ZUNhcmQsIGFkYXB0aXZlQ2FyZHNQYWNrYWdlLCBkaXJlY3Rpb24sIG1heFZlcnNpb24sIFNlcmlhbGl6YXRpb25Db250ZXh0XVxuICApO1xufVxuIl19