"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createDirectLine: true,
  createDirectLineAppServiceExtension: true
};
exports.createDirectLineAppServiceExtension = exports.createDirectLine = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

require("core-js/features/array/find-index");

require("core-js/features/array/find");

require("core-js/features/array/from");

require("core-js/features/array/includes");

require("core-js/features/array/iterator");

require("core-js/features/dom-collections");

require("core-js/features/math/sign");

require("core-js/features/number/is-finite");

require("core-js/features/object/assign");

require("core-js/features/object/entries");

require("core-js/features/object/from-entries");

require("core-js/features/object/is");

require("core-js/features/object/values");

require("core-js/features/promise");

require("core-js/features/promise/finally");

require("core-js/features/set");

require("core-js/features/string/ends-with");

require("core-js/features/string/starts-with");

require("core-js/features/symbol");

require("url-search-params-polyfill");

require("whatwg-fetch");

var _indexMinimal = require("./index-minimal");

var _addVersion = _interopRequireDefault(require("./addVersion"));

var _createDirectLine = _interopRequireDefault(require("./createDirectLine"));

var _createDirectLineAppServiceExtension = _interopRequireDefault(require("./createDirectLineAppServiceExtension"));

var _index = require("./index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _index[key];
    }
  });
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var createDirectLine = function createDirectLine(options) {
  options.botAgent && console.warn('Web Chat: Developers are not currently allowed to set botAgent in the createDirectLine function. See https://github.com/microsoft/BotFramework-WebChat/issues/2119 for more details.');
  return (0, _createDirectLine.default)(_objectSpread(_objectSpread({}, options), {}, {
    botAgent: "WebChat/".concat(_indexMinimal.version, " (ES5)")
  }));
};

exports.createDirectLine = createDirectLine;

var createDirectLineAppServiceExtension = function createDirectLineAppServiceExtension(options) {
  options.botAgent && console.warn('Web Chat: Developers are not currently allowed to set botAgent in the createDirectLine function. See https://github.com/microsoft/BotFramework-WebChat/issues/2119 for more details.');
  return (0, _createDirectLineAppServiceExtension.default)(_objectSpread(_objectSpread({}, options), {}, {
    botAgent: "WebChat/".concat(_indexMinimal.version, " (ES5)")
  }));
};

exports.createDirectLineAppServiceExtension = createDirectLineAppServiceExtension;
window['WebChat'] = _objectSpread(_objectSpread({}, window['WebChat']), {}, {
  createDirectLine: createDirectLine,
  createDirectLineAppServiceExtension: createDirectLineAppServiceExtension
});
(0, _addVersion.default)('full-es5');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC1lczUudHMiXSwibmFtZXMiOlsiY3JlYXRlRGlyZWN0TGluZSIsIm9wdGlvbnMiLCJib3RBZ2VudCIsImNvbnNvbGUiLCJ3YXJuIiwidmVyc2lvbiIsImNyZWF0ZURpcmVjdExpbmVBcHBTZXJ2aWNlRXh0ZW5zaW9uIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFTQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7QUFFTyxJQUFNQSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFDLE9BQU8sRUFBSTtBQUN6Q0EsRUFBQUEsT0FBTyxDQUFDQyxRQUFSLElBQ0VDLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLHNMQURGLENBREY7QUFLQSxTQUFPLCtEQUE2QkgsT0FBN0I7QUFBc0NDLElBQUFBLFFBQVEsb0JBQWFHLHFCQUFiO0FBQTlDLEtBQVA7QUFDRCxDQVBNOzs7O0FBU0EsSUFBTUMsbUNBQW1DLEdBQUcsU0FBdENBLG1DQUFzQyxDQUFBTCxPQUFPLEVBQUk7QUFDNURBLEVBQUFBLE9BQU8sQ0FBQ0MsUUFBUixJQUNFQyxPQUFPLENBQUNDLElBQVIsQ0FDRSxzTEFERixDQURGO0FBS0EsU0FBTyxrRkFBZ0RILE9BQWhEO0FBQXlEQyxJQUFBQSxRQUFRLG9CQUFhRyxxQkFBYjtBQUFqRSxLQUFQO0FBQ0QsQ0FQTTs7O0FBU1BFLE1BQU0sQ0FBQyxTQUFELENBQU4sbUNBQ0tBLE1BQU0sQ0FBQyxTQUFELENBRFg7QUFFRVAsRUFBQUEsZ0JBQWdCLEVBQWhCQSxnQkFGRjtBQUdFTSxFQUFBQSxtQ0FBbUMsRUFBbkNBO0FBSEY7QUFNQSx5QkFBVyxVQUFYIiwic291cmNlUm9vdCI6ImJ1bmRsZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJTVBPUlRBTlQ6IFRvIGV4cG9ydCBhbnl0aGluZyBmcm9tIHRoaXMgZmlsZSwgYWRkIGl0IHRvIGluZGV4LWVzNS50c3gsIHdoaWNoIGlzIHRoZSAuZC50cyBmb3IgdGhpcyBmaWxlLlxuXG4vKiBlc2xpbnQgZG90LW5vdGF0aW9uOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dQYXR0ZXJuXCI6IFwiXldlYkNoYXQkXCIgfV0gKi9cbi8vIHdpbmRvd1snV2ViQ2hhdCddIGlzIHJlcXVpcmVkIGZvciBUeXBlU2NyaXB0XG5cbi8vIFBvbHlmaWxscyBmb3IgSUUxMSBhbmQgb3RoZXIgRVM1IGJyb3dzZXJzXG4vLyBUbyBtYWludGFpbiBxdWFsaXR5LCB3ZSBwcmVmZXIgcG9seWZpbGxzIHdpdGhvdXQgYWRkaXRpdmVzXG4vLyBGb3IgZXhhbXBsZSwgd2UgcHJlZmVyIFByb21pc2UgaW1wbGVtZW50YXRpb24gZnJvbSBcImNvcmUtanNcIiB0aGFuIFwiYmx1ZWJpcmRcIlxuXG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvYXJyYXkvZmluZC1pbmRleCc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvYXJyYXkvZmluZCc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvYXJyYXkvZnJvbSc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvYXJyYXkvaW5jbHVkZXMnO1xuaW1wb3J0ICdjb3JlLWpzL2ZlYXR1cmVzL2FycmF5L2l0ZXJhdG9yJztcbmltcG9ydCAnY29yZS1qcy9mZWF0dXJlcy9kb20tY29sbGVjdGlvbnMnO1xuaW1wb3J0ICdjb3JlLWpzL2ZlYXR1cmVzL21hdGgvc2lnbic7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvbnVtYmVyL2lzLWZpbml0ZSc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvb2JqZWN0L2Fzc2lnbic7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvb2JqZWN0L2VudHJpZXMnO1xuaW1wb3J0ICdjb3JlLWpzL2ZlYXR1cmVzL29iamVjdC9mcm9tLWVudHJpZXMnO1xuaW1wb3J0ICdjb3JlLWpzL2ZlYXR1cmVzL29iamVjdC9pcyc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvb2JqZWN0L3ZhbHVlcyc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvcHJvbWlzZSc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvcHJvbWlzZS9maW5hbGx5JztcbmltcG9ydCAnY29yZS1qcy9mZWF0dXJlcy9zZXQnO1xuaW1wb3J0ICdjb3JlLWpzL2ZlYXR1cmVzL3N0cmluZy9lbmRzLXdpdGgnO1xuaW1wb3J0ICdjb3JlLWpzL2ZlYXR1cmVzL3N0cmluZy9zdGFydHMtd2l0aCc7XG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvc3ltYm9sJztcblxuaW1wb3J0ICd1cmwtc2VhcmNoLXBhcmFtcy1wb2x5ZmlsbCc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi9pbmRleC1taW5pbWFsJztcbmltcG9ydCBhZGRWZXJzaW9uIGZyb20gJy4vYWRkVmVyc2lvbic7XG5pbXBvcnQgZGVmYXVsdENyZWF0ZURpcmVjdExpbmUgZnJvbSAnLi9jcmVhdGVEaXJlY3RMaW5lJztcbmltcG9ydCBkZWZhdWx0Q3JlYXRlRGlyZWN0TGluZUFwcFNlcnZpY2VFeHRlbnNpb24gZnJvbSAnLi9jcmVhdGVEaXJlY3RMaW5lQXBwU2VydmljZUV4dGVuc2lvbic7XG5cbmV4cG9ydCAqIGZyb20gJy4vaW5kZXgnO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRGlyZWN0TGluZSA9IG9wdGlvbnMgPT4ge1xuICBvcHRpb25zLmJvdEFnZW50ICYmXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1dlYiBDaGF0OiBEZXZlbG9wZXJzIGFyZSBub3QgY3VycmVudGx5IGFsbG93ZWQgdG8gc2V0IGJvdEFnZW50IGluIHRoZSBjcmVhdGVEaXJlY3RMaW5lIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9Cb3RGcmFtZXdvcmstV2ViQ2hhdC9pc3N1ZXMvMjExOSBmb3IgbW9yZSBkZXRhaWxzLidcbiAgICApO1xuXG4gIHJldHVybiBkZWZhdWx0Q3JlYXRlRGlyZWN0TGluZSh7IC4uLm9wdGlvbnMsIGJvdEFnZW50OiBgV2ViQ2hhdC8ke3ZlcnNpb259IChFUzUpYCB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEaXJlY3RMaW5lQXBwU2VydmljZUV4dGVuc2lvbiA9IG9wdGlvbnMgPT4ge1xuICBvcHRpb25zLmJvdEFnZW50ICYmXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1dlYiBDaGF0OiBEZXZlbG9wZXJzIGFyZSBub3QgY3VycmVudGx5IGFsbG93ZWQgdG8gc2V0IGJvdEFnZW50IGluIHRoZSBjcmVhdGVEaXJlY3RMaW5lIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9Cb3RGcmFtZXdvcmstV2ViQ2hhdC9pc3N1ZXMvMjExOSBmb3IgbW9yZSBkZXRhaWxzLidcbiAgICApO1xuXG4gIHJldHVybiBkZWZhdWx0Q3JlYXRlRGlyZWN0TGluZUFwcFNlcnZpY2VFeHRlbnNpb24oeyAuLi5vcHRpb25zLCBib3RBZ2VudDogYFdlYkNoYXQvJHt2ZXJzaW9ufSAoRVM1KWAgfSk7XG59O1xuXG53aW5kb3dbJ1dlYkNoYXQnXSA9IHtcbiAgLi4ud2luZG93WydXZWJDaGF0J10sXG4gIGNyZWF0ZURpcmVjdExpbmUsXG4gIGNyZWF0ZURpcmVjdExpbmVBcHBTZXJ2aWNlRXh0ZW5zaW9uXG59O1xuXG5hZGRWZXJzaW9uKCdmdWxsLWVzNScpO1xuIl19