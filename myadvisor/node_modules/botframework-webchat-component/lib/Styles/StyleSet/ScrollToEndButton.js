"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createScrollToEndButtonStyle;

function createScrollToEndButtonStyle(_ref) {
  var newMessagesButtonFontSize = _ref.newMessagesButtonFontSize,
      paddingRegular = _ref.paddingRegular,
      primaryFont = _ref.primaryFont,
      transcriptOverlayButtonBackground = _ref.transcriptOverlayButtonBackground,
      transcriptOverlayButtonBackgroundOnFocus = _ref.transcriptOverlayButtonBackgroundOnFocus,
      transcriptOverlayButtonBackgroundOnHover = _ref.transcriptOverlayButtonBackgroundOnHover,
      transcriptOverlayButtonColor = _ref.transcriptOverlayButtonColor,
      transcriptOverlayButtonColorOnFocus = _ref.transcriptOverlayButtonColorOnFocus,
      transcriptOverlayButtonColorOnHover = _ref.transcriptOverlayButtonColorOnHover;
  return {
    // TODO: [P3] Can we not to unset borderWidth and outline earlier?
    '@media screen and (-ms-high-contrast: active)': {
      borderWidth: 'initial',
      outline: 'initial'
    },
    appearance: 'none',
    backgroundColor: transcriptOverlayButtonBackground,
    borderRadius: paddingRegular,
    borderWidth: 0,
    bottom: 5,
    color: transcriptOverlayButtonColor,
    fontFamily: primaryFont,
    fontSize: newMessagesButtonFontSize,
    outline: 0,
    padding: paddingRegular,
    position: 'absolute',
    zIndex: 1,
    // We formed a stacking context in the parent container, so we can use "z-index" here.
    '&:hover': {
      backgroundColor: transcriptOverlayButtonBackgroundOnHover,
      color: transcriptOverlayButtonColorOnHover || transcriptOverlayButtonColor
    },
    '&:focus': {
      backgroundColor: transcriptOverlayButtonBackgroundOnFocus,
      color: transcriptOverlayButtonColorOnFocus || transcriptOverlayButtonColor
    },
    '&:not(.webchat__overlay--rtl)': {
      right: 20
    },
    '&.webchat__overlay--rtl': {
      left: 20
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TdHlsZXMvU3R5bGVTZXQvU2Nyb2xsVG9FbmRCdXR0b24udHMiXSwibmFtZXMiOlsiY3JlYXRlU2Nyb2xsVG9FbmRCdXR0b25TdHlsZSIsIm5ld01lc3NhZ2VzQnV0dG9uRm9udFNpemUiLCJwYWRkaW5nUmVndWxhciIsInByaW1hcnlGb250IiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uSG92ZXIiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Ib3ZlciIsImJvcmRlcldpZHRoIiwib3V0bGluZSIsImFwcGVhcmFuY2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3R0b20iLCJjb2xvciIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsInBhZGRpbmciLCJwb3NpdGlvbiIsInpJbmRleCIsInJpZ2h0IiwibGVmdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVlLFNBQVNBLDRCQUFULE9BVVE7QUFBQSxNQVRyQkMseUJBU3FCLFFBVHJCQSx5QkFTcUI7QUFBQSxNQVJyQkMsY0FRcUIsUUFSckJBLGNBUXFCO0FBQUEsTUFQckJDLFdBT3FCLFFBUHJCQSxXQU9xQjtBQUFBLE1BTnJCQyxpQ0FNcUIsUUFOckJBLGlDQU1xQjtBQUFBLE1BTHJCQyx3Q0FLcUIsUUFMckJBLHdDQUtxQjtBQUFBLE1BSnJCQyx3Q0FJcUIsUUFKckJBLHdDQUlxQjtBQUFBLE1BSHJCQyw0QkFHcUIsUUFIckJBLDRCQUdxQjtBQUFBLE1BRnJCQyxtQ0FFcUIsUUFGckJBLG1DQUVxQjtBQUFBLE1BRHJCQyxtQ0FDcUIsUUFEckJBLG1DQUNxQjtBQUNyQixTQUFPO0FBQ0w7QUFDQSxxREFBaUQ7QUFDL0NDLE1BQUFBLFdBQVcsRUFBRSxTQURrQztBQUUvQ0MsTUFBQUEsT0FBTyxFQUFFO0FBRnNDLEtBRjVDO0FBT0xDLElBQUFBLFVBQVUsRUFBRSxNQVBQO0FBUUxDLElBQUFBLGVBQWUsRUFBRVQsaUNBUlo7QUFTTFUsSUFBQUEsWUFBWSxFQUFFWixjQVRUO0FBVUxRLElBQUFBLFdBQVcsRUFBRSxDQVZSO0FBV0xLLElBQUFBLE1BQU0sRUFBRSxDQVhIO0FBWUxDLElBQUFBLEtBQUssRUFBRVQsNEJBWkY7QUFhTFUsSUFBQUEsVUFBVSxFQUFFZCxXQWJQO0FBY0xlLElBQUFBLFFBQVEsRUFBRWpCLHlCQWRMO0FBZUxVLElBQUFBLE9BQU8sRUFBRSxDQWZKO0FBZ0JMUSxJQUFBQSxPQUFPLEVBQUVqQixjQWhCSjtBQWlCTGtCLElBQUFBLFFBQVEsRUFBRSxVQWpCTDtBQWtCTEMsSUFBQUEsTUFBTSxFQUFFLENBbEJIO0FBa0JNO0FBRVgsZUFBVztBQUNUUixNQUFBQSxlQUFlLEVBQUVQLHdDQURSO0FBRVRVLE1BQUFBLEtBQUssRUFBRVAsbUNBQW1DLElBQUlGO0FBRnJDLEtBcEJOO0FBeUJMLGVBQVc7QUFDVE0sTUFBQUEsZUFBZSxFQUFFUix3Q0FEUjtBQUVUVyxNQUFBQSxLQUFLLEVBQUVSLG1DQUFtQyxJQUFJRDtBQUZyQyxLQXpCTjtBQThCTCxxQ0FBaUM7QUFDL0JlLE1BQUFBLEtBQUssRUFBRTtBQUR3QixLQTlCNUI7QUFrQ0wsK0JBQTJCO0FBQ3pCQyxNQUFBQSxJQUFJLEVBQUU7QUFEbUI7QUFsQ3RCLEdBQVA7QUFzQ0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmljdFN0eWxlT3B0aW9ucyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWFwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNjcm9sbFRvRW5kQnV0dG9uU3R5bGUoe1xuICBuZXdNZXNzYWdlc0J1dHRvbkZvbnRTaXplLFxuICBwYWRkaW5nUmVndWxhcixcbiAgcHJpbWFyeUZvbnQsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZCxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Ib3ZlcixcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvcixcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyXG59OiBTdHJpY3RTdHlsZU9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBUT0RPOiBbUDNdIENhbiB3ZSBub3QgdG8gdW5zZXQgYm9yZGVyV2lkdGggYW5kIG91dGxpbmUgZWFybGllcj9cbiAgICAnQG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpJzoge1xuICAgICAgYm9yZGVyV2lkdGg6ICdpbml0aWFsJyxcbiAgICAgIG91dGxpbmU6ICdpbml0aWFsJ1xuICAgIH0sXG5cbiAgICBhcHBlYXJhbmNlOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmQsXG4gICAgYm9yZGVyUmFkaXVzOiBwYWRkaW5nUmVndWxhcixcbiAgICBib3JkZXJXaWR0aDogMCxcbiAgICBib3R0b206IDUsXG4gICAgY29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3IsXG4gICAgZm9udEZhbWlseTogcHJpbWFyeUZvbnQsXG4gICAgZm9udFNpemU6IG5ld01lc3NhZ2VzQnV0dG9uRm9udFNpemUsXG4gICAgb3V0bGluZTogMCxcbiAgICBwYWRkaW5nOiBwYWRkaW5nUmVndWxhcixcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB6SW5kZXg6IDEsIC8vIFdlIGZvcm1lZCBhIHN0YWNraW5nIGNvbnRleHQgaW4gdGhlIHBhcmVudCBjb250YWluZXIsIHNvIHdlIGNhbiB1c2UgXCJ6LWluZGV4XCIgaGVyZS5cblxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkhvdmVyLFxuICAgICAgY29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyIHx8IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JcbiAgICB9LFxuXG4gICAgJyY6Zm9jdXMnOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uRm9jdXMsXG4gICAgICBjb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMgfHwgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvclxuICAgIH0sXG5cbiAgICAnJjpub3QoLndlYmNoYXRfX292ZXJsYXktLXJ0bCknOiB7XG4gICAgICByaWdodDogMjBcbiAgICB9LFxuXG4gICAgJyYud2ViY2hhdF9fb3ZlcmxheS0tcnRsJzoge1xuICAgICAgbGVmdDogMjBcbiAgICB9XG4gIH07XG59XG4iXX0=