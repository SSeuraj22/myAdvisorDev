"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _textFormatToContentType = _interopRequireDefault(require("./Utils/textFormatToContentType"));

var _useStripMarkdown = _interopRequireDefault(require("./hooks/internal/useStripMarkdown"));

var _useStyleToEmotionObject = _interopRequireDefault(require("./hooks/internal/useStyleToEmotionObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useCreateAttachmentForScreenReaderRenderer = _botframeworkWebchatApi.hooks.useCreateAttachmentForScreenReaderRenderer,
    useDateFormatter = _botframeworkWebchatApi.hooks.useDateFormatter,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;
var ROOT_STYLE = {
  '&.webchat__screen-reader-activity': {
    color: 'transparent',
    height: 1,
    opacity: 0,
    overflow: 'hidden',
    position: 'absolute',
    top: 0,
    whiteSpace: 'nowrap',
    width: 1
  }
};
var ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {
  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',
  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',
  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',
  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',
  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'
}; // When "renderAttachments" is false, we will not render the content of attachments.
// That means, it will only render "2 attachments", instead of "image attachment".
// This is used in the visual transcript, where we render "Press ENTER to interact."

var ScreenReaderActivity = function ScreenReaderActivity(_ref) {
  var activity = _ref.activity,
      children = _ref.children,
      id = _ref.id,
      renderAttachments = _ref.renderAttachments;

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();
  var formatDate = useDateFormatter();
  var localize = useLocalizer();
  var localizeWithPlural = useLocalizer({
    plural: true
  });
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.messageBack;
  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
  var messageBackDisplayText = _activity$channelData2.displayText,
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      text = activity.text,
      textFormat = activity.textFormat,
      timestamp = activity.timestamp;
  var fromUser = role === 'user';
  var contentTypeMarkdown = (0, _textFormatToContentType.default)(textFormat) === 'text/markdown';
  var displayText = messageBackDisplayText || text;
  var attachmentForScreenReaderRenderers = renderAttachments ? attachments.map(function (attachment) {
    return createAttachmentForScreenReaderRenderer({
      activity: activity,
      attachment: attachment
    });
  }).filter(function (render) {
    return render;
  }) : [];
  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  var numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;
  var numAttachmentsAlt = !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);
  var textAlt = (0, _useStripMarkdown.default)(contentTypeMarkdown && displayText) || displayText;
  var timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));
  return /*#__PURE__*/_react.default.createElement("article", {
    "aria-atomic": true,
    "aria-roledescription": "message",
    className: (0, _classnames.default)('webchat__screen-reader-activity', rootClassName) // "id" attribute is used by `aria-labelledby`.
    // eslint-disable-next-line react/forbid-dom-props
    ,
    id: id,
    role: "region"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("span", null, greetingAlt), /*#__PURE__*/_react.default.createElement("span", null, textAlt)), !!attachmentForScreenReaderRenderers.length && /*#__PURE__*/_react.default.createElement("ul", null, attachmentForScreenReaderRenderers.map(function (render, index) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      _react.default.createElement("li", {
        key: index
      }, render())
    );
  })), numAttachmentsAlt && /*#__PURE__*/_react.default.createElement("p", null, numAttachmentsAlt), /*#__PURE__*/_react.default.createElement("p", {
    className: "webchat__screen-reader-activity__timestamp"
  }, timestampAlt), children);
};

ScreenReaderActivity.defaultProps = {
  children: undefined,
  id: undefined,
  renderAttachments: true
};
ScreenReaderActivity.propTypes = {
  activity: _propTypes.default.any.isRequired,
  children: _propTypes.default.any,
  id: _propTypes.default.string,
  renderAttachments: _propTypes.default.bool
};
var _default = ScreenReaderActivity;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,