{"version":3,"sources":["../../../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js"],"names":["AudioConfig","SpeechSDK","OutputFormat","ResultReason","SpeechConfig","SpeechRecognizer","serializeRecognitionResult","duration","errorDetails","json","offset","properties","reason","resultId","text","JSON","parse","averageAmplitude","arrayBuffer","array","Int16Array","reduce","call","amplitude","Math","abs","length","cognitiveServicesAsyncToPromise","fn","args","Promise","resolve","reject","SpeechRecognitionEvent","type","data","emma","interpretation","resultIndex","results","prepareAudioConfig","audioConfig","originalAttach","attach","boundOriginalAttach","bind","firstChunk","muted","reader","read","chunk","buffer","events","onEvent","name","ArrayBuffer","isEnd","timeReceived","Date","now","pause","unprepare","createSpeechRecognitionPonyfillFromRecognizer","createRecognizer","enableTelemetry","looseEvents","referenceGrammars","textNormalization","SpeechRecognition","_continuous","_interimResults","_lang","window","document","documentElement","getAttribute","navigator","language","_grammars","SpeechGrammarList","_maxAlternatives","event","dispatchEvent","_startOnce","catch","err","ErrorEvent","error","message","stack","lang","recognizer","queue","push","audioSourceReady","audioSourceOff","firstAudibleChunk","detachAudioConfigEvent","detach","canceled","_","sessionId","recognized","result","recognizing","sessionStarted","sessionStopped","speechStartDetected","speechEndDetected","phrases","grammars","dynamicGrammar","privReco","addReferenceGrammar","addPhrase","startContinuousRecognitionAsync","stopContinuousRecognitionAsync","abort","stop","undefined","finalizedResults","loop","shift","Object","keys","forEach","emitCognitiveServices","errorMessage","test","finalEvent","audioStarted","stopping","soundStarted","speechStarted","NoMatch","maxAlternatives","recognizable","transcript","continuous","interimResults","console","dispose","value","Error","EventTarget","prototype","options","fromDefaultMicrophoneInput","fetchCredentials","speechRecognitionEndpointId","mediaDevices","getUserMedia","warn","authorizationToken","region","speechRecognitionHostname","subscriptionKey","host","hostname","port","protocol","speechConfig","fromHost","fromAuthorizationToken","fromSubscription","endpointId","outputFormat","Detailed","speechRecognitionLanguage"],"mappings":"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","sourcesContent":["/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { defineEventAttribute, EventTarget } from 'event-target-shim-es5';\n\nimport cognitiveServiceEventResultToWebSpeechRecognitionResultList from './cognitiveServiceEventResultToWebSpeechRecognitionResultList';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport patchOptions from '../patchOptions';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechSDK from '../SpeechSDK';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { AudioConfig, OutputFormat, ResultReason, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nfunction serializeRecognitionResult({ duration, errorDetails, json, offset, properties, reason, resultId, text }) {\n  return {\n    duration,\n    errorDetails,\n    json: JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  };\n}\n\nfunction averageAmplitude(arrayBuffer) {\n  const array = new Int16Array(arrayBuffer);\n\n  return (\n    [].reduce.call(array, (averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length\n  );\n}\n\nfunction cognitiveServicesAsyncToPromise(fn) {\n  return (...args) => new Promise((resolve, reject) => fn(...args, resolve, reject));\n}\n\nclass SpeechRecognitionEvent {\n  constructor(type, { data, emma, interpretation, resultIndex, results } = {}) {\n    this.data = data;\n    this.emma = emma;\n    this.interpretation = interpretation;\n    this.resultIndex = resultIndex;\n    this.results = results;\n    this.type = type;\n  }\n}\n\nfunction prepareAudioConfig(audioConfig) {\n  const originalAttach = audioConfig.attach;\n  const boundOriginalAttach = audioConfig.attach.bind(audioConfig);\n  let firstChunk;\n  let muted;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfig.attach = async () => {\n    const reader = await boundOriginalAttach();\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfig.events.onEvent({ name: 'FirstAudibleChunk' });\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfig.attach = originalAttach;\n    }\n  };\n}\n\nexport function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}) {\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  SpeechRecognizer.enableTelemetry(enableTelemetry !== false);\n\n  class SpeechRecognition extends EventTarget {\n    constructor() {\n      super();\n\n      this._continuous = false;\n      this._interimResults = false;\n      this._lang =\n        typeof window !== 'undefined'\n          ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n          : 'en-US';\n      this._grammars = new SpeechGrammarList();\n      this._maxAlternatives = 1;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous() {\n      return this._continuous;\n    }\n\n    set continuous(value) {\n      this._continuous = value;\n    }\n\n    get grammars() {\n      return this._grammars;\n    }\n\n    set grammars(value) {\n      if (value instanceof SpeechGrammarList) {\n        this._grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this._interimResults;\n    }\n\n    set interimResults(value) {\n      this._interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this._maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this._maxAlternatives = value;\n    }\n\n    get lang() {\n      return this._lang;\n    }\n\n    set lang(value) {\n      this._lang = value;\n    }\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(new ErrorEvent('error', { error: err, message: err && (err.stack || err.message) }));\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer.audioConfig);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = recognizer.audioConfig.events.attach(event => {\n          const { name } = event;\n\n          if (name === 'AudioSourceReadyEvent') {\n            queue.push({ audioSourceReady: {} });\n          } else if (name === 'AudioSourceOffEvent') {\n            queue.push({ audioSourceOff: {} });\n          } else if (name === 'FirstAudibleChunk') {\n            queue.push({ firstAudibleChunk: {} });\n          }\n        });\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer.privReco;\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar(referenceGrammars);\n        phrases && phrases.length && dynamicGrammar.addPhrase(phrases);\n\n        await cognitiveServicesAsyncToPromise(recognizer.startContinuousRecognitionAsync.bind(recognizer))();\n\n        if (recognizer.stopContinuousRecognitionAsync) {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent;\n        let finalizedResults = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = {\n              error: 'not-allowed',\n              type: 'error'\n            };\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = {\n                error: 'network',\n                type: 'error'\n              };\n            } else {\n              finalEvent = {\n                error: 'unknown',\n                type: 'error'\n              };\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = {\n                error: 'aborted',\n                type: 'error'\n              };\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              finalEvent = {\n                error: 'no-speech',\n                type: 'error'\n              };\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0].transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: finalizedResults\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = null;\n                } else {\n                  finalEvent = {\n                    results: finalizedResults,\n                    type: 'result'\n                  };\n                }\n\n                if (!this.continuous && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n                  finalEvent = null;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: [\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ]\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = {\n              error: 'no-speech',\n              type: 'error'\n            };\n          }\n\n          if (finalEvent.type === 'error') {\n            this.dispatchEvent(new ErrorEvent('error', finalEvent));\n          } else {\n            this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n          }\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer.dispose();\n      }\n    }\n  }\n\n  defineEventAttribute(SpeechRecognition.prototype, 'audioend');\n  defineEventAttribute(SpeechRecognition.prototype, 'audiostart');\n  defineEventAttribute(SpeechRecognition.prototype, 'cognitiveservices');\n  defineEventAttribute(SpeechRecognition.prototype, 'end');\n  defineEventAttribute(SpeechRecognition.prototype, 'error');\n  defineEventAttribute(SpeechRecognition.prototype, 'nomatch');\n  defineEventAttribute(SpeechRecognition.prototype, 'result');\n  defineEventAttribute(SpeechRecognition.prototype, 'soundend');\n  defineEventAttribute(SpeechRecognition.prototype, 'soundstart');\n  defineEventAttribute(SpeechRecognition.prototype, 'speechend');\n  defineEventAttribute(SpeechRecognition.prototype, 'speechstart');\n  defineEventAttribute(SpeechRecognition.prototype, 'start');\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n\nexport default options => {\n  const {\n    audioConfig = AudioConfig.fromDefaultMicrophoneInput(),\n\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry = true,\n\n    fetchCredentials,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization = 'display'\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  const createRecognizer = async lang => {\n    const { authorizationToken, region, speechRecognitionHostname, subscriptionKey } = await fetchCredentials();\n    let speechConfig;\n\n    if (speechRecognitionHostname) {\n      const host = { hostname: speechRecognitionHostname, port: 443, protocol: 'wss:' };\n\n      if (authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, subscriptionKey);\n      }\n    } else {\n      speechConfig = authorizationToken\n        ? SpeechConfig.fromAuthorizationToken(authorizationToken, region)\n        : SpeechConfig.fromSubscription(subscriptionKey, region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    audioConfig,\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n};\n"],"file":"createSpeechRecognitionPonyfill.js"}