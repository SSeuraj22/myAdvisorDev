{"version":3,"sources":["webpack://AdaptiveCards/webpack/universalModuleDefinition","webpack://AdaptiveCards/webpack/bootstrap","webpack://AdaptiveCards/./src/enums.ts","webpack://AdaptiveCards/./src/shared.ts","webpack://AdaptiveCards/./src/serialization.ts","webpack://AdaptiveCards/./src/utils.ts","webpack://AdaptiveCards/./src/strings.ts","webpack://AdaptiveCards/./src/registry.ts","webpack://AdaptiveCards/./src/card-object.ts","webpack://AdaptiveCards/./src/host-capabilities.ts","webpack://AdaptiveCards/./src/host-config.ts","webpack://AdaptiveCards/./src/adaptivecards.ts","webpack://AdaptiveCards/./src/card-elements.ts","webpack://AdaptiveCards/./src/text-formatters.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Default","Positive","Destructive","ActionStyle","Size","ImageSize","SizeUnit","TextSize","TextWeight","FontType","Spacing","TextColor","HorizontalAlignment","VerticalAlignment","ActionAlignment","ImageStyle","ShowCardActionMode","Orientation","FillMode","ActionIconPlacement","InputTextStyle","Emphasis","Accent","Good","Attention","Warning","ContainerStyle","ValidationPhase","ValidationEvent","ContainerFitStatus","useAdvancedTextBlockTruncation","useAdvancedCardBottomTruncation","useMarkdownInRadioButtonAndCheckbox","allowMarkForTextHighlighting","alwaysBleedSeparators","enableFullJsonRoundTrip","displayInputValidationErrors","allowPreProcessingPropertyValues","setTabIndexAtCardRoot","enableFallback","GlobalSettings","ContentTypes","applicationJson","applicationXWwwFormUrlencoded","_isProcessed","getReferencedInputs","inputs","referencedInputs","Error","input","RegExp","id","exec","this","_original","substituteInputValues","contentType","_processed","regEx","matches","keys","toLowerCase","matchedInput","valueForReplace","JSON","stringify","slice","encodeURIComponent","replace","getOriginal","set","StringWithSubstitutions","top","right","bottom","left","SpacingDefinition","Enums","None","PaddingDefinition","physicalSize","unit","parse","requireUnitSpecifier","result","SizeAndUnit","Weight","expectedMatchCount","length","parseInt","Pixel","generate","d0","Math","random","d1","d2","d3","UUID","lut","initialize","toString","major","minor","label","_isValid","_major","_minor","_label","versionString","context","Version","_versionString","logParseEvent","undefined","InvalidPropertyValue","Strings","errors","invalidVersionString","toJSON","compareTo","otherVersion","isValid","v1_0","v1_1","v1_2","v1_3","latest","Versions","version","targetVersion","_validationEvents","serializeValue","target","propertyName","propertyValue","defaultValue","serializeNumber","isNaN","serializeEnum","enumType","targetValue","canDeleteTarget","serializeArray","items","item","serializedItem","SerializableObject","push","Array","isArray","clearEvents","logEvent","source","phase","event","message","Parse","getEventAt","index","BaseSerializationContext","onGetInitialValue","isSerializationEnabled","sequentialNumber","PropertyDefinition","_sequentialNumber","getInternalName","sender","treatEmptyAsUndefined","parsedValue","Utils","parseString","invalidPropertyValue","StringProperty","parseBool","BoolProperty","parseNumber","NumProperty","size","PixelSizeProperty","values","isValidValue","versionedValue","sourceValue","propertyValueNotSupported","valueFound","ToJSON","ValueSetProperty","_values","keyAsNumber","enumValue","getEnumValueByName","EnumProperty","objectType","serializedValue","SerializableObjectProperty","onItemAdded","sourceCollection","sourceItem","SerializableObjectCollectionProperty","onParse","onToJSON","CustomProperty","_properties","indexOf","add","properties","remove","splice","getItemAt","getCount","SerializableObjectSchema","propertyKey","descriptor","getOwnPropertyDescriptor","getValue","setValue","_propertyBag","_rawProperties","maxVersion","getSchema","getDefaultSerializationContext","SimpleSerializationContext","populateSchema","schema","ctor","constructor","sortedProperties","sort","p1","p2","onRegisterCustomProperties","internalParse","UnsupportedProperty","propertyNotSupported","resetDefaultValues","internalToJSON","serializedProperties","shouldSerialize","effectiveContext","toJSONOriginalParam","hasDefaultValue","hasAllDefaultValues","setCustomProperty","getCustomProperty","_schemaCache","getSchemaKey","stringToCssColor","color","a","findNextCharacter","html","currIdx","userAgent","navigator","match","Shared","node","child","appendChild","obj","hostConfig","separationDefinition","orientation","spacing","lineThickness","separator","document","createElement","className","makeCssClassName","Horizontal","setAttribute","lineColor","style","paddingTop","marginBottom","borderBottom","height","paddingLeft","marginRight","borderRight","width","overflow","flex","element","maxHeight","lineHeight","fits","scrollHeight","fullText","innerHTML","truncateAt","idx","substring","breakableIndices","results","findBreakableIndices","lo","hi","bestBreakIdx","mid","floor","containerEnd","start","offsetTop","clientHeight","FullyInContainer","Overflowing","FullyOutOfContainer","unknownElementType","typeName","unknownActionType","elementTypeNotAllowed","actionTypeNotAllowed","showCardMustHaveCard","invalidColumnWidth","invalidWidth","invalidCardVersion","defaultingToVersion","supportedInVersion","versionUsed","indexOutOfRange","elementCannotBeUsedAsInline","inlineAlreadyParented","interactivityNotAllowed","inputsMustHaveUniqueId","choiceSetMustHaveAtLeastOneChoice","choiceSetChoicesMustHaveTitleAndValue","propertyMustBeSet","actionHttpHeadersMustHaveNameAndValue","tooManyActions","maximumActions","columnAlreadyBelongsToAnotherSet","invalidCardType","unsupportedCardVersion","maxSupportedVersion","duplicateId","markdownProcessingNotEnabled","processMarkdownEventRemoved","elementAlreadyParented","actionAlreadyParented","elementTypeNotStandalone","hints","dontUseWeightedAndStrecthedColumnsInSameSet","defaults","inlineActionTitle","_items","findByName","clear","register","schemaVersion","registrationInfo","unregister","createInstance","getItemCount","CardObjectRegistry","allIds","validationEvents","addFailure","cardObject","Validation","ValidationResults","_shouldFallback","getJsonTypeName","CardObject","requiresProperty","preProcessPropertyValue","currentObject","onPreProcessPropertyValue","parent","setParent","_parent","setShouldFallback","shouldFallback","requires","areAllMet","hostCapabilities","getRootObject","rootObject","internalValidateProperties","DuplicateId","validateProperties","_renderedElement","typeNameProperty","idProperty","HostCapabilities","_capabilities","jsonVersion","addCapability","removeCapability","hasCapability","capabilityName","parseHostConfigEnum","targetEnum","parseEnum","defaultColor","subtleColor","default","subtle","ColorDefinition","highlightColors","TextColorDefinition","allowCustomStyle","AdaptiveCardConfig","imageSize","Medium","maxImageHeight","ImageSetConfig","allowInlinePlayback","defaultPoster","MediaConfig","isSubtle","weight","getDefaultWeight","BaseTextDefinition","suffix","suffixColor","RequiredInputLabelTextDefinition","inputSpacing","Small","requiredInputs","optionalInputs","InputLabelConfig","errorMessage","InputConfig","wrap","FactTextDefinition","maxWidth","Bolder","FactTitleDefinition","title","FactSetConfig","actionMode","Inline","inlineTopMargin","ShowCardActionConfig","maxActions","buttonSpacing","showCard","preExpandSingleShowCardAction","actionsOrientation","actionAlignment","Left","iconPlacement","LeftOfTitle","allowTitleToWrap","iconSize","sizeAndUnit","e","ActionsConfig","dark","light","accent","good","warning","attention","parseSingleColor","ColorSetDefinition","foregroundColors","backgroundColor","highlightBackgroundColor","highlightForegroundColor","ContainerStyleDefinition","_allStyles","BuiltInContainerStyleDefinition","customStyleArray","customStyle","styleName","forEach","isBuiltIn","emphasis","customStyles","getStyleByName","ContainerStyleSet","fontFamily","fontSizes","small","medium","large","extraLarge","fontWeights","lighter","bolder","monospace","FontTypeDefinition","getStyleDefinition","Monospace","FontTypeSet","choiceSetInputValueSeparator","supportsInteractivity","padding","imageSizes","containerStyles","actions","adaptiveCard","imageSet","media","factSet","alwaysAllowBleed","String","_legacyFontType","fontTypes","lineHeights","getFontTypeDefinition","getEffectiveSpacing","Large","ExtraLarge","Padding","paddingDefinitionToSpacingDefinition","paddingDefinition","makeCssClassNames","classNames","cssClassNamePrefix","join","HostConfig","defaultHostConfig","Lighter","_truncatedDueToOverflow","lang","CardElement","langProperty","isVisibleProperty","undoOverflowTruncation","isVisible","updateRenderedElementVisibility","raiseElementVisibilityChangedEvent","internalRenderSeparator","renderedSeparator","renderSeparation","separatorOrientation","parentContainer","getParentContainer","getEffectivePadding","parentPhysicalPadding","marginLeft","displayMode","isDesignMode","_defaultRenderedElementDisplayMode","display","removeProperty","_separatorElement","isFirstElement","hideElementDueToOverflow","visibility","showElementHiddenDueToOverflow","handleOverflow","isHiddenDueToOverflow","handled","truncateOverflow","resetOverflow","sizeChanged","SerializationContext","createPlaceholderElement","styleDefinition","getEffectiveStyleDefinition","foregroundCssColor","border","minHeight","fontSize","innerText","adjustRenderedElementSize","renderedElement","isDisplayed","offsetHeight","overrideInternalRender","internalRender","applyPadding","separatorElement","isBleeding","getImmediateSurroundingPadding","physicalPadding","getDefaultPadding","getHasBackground","getPadding","_padding","setPadding","elementRegistry","asString","getEffectiveStyle","defaultStyle","getForbiddenActionTypes","processTop","processRight","processBottom","processLeft","doProcessTop","isTopElement","doProcessRight","isRightMostElement","doProcessBottom","isBottomElement","doProcessLeft","isLeftMostElement","effectivePadding","getActionCount","getActionAt","CardElementContainer","removeItem","render","customCssSelector","classList","boxSizing","updateLayout","processChildren","cardElement","rootElement","getRootElement","AdaptiveCard","designMode","isLastElement","isAtTheVeryLeft","isAtTheVeryRight","isAtTheVeryTop","isAtTheVeryBottom","isBleedingAtTop","isBleedingAtBottom","currentElement","Container","getAllInputs","processActions","getResourceInformation","getElementById","getActionById","allowCustomPadding","_hostConfig","separatorProperty","heightProperty","horizontalAlignmentProperty","spacingProperty","forbiddenActionTypes","parseAction","ActionProperty","text","ariaHidden","BaseTextBlock","selectActionProperty","textProperty","setText","getFontSize","fontType","getColorDefinition","colorSet","Dark","Light","init","textDefinition","applyStylesTo","targetElement","fontWeight","colorDefinition","effectiveColor","sizeProperty","weightProperty","colorProperty","isSubtleProperty","fontTypeProperty","_treatAsPlainText","useMarkdown","restoreOriginalContent","maxLines","_computedLineHeight","_originalInnerHtml","truncateIfSupported","children","isTextOnly","tagName","truncate","_processedText","preProcessedText","forElementId","labelElement","htmlFor","selectAction","onclick","preventDefault","cancelBubble","execute","tabIndex","getAriaRole","formattedText","TextFormatters","formatText","markdownProcessingResult","applyMarkdown","didProcess","outputHtml","markStyle","effectiveStyle","firstElementChild","HTMLElement","marginTop","textOverflow","lastElementChild","anchors","getElementsByTagName","anchor","raiseAnchorClickedEvent","wordWrap","whiteSpace","isRtl","horizontalAlignment","Center","textAlign","Right","wrapProperty","maxLinesProperty","TextBlock","italic","strikethrough","highlight","underline","href","getHref","fontStyle","textDecoration","italicProperty","strikethroughProperty","highlightProperty","underlineProperty","TextRun","_inlines","internalAddInline","inline","forceAdd","isInline","jsonInline","textRun","parseElement","jsonInlines","renderedInlines","renderedInline","getInlineCount","getInlineAt","addInline","removeInline","RichTextBlock","titleProperty","valueProperty","Fact","facts","borderWidth","borderSpacing","borderStyle","borderCollapse","trElement","tdElement","verticalAlign","textBlock","factsProperty","FactSet","internalName","fallbackProperty","Auto","applySize","pixelWidth","pixelHeight","Stretch","url","alignItems","onkeypress","keyCode","justifyContent","imageElement","onload","raiseImageLoadedEvent","onerror","card","errorElement","minWidth","Person","borderRadius","backgroundPosition","backgroundRepeat","src","Image","urlProperty","altTextProperty","alt","mimeType","backgroundColorProperty","styleProperty","pixelWidthProperty","ImageDimensionProperty","pixelHeightProperty","allowVerticalOverflow","isSelectable","isElementAllowed","isInteractive","paddingRight","paddingBottom","InteractivityNotAllowed","_selectAction","overflowX","overflowY","concat","_images","flexWrap","image","renderedImage","margin","getFirstVisibleRenderedItem","getLastVisibleRenderedItem","itemIndex","addImage","imagesProperty","imageSizeProperty","ImageSet","type","mimeTypeProperty","MediaSource","sources","getPosterUrl","poster","processSources","_selectedSources","_selectedMediaType","mimeComponents","split","Media","supportedMediaTypes","handlePlayButtonInvoke","mediaPlayerElement","renderMediaPlayer","play","onPlay","renderPoster","posterRootElement","altText","position","posterUrl","parentNode","removeChild","playButtonOuterElement","playButtonInnerElement","playButtonArrowWidth","playButtonArrowHeight","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopColor","borderRightColor","borderBottomColor","transform","playButtonContainer","mediaElement","videoPlayer","autoplay","controls","isMobileOS","muted","preload","renderedSource","mediaSource","sourcesProperty","posterProperty","getAllLabelIds","labelIds","_renderedLabelElement","_renderedErrorMessageElement","updateInputControlAriaLabelledBy","_renderedInputControlElement","removeAttribute","_inputControlContainerElement","_outerContainerElement","flexDirection","renderedInputControlId","generateUniqueId","labelRichTextBlock","labelInline","isRequired","isRequiredCueInline","isNullable","valueChanged","onInputValueChangedHandler","resetValidationFailureCue","onValueChanged","onInputValueChanged","renderedInputControlElement","showValidationErrorMessage","errorMessageTextBlock","focus","PropertyCantBeNull","RequiredInputsShouldHaveLabel","RequiredInputsShouldHaveErrorMessage","validateValue","isSet","labelProperty","isRequiredProperty","errorMessageProperty","Input","isMultiline","Text","setupInput","placeholder","maxLength","oninput","ctrlKey","code","inlineAction","renderedInputControl","iconUrl","textContent","inputControlContainerElement","regex","test","maxLengthProperty","isMultilineProperty","placeholderProperty","inlineActionProperty","regexProperty","TextInput","valueOn","valueOff","_checkboxInputElement","joinedLabelIds","_checkboxInputLabelElement","checked","onchange","spacerElement","valueOnProperty","valueOffProperty","ToggleInput","Choice","isMultiSelect","choices","getUniqueCategoryName","uniqueCategoryName","ChoiceSetInput","uniqueCategoryCounter","renderCompoundInput","cssClassName","defaultValues","_toggleInputs","_labels","choice","_uniqueCategoryName","compoundInput","internalApplyAriaCurrent","options","_selectElement","selected","option","disabled","hidden","CollectionCantBeEmpty","toggleInput","isCompact","selectedIndex","choicesProperty","isMultiSelectProperty","_numberInputElement","min","max","valueAsNumber","minProperty","maxProperty","NumberInput","_dateInputElement","valueAsDate","Date","minDate","maxDate","DateInput","TimeProperty","convertTimeStringToDate","timeString","_timeInputElement","TimeInput","action","parentContainerStyle","_state","_parentContainerStyle","updateCssStyle","updateActionButtonCssStyle","click","onClick","addCssClasses","internalGetReferencedInputs","internalPrepareForExecution","internalValidateInputs","ignoreInputValidation","actionRegistry","raiseExecuteActionEvent","onExecuteActionHandler","onExecute","onExecuteAction","prepareForExecution","actionButtonElement","buttonState","baseCssClass","buttonElement","titleElement","AboveTitle","iconElement","_actionCollection","actionExecuted","invalidInputs","removeAction","validateInputs","iconUrlProperty","ignoreInputValidationProperty","Action","_ignoreInputValidation","_isPrepared","current","_originalData","_processedData","SubmitAction","JsonTypeName","dataProperty","OpenUrlAction","targetElements","updateAriaControlsAttribute","elementIds","ToggleVisibilityAction","elementId","addTargetElement","removeTargetElement","targetElementsProperty","_value","newValue","nameProperty","StringWithSubstitutionProperty","HttpHeader","allInputs","_url","headers","_body","header","HttpAction","bodyProperty","methodProperty","headersProperty","InlineAdaptiveCard","jsonCard","Popup","ShowCardAction","owner","_renderedActionCount","buttons","_owner","isActionAllowed","forbiddenTypes","forbiddenType","refreshContainer","_actionCardContainer","_actionCard","layoutChanged","showActionCard","suppressStyle","raiseEvent","renderedCard","_expandedAction","raiseInlineCardExpandedEvent","collapseExpandedAction","state","previouslyExpandedAction","expandShowCardAction","button","findActionButton","actionButton","jsonAction","addAction","TooManyActions","ActionTypeNotAllowed","buttonStrip","allowedActions","filter","ActionButton","ab","spacer","buttonStripContainer","expandedAction","actionIndex","ActionCollection","renderedActionCount","orientationProperty","ActionSet","_bleed","StylableCardElementContainer","minPixelHeight","applyBackground","bgColor","surroundingPadding","currentElementHasBackgroundImage","backgroundImage","hasExplicitStyle","getHasExpandedAction","getBleed","setBleed","explicitStyle","bleedProperty","minHeightProperty","apply","BackgroundImage","fillMode","Repeat","RepeatHorizontally","RepeatVertically","Cover","backgroundSize","backgroundPositionX","verticalAlignment","backgroundPositionY","Bottom","fillModeProperty","verticalAlignmentProperty","Top","verticalContentAlignment","_renderedItems","backgroundImageProperty","insertItemAt","forceInsert","isStandalone","supportsExcplitiHeight","getItemsCollectionPropertyName","rtl","dir","renderedItem","placeholderElement","elt","getFitStatus","jsonItems","firstRenderedItem","lastRenderedItem","addItem","insertItemBefore","insertBefore","insertItemAfter","insertAfter","verticalContentAlignmentProperty","rtlProperty","_computedWeight","Vertical","ColumnSet","widthProperty","Column","_columns","createColumnInstance","parseCardObject","errorType","ElementTypeNotAllowed","_renderedColumns","totalWeight","column","computedWeight","renderedColumn","jsonColumns","getColumnAt","weightedColumns","stretchedColumns","Hint","addColumn","onImageLoadedHandler","onImageLoaded","onAnchorClickedHandler","onAnchorClicked","isExpanded","onInlineCardExpandedHandler","onInlineCardExpanded","shouldUpdateLayout","onElementVisibilityChangedHandler","onElementVisibilityChanged","renderedActions","renderIfEmpty","ContainerWithActions","onProcessMarkdown","markdownit","markdownIt","console","warn","isVersionSupported","bypassVersionCheck","_fallbackCard","fallbackElement","versionProperty","MissingCardType","UnsupportedCardVersion","speak","schemaUrl","$schemaProperty","fallbackTextProperty","speakProperty","populateWithDefaultElements","registry","populateWithDefaultActions","reset","GlobalRegistry","elements","internalParseCardObject","forbiddenTypeNames","allowFallback","createInstanceCallback","tryToFallback","fallback","cardObjectParsed","onParseAction","onParseElement","UnknownElementType","UnknownActionType","_elementRegistry","setElementRegistry","_actionRegistry","setActionRegistry","regularExpression","_regularExpression","format","internalFormat","date","toLocaleDateString","day","weekday","month","year","AbstractTextFormatter","toLocaleTimeString","hour","minute","DateFormatter","TimeFormatter"],"mappings":"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","file":"adaptivecards.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AdaptiveCards\"] = factory();\n\telse\n\t\troot[\"AdaptiveCards\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// Note the \"weird\" way these readonly fields are declared is to work around\r\n// a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n// and adopt this syntax for all other static readonly fields.\r\nexport class ActionStyle {\r\n    static readonly Default: \"default\" = \"default\";\r\n    static readonly Positive: \"positive\" = \"positive\";\r\n    static readonly Destructive: \"destructive\" = \"destructive\";\r\n}\r\n\r\nexport enum Size {\r\n    Auto,\r\n    Stretch,\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\nexport enum ImageSize {\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\nexport enum SizeUnit {\r\n    Weight,\r\n    Pixel\r\n}\r\n\r\nexport enum TextSize {\r\n    Small,\r\n    Default,\r\n    Medium,\r\n    Large,\r\n    ExtraLarge\r\n}\r\n\r\nexport enum TextWeight {\r\n    Lighter,\r\n    Default,\r\n    Bolder\r\n}\r\n\r\nexport enum FontType {\r\n    Default,\r\n    Monospace\r\n}\r\n\r\nexport enum Spacing {\r\n    None,\r\n    Small,\r\n    Default,\r\n    Medium,\r\n    Large,\r\n    ExtraLarge,\r\n    Padding\r\n}\r\n\r\nexport enum TextColor {\r\n    Default,\r\n    Dark,\r\n    Light,\r\n    Accent,\r\n    Good,\r\n    Warning,\r\n    Attention\r\n}\r\n\r\nexport enum HorizontalAlignment {\r\n    Left,\r\n    Center,\r\n    Right\r\n}\r\n\r\nexport enum VerticalAlignment {\r\n    Top,\r\n    Center,\r\n    Bottom\r\n}\r\n\r\nexport enum ActionAlignment {\r\n    Left,\r\n    Center,\r\n    Right,\r\n    Stretch\r\n}\r\n\r\nexport enum ImageStyle {\r\n    Default,\r\n    Person\r\n}\r\n\r\nexport enum ShowCardActionMode {\r\n    Inline,\r\n    Popup\r\n}\r\n\r\nexport enum Orientation {\r\n    Horizontal,\r\n    Vertical\r\n}\r\n\r\nexport enum FillMode {\r\n    Cover,\r\n    RepeatHorizontally,\r\n    RepeatVertically,\r\n    Repeat\r\n}\r\n\r\nexport enum ActionIconPlacement {\r\n    LeftOfTitle,\r\n    AboveTitle\r\n}\r\n\r\nexport enum InputTextStyle {\r\n    Text,\r\n    Tel,\r\n    Url,\r\n    Email\r\n}\r\n\r\n/*\r\n    This should really be a string enum, e.g.\r\n\r\n        export enum ContainerStyle {\r\n            Default = \"default\",\r\n            Emphasis = \"emphasis\"\r\n        }\r\n\r\n    However, some hosts do not use a version of TypeScript\r\n    recent enough to understand string enums. This is\r\n    a compatible construct that does not require using\r\n    a more recent version of TypeScript.\r\n\r\n    Also note the \"weird\" way these readonly fields are declared is to work around\r\n    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    and adopt this syntax for all other static readonly fields.\r\n*/\r\nexport class ContainerStyle {\r\n    static readonly Default: \"default\" = \"default\";\r\n    static readonly Emphasis: \"emphasis\" = \"emphasis\";\r\n    static readonly Accent: \"accent\" = \"accent\";\r\n    static readonly Good: \"good\" = \"good\";\r\n    static readonly Attention: \"attention\" = \"attention\";\r\n    static readonly Warning: \"warning\" = \"warning\";\r\n}\r\n\r\nexport enum ValidationPhase {\r\n    Parse,\r\n    ToJSON,\r\n    Validation\r\n}\r\n\r\nexport enum ValidationEvent {\r\n    Hint,\r\n    ActionTypeNotAllowed,\r\n    CollectionCantBeEmpty,\r\n    Deprecated,\r\n    ElementTypeNotAllowed,\r\n    InteractivityNotAllowed,\r\n    InvalidPropertyValue,\r\n    MissingCardType,\r\n    PropertyCantBeNull,\r\n    TooManyActions,\r\n    UnknownActionType,\r\n    UnknownElementType,\r\n    UnsupportedCardVersion,\r\n    DuplicateId,\r\n    UnsupportedProperty,\r\n    RequiredInputsShouldHaveLabel,\r\n    RequiredInputsShouldHaveErrorMessage,\r\n    Other\r\n}\r\n\r\nexport enum ContainerFitStatus {\r\n    FullyInContainer,\r\n    Overflowing,\r\n    FullyOutOfContainer\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\n\r\nexport class GlobalSettings {\r\n    static useAdvancedTextBlockTruncation: boolean = true;\r\n    static useAdvancedCardBottomTruncation: boolean = false;\r\n    static useMarkdownInRadioButtonAndCheckbox: boolean = true;\r\n    static allowMarkForTextHighlighting: boolean = false;\r\n    static alwaysBleedSeparators: boolean = false;\r\n    static enableFullJsonRoundTrip: boolean = false;\r\n    static displayInputValidationErrors: boolean = true;\r\n    static allowPreProcessingPropertyValues: boolean = false;\r\n    static setTabIndexAtCardRoot: boolean = true;\r\n    static enableFallback: boolean = true;\r\n}\r\n\r\nexport const ContentTypes = {\r\n    applicationJson: \"application/json\",\r\n    applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\r\n}\r\n\r\nexport interface ISeparationDefinition {\r\n    spacing: number,\r\n    lineThickness?: number,\r\n    lineColor?: string\r\n}\r\n\r\nexport interface IInput {\r\n    id?: string;\r\n    value?: string;\r\n    validateValue(): boolean;\r\n}\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport class StringWithSubstitutions {\r\n    private _isProcessed: boolean = false;\r\n    private _original?: string;\r\n    private _processed?: string;\r\n\r\n    getReferencedInputs(inputs: IInput[], referencedInputs: Dictionary<IInput>) {\r\n        if (!referencedInputs) {\r\n            throw new Error(\"The referencedInputs parameter cannot be null.\")\r\n        }\r\n\r\n        for (let input of inputs) {\r\n            let matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(<string>this._original);\r\n\r\n            if (matches != null && input.id) {\r\n                referencedInputs[input.id] = input;\r\n            }\r\n        }\r\n    }\r\n\r\n    substituteInputValues(inputs: Dictionary<IInput>, contentType: string) {\r\n        this._processed = this._original;\r\n\r\n        if (this._original) {\r\n            let regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\r\n            let matches;\r\n\r\n            while ((matches = regEx.exec(<string>this._original)) !== null) {\r\n                for (let key of Object.keys(inputs)) {\r\n                    if (key.toLowerCase() == matches[1].toLowerCase()) {\r\n                        let matchedInput = inputs[key];\r\n\r\n                        let valueForReplace = \"\";\r\n\r\n                        if (matchedInput.value) {\r\n                            valueForReplace = matchedInput.value;\r\n                        }\r\n\r\n                        if (contentType === ContentTypes.applicationJson) {\r\n                            valueForReplace = JSON.stringify(valueForReplace);\r\n                            valueForReplace = valueForReplace.slice(1, -1);\r\n                        }\r\n                        else if (contentType === ContentTypes.applicationXWwwFormUrlencoded) {\r\n                            valueForReplace = encodeURIComponent(valueForReplace);\r\n                        }\r\n\r\n                        this._processed = (<string>this._processed).replace(matches[0], valueForReplace);\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isProcessed = true;\r\n    }\r\n\r\n    getOriginal(): string | undefined {\r\n        return this._original;\r\n    }\r\n\r\n    get(): string | undefined {\r\n        if (!this._isProcessed) {\r\n            return this._original;\r\n        }\r\n        else {\r\n            return this._processed;\r\n        }\r\n    }\r\n\r\n    set(value: string | undefined) {\r\n        this._original = value;\r\n        this._isProcessed = false;\r\n    }\r\n}\r\n\r\nexport class SpacingDefinition {\r\n    left: number = 0;\r\n    top: number = 0;\r\n    right: number = 0;\r\n    bottom: number = 0;\r\n\r\n    constructor(top: number = 0,\r\n        right: number = 0,\r\n        bottom: number = 0,\r\n        left: number = 0) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n}\r\n\r\nexport class PaddingDefinition {\r\n    top: Enums.Spacing = Enums.Spacing.None;\r\n    right: Enums.Spacing = Enums.Spacing.None;\r\n    bottom: Enums.Spacing = Enums.Spacing.None;\r\n    left: Enums.Spacing = Enums.Spacing.None;\r\n\r\n    constructor(top: Enums.Spacing = Enums.Spacing.None,\r\n        right: Enums.Spacing = Enums.Spacing.None,\r\n        bottom: Enums.Spacing = Enums.Spacing.None,\r\n        left: Enums.Spacing = Enums.Spacing.None) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n}\r\n\r\nexport class SizeAndUnit {\r\n    physicalSize: number;\r\n    unit: Enums.SizeUnit;\r\n\r\n    static parse(input: string, requireUnitSpecifier: boolean = false): SizeAndUnit {\r\n        let result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\r\n\r\n        if (typeof input === \"number\") {\r\n            result.physicalSize = input;\r\n\r\n            return result;\r\n        }\r\n        else if (typeof input === \"string\") {\r\n            let regExp = /^([0-9]+)(px|\\*)?$/g;\r\n            let matches = regExp.exec(input);\r\n            let expectedMatchCount = requireUnitSpecifier ? 3 : 2;\r\n\r\n            if (matches && matches.length >= expectedMatchCount) {\r\n                result.physicalSize = parseInt(matches[1]);\r\n\r\n                if (matches.length == 3) {\r\n                    if (matches[2] == \"px\") {\r\n                        result.unit = Enums.SizeUnit.Pixel;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Invalid size: \" + input);\r\n    }\r\n\r\n    constructor(physicalSize: number, unit: Enums.SizeUnit) {\r\n        this.physicalSize = physicalSize;\r\n        this.unit = unit;\r\n    }\r\n}\r\n\r\nexport interface IResourceInformation {\r\n    url: string;\r\n    mimeType: string;\r\n}\r\n\r\n/**\r\n * Fast UUID generator, RFC4122 version 4 compliant.\r\n * @author Jeff Ward (jcward.com).\r\n * @license MIT license\r\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n **/\r\nexport class UUID {\r\n    private static lut: string[] = [];\r\n\r\n    static generate(): string {\r\n        let d0 = Math.random() * 0xffffffff | 0;\r\n        let d1 = Math.random() * 0xffffffff | 0;\r\n        let d2 = Math.random() * 0xffffffff | 0;\r\n        let d3 = Math.random() * 0xffffffff | 0;\r\n\r\n        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +\r\n            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +\r\n            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +\r\n            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\r\n    }\r\n\r\n    static initialize() {\r\n        for (let i = 0; i < 256; i++) {\r\n            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\r\n        }\r\n    }\r\n}\r\n\r\nUUID.initialize();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\r\nimport * as Utils from \"./utils\";\r\nimport * as Enums from \"./enums\";\r\nimport { Strings } from \"./strings\";\r\n\r\nexport interface IValidationEvent {\r\n    source?: SerializableObject,\r\n    phase: Enums.ValidationPhase,\r\n    event: Enums.ValidationEvent,\r\n    message: string;\r\n}\r\n\r\nexport class Version {\r\n    private _versionString: string;\r\n    private _major: number;\r\n    private _minor: number;\r\n    private _isValid: boolean = true;\r\n    private _label?: string;\r\n\r\n    constructor(major: number = 1, minor: number = 1, label?: string) {\r\n        this._major = major;\r\n        this._minor = minor;\r\n        this._label = label;\r\n    }\r\n\r\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\r\n        if (!versionString) {\r\n            return undefined;\r\n        }\r\n\r\n        let result = new Version();\r\n        result._versionString = versionString;\r\n\r\n        let regEx = /(\\d+).(\\d+)/gi;\r\n        let matches = regEx.exec(versionString);\r\n\r\n        if (matches != null && matches.length == 3) {\r\n            result._major = parseInt(matches[1]);\r\n            result._minor = parseInt(matches[2]);\r\n        }\r\n        else {\r\n            result._isValid = false;\r\n        }\r\n\r\n        if (!result._isValid) {\r\n            context.logParseEvent(\r\n                undefined,\r\n                Enums.ValidationEvent.InvalidPropertyValue,\r\n                Strings.errors.invalidVersionString(result._versionString));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toString(): string {\r\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\r\n    }\r\n\r\n    toJSON(): any {\r\n        return this.toString();\r\n    }\r\n\r\n    compareTo(otherVersion: Version): number {\r\n        if (!this.isValid || !otherVersion.isValid) {\r\n            throw new Error(\"Cannot compare invalid version.\");\r\n        }\r\n\r\n        if (this.major > otherVersion.major) {\r\n            return 1;\r\n        }\r\n        else if (this.major < otherVersion.major) {\r\n            return -1;\r\n        }\r\n        else if (this.minor > otherVersion.minor) {\r\n            return 1;\r\n        }\r\n        else if (this.minor < otherVersion.minor) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get label(): string {\r\n        return this._label ? this._label : this.toString();\r\n    }\r\n\r\n    get major(): number {\r\n        return this._major;\r\n    }\r\n\r\n    get minor(): number {\r\n        return this._minor;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        return this._isValid;\r\n    }\r\n}\r\n\r\nexport type TargetVersion = Version | \"*\";\r\n\r\nexport class Versions {\r\n    static readonly v1_0 = new Version(1, 0);\r\n    static readonly v1_1 = new Version(1, 1);\r\n    static readonly v1_2 = new Version(1, 2);\r\n    static readonly v1_3 = new Version(1, 3);\r\n    static readonly latest = Versions.v1_3;\r\n}\r\n\r\nexport function isVersionLessOrEqual(version: TargetVersion, targetVersion: TargetVersion): boolean {\r\n    if (version instanceof Version) {\r\n        if (targetVersion instanceof Version) {\r\n            return targetVersion.compareTo(version) >= 0;\r\n        }\r\n        else {\r\n            // Target version is *\r\n            return true;\r\n        }\r\n    }\r\n    else {\r\n        // Version is *\r\n        return true;\r\n    }\r\n}\r\n\r\nexport abstract class BaseSerializationContext {\r\n    private _validationEvents: IValidationEvent[] = [];\r\n\r\n    toJSONOriginalParam: any;\r\n\r\n    serializeValue(target: { [key: string]: any }, propertyName: string, propertyValue: any, defaultValue: any = undefined) {\r\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\r\n            if (!GlobalSettings.enableFullJsonRoundTrip) {\r\n                delete target[propertyName];\r\n            }\r\n        }\r\n        else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeNumber(target: { [key: string]: any }, propertyName: string, propertyValue: number | undefined, defaultValue: number | undefined = undefined) {\r\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {\r\n            delete target[propertyName];\r\n        }\r\n        else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeEnum(\r\n        enumType: { [s: number]: string },\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue: number | undefined,\r\n        defaultValue: number | undefined = undefined) {\r\n        let targetValue = target[propertyName];\r\n\r\n        let canDeleteTarget = targetValue == undefined ? true : enumType[targetValue] !== undefined;\r\n\r\n        if (propertyValue == defaultValue) {\r\n            if (canDeleteTarget) {\r\n                delete target[propertyName];\r\n            }\r\n        }\r\n        else {\r\n            if (propertyValue == undefined) {\r\n                if (canDeleteTarget) {\r\n                    delete target[propertyName];\r\n                }\r\n            }\r\n            else {\r\n                target[propertyName] = enumType[propertyValue];\r\n            }\r\n        }\r\n    }\r\n\r\n    serializeArray(target: { [key: string]: any }, propertyName: string, propertyValue: any[] | undefined) {\r\n        let items = [];\r\n\r\n        if (propertyValue) {\r\n            for (let item of propertyValue) {\r\n                let serializedItem: any = undefined;\r\n\r\n                if (item instanceof SerializableObject) {\r\n                    serializedItem = item.toJSON(this);\r\n                }\r\n                else if (item.toJSON) {\r\n                    serializedItem = item.toJSON();\r\n                }\r\n                else {\r\n                    serializedItem = item;\r\n                }\r\n\r\n                if (serializedItem !== undefined) {\r\n                    items.push(serializedItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (items.length == 0) {\r\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\r\n                delete target[propertyName];\r\n            }\r\n        }\r\n        else {\r\n            this.serializeValue(target, propertyName, items);\r\n        }\r\n    }\r\n\r\n    clearEvents() {\r\n        this._validationEvents = [];\r\n    }\r\n\r\n    logEvent(\r\n        source: SerializableObject | undefined,\r\n        phase: Enums.ValidationPhase,\r\n        event: Enums.ValidationEvent,\r\n        message: string) {\r\n        this._validationEvents.push(\r\n            {\r\n                source: source,\r\n                phase: phase,\r\n                event: event,\r\n                message: message\r\n            }\r\n        )\r\n    }\r\n\r\n    logParseEvent(source: SerializableObject | undefined, event: Enums.ValidationEvent, message: string) {\r\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\r\n    }\r\n\r\n    getEventAt(index: number): IValidationEvent {\r\n        return this._validationEvents[index];\r\n    }\r\n\r\n    constructor(public targetVersion: Version = Versions.latest) {}\r\n\r\n    get eventCount(): number {\r\n        return this._validationEvents.length;\r\n    }\r\n}\r\n\r\nclass SimpleSerializationContext extends BaseSerializationContext {}\r\n\r\nexport class PropertyDefinition {\r\n    private static _sequentialNumber: number = 0;\r\n\r\n    getInternalName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): any {\r\n        return source[this.name];\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: any, context: BaseSerializationContext): void {\r\n        context.serializeValue(target, this.name, value, this.defaultValue);\r\n    }\r\n\r\n    readonly sequentialNumber: number;\r\n\r\n    isSerializationEnabled: boolean = true;\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: any,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\r\n            this.sequentialNumber = PropertyDefinition._sequentialNumber;\r\n\r\n            PropertyDefinition._sequentialNumber++;\r\n        }\r\n}\r\n\r\nexport class StringProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\r\n        let parsedValue = Utils.parseString(source[this.name], this.defaultValue);\r\n        let isUndefined = parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\r\n\r\n        if (!isUndefined && this.regEx !== undefined) {\r\n            let matches = this.regEx.exec(<string>parsedValue);\r\n\r\n            if (!matches) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidPropertyValue(parsedValue, this.name));\r\n\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return parsedValue;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\r\n            this.defaultValue);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly treatEmptyAsUndefined: boolean = true,\r\n        readonly regEx?: RegExp,\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class BoolProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): boolean | undefined {\r\n        return Utils.parseBool(source[this.name], this.defaultValue);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: object, value: boolean | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            value,\r\n            this.defaultValue);\r\n    }\r\n}\r\n\r\nexport class NumProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        return Utils.parseNumber(source[this.name], this.defaultValue);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        context.serializeNumber(\r\n            target,\r\n            this.name,\r\n            value,\r\n            this.defaultValue);\r\n    }\r\n}\r\n\r\nexport class PixelSizeProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        let result: number | undefined = undefined;\r\n        let value = source[this.name];\r\n\r\n        if (typeof value === \"string\") {\r\n            let isValid = false;\r\n\r\n            try {\r\n                let size = SizeAndUnit.parse(value, true);\r\n\r\n                if (size.unit == Enums.SizeUnit.Pixel) {\r\n                    result = size.physicalSize;\r\n\r\n                    isValid = true;\r\n                }\r\n            }\r\n            catch {\r\n                // Do nothing. A parse error is emitted below\r\n            }\r\n\r\n            if (!isValid) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidPropertyValue(source[this.name], \"minHeight\"));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\r\n    }\r\n}\r\n\r\nexport interface IVersionedValue<TValue> {\r\n    value: TValue;\r\n    targetVersion?: Version;\r\n}\r\n\r\nexport class ValueSetProperty extends PropertyDefinition {\r\n    isValidValue(value: string, context: BaseSerializationContext): boolean {\r\n        for (let versionedValue of this.values) {\r\n            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\r\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                return targetVersion.compareTo(context.targetVersion) <= 0;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\r\n        let sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        if (typeof sourceValue === \"string\") {\r\n            for (let versionedValue of this.values) {\r\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\r\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        return versionedValue.value;\r\n                    }\r\n                    else {\r\n                        context.logParseEvent(\r\n                            sender,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.propertyValueNotSupported(\r\n                                sourceValue,\r\n                                this.name,\r\n                                targetVersion.toString(),\r\n                                context.targetVersion.toString()));\r\n\r\n                        return this.defaultValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.logParseEvent(\r\n            sender,\r\n            Enums.ValidationEvent.InvalidPropertyValue,\r\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\r\n\r\n        return this.defaultValue;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\r\n        let valueFound = false;\r\n\r\n        for (let versionedValue of this.values) {\r\n            if (versionedValue.value === value) {\r\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                    valueFound = true;\r\n\r\n                    break;\r\n                }\r\n                else {\r\n                    context.logEvent(\r\n                        sender,\r\n                        Enums.ValidationPhase.ToJSON,\r\n                        Enums.ValidationEvent.InvalidPropertyValue,\r\n                        Strings.errors.propertyValueNotSupported(\r\n                            value,\r\n                            this.name,\r\n                            targetVersion.toString(),\r\n                            context.targetVersion.toString()));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (valueFound) {\r\n            context.serializeValue(\r\n                target,\r\n                this.name,\r\n                value,\r\n                this.defaultValue);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly values: IVersionedValue<string>[],\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\r\n    private _values: IVersionedValue<number>[] = [];\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        let sourceValue = source[this.name];\r\n\r\n        if (typeof sourceValue !== \"string\") {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        let enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\r\n\r\n        if (enumValue !== undefined) {\r\n            for (let versionedValue of this.values) {\r\n                if (versionedValue.value === enumValue) {\r\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        return enumValue;\r\n                    }\r\n                    else {\r\n                        context.logParseEvent(\r\n                            sender,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.propertyValueNotSupported(\r\n                                sourceValue,\r\n                                this.name,\r\n                                targetVersion.toString(),\r\n                                context.targetVersion.toString()));\r\n\r\n                        return this.defaultValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.logParseEvent(\r\n            sender,\r\n            Enums.ValidationEvent.InvalidPropertyValue,\r\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\r\n\r\n        return this.defaultValue;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        if (value !== undefined) {\r\n            let valueFound = false;\r\n\r\n            for (let versionedValue of this.values) {\r\n                if (versionedValue.value === value) {\r\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        valueFound = true;\r\n\r\n                        break;\r\n                    }\r\n                    else {\r\n                        context.logEvent(\r\n                            sender,\r\n                            Enums.ValidationPhase.ToJSON,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.invalidPropertyValue(value, this.name));\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (valueFound) {\r\n                context.serializeEnum(\r\n                    this.enumType,\r\n                    target,\r\n                    this.name,\r\n                    value,\r\n                    this.defaultValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly enumType: TEnum,\r\n        readonly defaultValue?: number,\r\n        values?: IVersionedValue<number>[],\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => number) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n\r\n        if (!values) {\r\n            for (let key in enumType) {\r\n                let keyAsNumber = parseInt(key, 10);\r\n\r\n                if (keyAsNumber >= 0) {\r\n                    this._values.push( { value: keyAsNumber });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._values = values;\r\n        }\r\n    }\r\n\r\n    get values(): IVersionedValue<number>[] {\r\n        return this._values;\r\n    }\r\n}\r\n\r\nexport type SerializableObjectType = { new(): SerializableObject };\r\n\r\nexport class SerializableObjectProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject | undefined {\r\n        let sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\r\n        }\r\n\r\n        let result = new this.objectType();\r\n        result.parse(sourceValue, context);\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject | undefined, context: BaseSerializationContext) {\r\n        let serializedValue = value !== undefined ? value.toJSON(context) : value;\r\n\r\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\r\n            serializedValue = undefined;\r\n        }\r\n\r\n        super.toJSON(sender, target, serializedValue, context);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly objectType: SerializableObjectType,\r\n        defaultValue?: SerializableObject) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            defaultValue,\r\n            (sender: SerializableObject) => { return new this.objectType(); });\r\n    }\r\n}\r\n\r\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject[] | undefined {\r\n        let result: SerializableObject[] | undefined = [];\r\n\r\n        let sourceCollection = source[this.name];\r\n\r\n        if (Array.isArray(sourceCollection)) {\r\n            for (let sourceItem of sourceCollection) {\r\n                let item = new this.objectType();\r\n                item.parse(sourceItem, context);\r\n\r\n                result.push(item);\r\n\r\n                if (this.onItemAdded) {\r\n                    this.onItemAdded(sender, item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result.length > 0 ? result : (this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject[] | undefined, context: BaseSerializationContext) {\r\n        context.serializeArray(target, this.name, value);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly objectType: SerializableObjectType,\r\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            undefined,\r\n            (sender: SerializableObject) => { return []; });\r\n    }\r\n}\r\n\r\nexport class CustomProperty<T> extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\r\n        return this.onParse(sender, this, source, context);\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: T, context: BaseSerializationContext) {\r\n        this.onToJSON(sender, this, target, value, context);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly onParse: (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => T,\r\n        readonly onToJSON: (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: T, context: BaseSerializationContext) => void,\r\n        readonly defaultValue?: T,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => T) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n\r\n        if (!this.onParse) {\r\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\r\n        }\r\n\r\n        if (!this.onToJSON) {\r\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class SerializableObjectSchema {\r\n    private _properties: PropertyDefinition[] = [];\r\n\r\n    indexOf(property: PropertyDefinition): number {\r\n        for (let i = 0; i < this._properties.length; i++) {\r\n            if (this._properties[i] === property) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    add(...properties: PropertyDefinition[]) {\r\n        for (let i = 0; i < properties.length; i++) {\r\n            if (this.indexOf(properties[i]) === -1) {\r\n                this._properties.push(properties[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(...properties: PropertyDefinition[]) {\r\n        for (let property of properties) {\r\n            while (true) {\r\n                let index = this.indexOf(property);\r\n\r\n                if (index >= 0) {\r\n                    this._properties.splice(index, 1);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getItemAt(index: number): PropertyDefinition {\r\n        return this._properties[index];\r\n    }\r\n\r\n    getCount(): number {\r\n        return this._properties.length;\r\n    }\r\n}\r\n\r\n// This is a decorator function, used to map SerializableObject descendant class members to\r\n// schema properties\r\nexport function property(property: PropertyDefinition) {\r\n    return function(target: any, propertyKey: string) {\r\n        let descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\r\n\r\n        if (!descriptor.get && !descriptor.set) {\r\n            descriptor.get = function(this: SerializableObject) { return this.getValue(property); };\r\n            descriptor.set = function(this: SerializableObject, value: any) { this.setValue(property, value); };\r\n\r\n            Object.defineProperty(target, propertyKey, descriptor)\r\n        }\r\n    }\r\n}\r\n\r\nexport type PropertyBag = { [propertyName: string]: any };\r\n\r\nexport abstract class SerializableObject {\r\n    static onRegisterCustomProperties?: (sender: SerializableObject, schema: SerializableObjectSchema) => void;\r\n\r\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\r\n\r\n    private _propertyBag: PropertyBag = {};\r\n    private _rawProperties: PropertyBag = {};\r\n\r\n    protected abstract getSchemaKey(): string;\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SimpleSerializationContext();\r\n    }\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        let ctor = <any>this.constructor;\r\n        let properties: PropertyDefinition[] = [];\r\n\r\n        for (let propertyName in ctor) {\r\n            try {\r\n                let propertyValue = ctor[propertyName];\r\n\r\n                if (propertyValue instanceof PropertyDefinition) {\r\n                    properties.push(propertyValue);\r\n                }\r\n            }\r\n            catch {\r\n                // If a property happens to have a getter function and\r\n                // it throws an exception, we need to catch it here\r\n            }\r\n        }\r\n\r\n        if (properties.length > 0) {\r\n            let sortedProperties = properties.sort((p1: PropertyDefinition, p2: PropertyDefinition) => {\r\n                if (p1.sequentialNumber > p2.sequentialNumber) {\r\n                    return 1;\r\n                }\r\n                else if (p1.sequentialNumber < p2.sequentialNumber) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            schema.add(...sortedProperties);\r\n        }\r\n\r\n        if (SerializableObject.onRegisterCustomProperties) {\r\n            SerializableObject.onRegisterCustomProperties(this, schema);\r\n        }\r\n    }\r\n\r\n    protected getValue(property: PropertyDefinition): any {\r\n        return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;\r\n    }\r\n\r\n    protected setValue(property: PropertyDefinition, value: any) {\r\n        if (value === undefined || value === null) {\r\n            delete this._propertyBag[property.getInternalName()];\r\n        }\r\n        else {\r\n            this._propertyBag[property.getInternalName()] = value;\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\r\n        this._propertyBag = {};\r\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\r\n\r\n        if (source) {\r\n            let s = this.getSchema();\r\n\r\n            for (let i = 0; i < s.getCount(); i++) {\r\n                let property = s.getItemAt(i);\r\n\r\n                if (property.isSerializationEnabled) {\r\n                    let propertyValue = property.onGetInitialValue ? property.onGetInitialValue(this) : undefined;\r\n\r\n                    if (source.hasOwnProperty(property.name)) {\r\n                        if (property.targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                            propertyValue = property.parse(this, source, context);\r\n                        }\r\n                        else {\r\n                            context.logParseEvent(\r\n                                this,\r\n                                Enums.ValidationEvent.UnsupportedProperty,\r\n                                Strings.errors.propertyNotSupported(\r\n                                    property.name,\r\n                                    property.targetVersion.toString(),\r\n                                    context.targetVersion.toString()));\r\n                        }\r\n                    }\r\n\r\n                    this.setValue(property, propertyValue);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.resetDefaultValues();\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        let s = this.getSchema();\r\n        let serializedProperties: string[] = [];\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            // Avoid serializing the same property multiple times. This is necessary\r\n            // because some property definitions map to the same underlying schema\r\n            // property\r\n            if (property.isSerializationEnabled && property.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property.name) === -1) {\r\n                property.toJSON(this, target, this.getValue(property), context);\r\n\r\n                serializedProperties.push(property.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shouldSerialize(context: BaseSerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    maxVersion: Version = Versions.v1_3;\r\n\r\n    constructor() {\r\n        let s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            if (property.onGetInitialValue) {\r\n                this.setValue(property, property.onGetInitialValue(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\r\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\r\n    }\r\n\r\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\r\n        let effectiveContext: BaseSerializationContext;\r\n        \r\n        if (context && context instanceof BaseSerializationContext) {\r\n            effectiveContext = context;\r\n        }\r\n        else {\r\n            effectiveContext = this.getDefaultSerializationContext();\r\n            effectiveContext.toJSONOriginalParam = context;\r\n        }\r\n\r\n        if (this.shouldSerialize(effectiveContext)) {\r\n            let result: PropertyBag;\r\n\r\n            if (GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\r\n                result = this._rawProperties;\r\n            }\r\n            else {\r\n                result = {};\r\n            }\r\n\r\n            this.internalToJSON(result, effectiveContext);\r\n\r\n            return result;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    hasDefaultValue(property: PropertyDefinition): boolean {\r\n        return this.getValue(property) === property.defaultValue;\r\n    }\r\n\r\n    hasAllDefaultValues(): boolean {\r\n        let s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            if (!this.hasDefaultValue(property)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    resetDefaultValues() {\r\n        let s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            let property = s.getItemAt(i);\r\n\r\n            this.setValue(property, property.defaultValue);\r\n        }\r\n    }\r\n\r\n    setCustomProperty(name: string, value: any) {\r\n        let shouldDeleteProperty = (typeof value === \"string\" && !value) || value === undefined || value === null;\r\n\r\n        if (shouldDeleteProperty) {\r\n            delete this._rawProperties[name];\r\n        }\r\n        else {\r\n            this._rawProperties[name] = value;\r\n        }\r\n    }\r\n\r\n    getCustomProperty(name: string): any {\r\n        return this._rawProperties[name];\r\n    }\r\n\r\n    getSchema(): SerializableObjectSchema {\r\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\r\n\r\n        if (!schema) {\r\n            schema = new SerializableObjectSchema();\r\n\r\n            this.populateSchema(schema);\r\n\r\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\r\n        }\r\n\r\n        return schema;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Shared from \"./shared\";\r\nimport { HostConfig } from \"./host-config\";\r\n\r\nexport function isMobileOS(): boolean {\r\n    let userAgent = window.navigator.userAgent;\r\n\r\n    return !!userAgent.match(/Android/i) || !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i);\r\n}\r\n\r\n/**\r\n * Generate a UUID prepended with \"__ac-\"\r\n */\r\nexport function generateUniqueId(): string {\r\n    return \"__ac-\" + Shared.UUID.generate();\r\n}\r\n\r\nexport function appendChild(node: Node, child: Node | undefined) {\r\n    if (child) {\r\n        node.appendChild(child);\r\n    }\r\n}\r\n\r\nexport function parseString(obj: any, defaultValue?: string): string | undefined {\r\n    return typeof obj === \"string\" ? obj : defaultValue;\r\n}\r\n\r\nexport function parseNumber(obj: any, defaultValue?: number): number | undefined {\r\n    return typeof obj === \"number\" ? obj : defaultValue;\r\n}\r\n\r\nexport function parseBool(value: any, defaultValue?: boolean): boolean | undefined {\r\n    if (typeof value === \"boolean\") {\r\n        return value;\r\n    }\r\n    else if (typeof value === \"string\") {\r\n        switch (value.toLowerCase()) {\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n            default:\r\n                return defaultValue;\r\n        }\r\n    }\r\n\r\n    return defaultValue;\r\n}\r\n\r\nexport function getEnumValueByName(enumType: { [s: number]: string }, name: string) : number | undefined {\r\n    for (let key in enumType) {\r\n        let keyAsNumber = parseInt(key, 10);\r\n\r\n        if (keyAsNumber >= 0) {\r\n            let value = enumType[key];\r\n\r\n            if (value && typeof value === \"string\" && value.toLowerCase() === name.toLowerCase()) {\r\n                return keyAsNumber;\r\n            }\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function parseEnum(enumType: { [s: number]: string }, name: string, defaultValue?: number): number | undefined {\r\n    if (!name) {\r\n        return defaultValue;\r\n    }\r\n\r\n    let enumValue = getEnumValueByName(enumType, name);\r\n\r\n    return enumValue !== undefined ? enumValue : defaultValue;\r\n}\r\n\r\nexport function renderSeparation(hostConfig: HostConfig, separationDefinition: Shared.ISeparationDefinition, orientation: Enums.Orientation): HTMLElement | undefined {\r\n    if (separationDefinition.spacing > 0 || (separationDefinition.lineThickness && separationDefinition.lineThickness > 0)) {\r\n        let separator = document.createElement(\"div\");\r\n        separator.className = hostConfig.makeCssClassName(\"ac-\" + (orientation == Enums.Orientation.Horizontal ? \"horizontal\" : \"vertical\") + \"-separator\");\r\n        separator.setAttribute(\"aria-hidden\", \"true\");\r\n\r\n        let color = separationDefinition.lineColor ? stringToCssColor(separationDefinition.lineColor) : \"\";\r\n\r\n        if (orientation == Enums.Orientation.Horizontal) {\r\n            if (separationDefinition.lineThickness) {\r\n                separator.style.paddingTop = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.marginBottom = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.borderBottom = separationDefinition.lineThickness + \"px solid \" + color;\r\n            }\r\n            else {\r\n                separator.style.height = separationDefinition.spacing + \"px\";\r\n            }\r\n        }\r\n        else {\r\n            if (separationDefinition.lineThickness) {\r\n                separator.style.paddingLeft = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.marginRight = (separationDefinition.spacing / 2) + \"px\";\r\n                separator.style.borderRight = separationDefinition.lineThickness + \"px solid \" + color;\r\n            }\r\n            else {\r\n                separator.style.width = separationDefinition.spacing + \"px\";\r\n            }\r\n        }\r\n\r\n        separator.style.overflow = \"hidden\";\r\n        separator.style.flex = \"0 0 auto\";\r\n\r\n        return separator;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function stringToCssColor(color: string | undefined): string | undefined {\r\n    if (color) {\r\n        let regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;\r\n        let matches = regEx.exec(color);\r\n\r\n        if (matches && matches[4]) {\r\n            let a = parseInt(matches[1], 16) / 255;\r\n            let r = parseInt(matches[2], 16);\r\n            let g = parseInt(matches[3], 16);\r\n            let b = parseInt(matches[4], 16);\r\n\r\n            return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n        }\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nexport function truncate(element: HTMLElement,\r\n    maxHeight: number,\r\n    lineHeight?: number) {\r\n    let fits = () => {\r\n        // Allow a one pixel overflow to account for rounding differences\r\n        // between browsers\r\n        return maxHeight - element.scrollHeight >= -1.0;\r\n    };\r\n\r\n    if (fits()) return;\r\n\r\n    let fullText = element.innerHTML;\r\n    let truncateAt = (idx: any) => {\r\n        element.innerHTML = fullText.substring(0, idx) + '...';\r\n    }\r\n\r\n    let breakableIndices = findBreakableIndices(fullText);\r\n    let lo = 0;\r\n    let hi = breakableIndices.length;\r\n    let bestBreakIdx = 0;\r\n\r\n    // Do a binary search for the longest string that fits\r\n    while (lo < hi) {\r\n        let mid = Math.floor((lo + hi) / 2);\r\n        truncateAt(breakableIndices[mid]);\r\n\r\n        if (fits()) {\r\n            bestBreakIdx = breakableIndices[mid];\r\n            lo = mid + 1;\r\n        }\r\n        else {\r\n            hi = mid;\r\n        }\r\n    }\r\n\r\n    truncateAt(bestBreakIdx);\r\n\r\n    // If we have extra room, try to expand the string letter by letter\r\n    // (covers the case where we have to break in the middle of a long word)\r\n    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {\r\n        let idx = findNextCharacter(fullText, bestBreakIdx);\r\n\r\n        while (idx < fullText.length) {\r\n            truncateAt(idx);\r\n\r\n            if (fits()) {\r\n                bestBreakIdx = idx;\r\n                idx = findNextCharacter(fullText, idx);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        truncateAt(bestBreakIdx);\r\n    }\r\n}\r\n\r\nfunction findBreakableIndices(html: string): number[] {\r\n    let results: number[] = [];\r\n    let idx = findNextCharacter(html, -1);\r\n\r\n    while (idx < html.length) {\r\n        if (html[idx] == ' ') {\r\n            results.push(idx);\r\n        }\r\n\r\n        idx = findNextCharacter(html, idx);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction findNextCharacter(html: string, currIdx: number): number {\r\n    currIdx += 1;\r\n\r\n    // If we found the start of an HTML tag, keep advancing until we get\r\n    // past it, so we don't end up truncating in the middle of the tag\r\n    while (currIdx < html.length && html[currIdx] == '<') {\r\n        while (currIdx < html.length && html[currIdx++] != '>');\r\n    }\r\n\r\n    return currIdx;\r\n}\r\n\r\nexport function getFitStatus(element: HTMLElement, containerEnd: number): Enums.ContainerFitStatus {\r\n    let start = element.offsetTop;\r\n    let end = start + element.clientHeight;\r\n\r\n    if (end <= containerEnd) {\r\n        return Enums.ContainerFitStatus.FullyInContainer;\r\n    }\r\n    else if (start < containerEnd) {\r\n        return Enums.ContainerFitStatus.Overflowing;\r\n    }\r\n    else {\r\n        return Enums.ContainerFitStatus.FullyOutOfContainer;\r\n    }\r\n}\r\n","export class Strings {\r\n    static readonly errors = {\r\n        unknownElementType: (typeName: string) => `Unknown element type \"${typeName}\". Fallback will be used if present.`,\r\n        unknownActionType: (typeName: string) => `Unknown action type \"${typeName}\". Fallback will be used if present.`,\r\n        elementTypeNotAllowed: (typeName: string) => `Element type \"${typeName}\" is not allowed in this context.`,\r\n        actionTypeNotAllowed: (typeName: string) => `Action type \"${typeName}\" is not allowed in this context.`,\r\n        invalidPropertyValue: (value: any, propertyName: string) => `Invalid value \"${value}\" for property \"${propertyName}\".`,\r\n        showCardMustHaveCard: () => `\"An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object.`,\r\n        invalidColumnWidth: (invalidWidth: string) => `Invalid column width \"${invalidWidth}\" - defaulting to \"auto\".`,\r\n        invalidCardVersion: (defaultingToVersion: string) => `Invalid card version. Defaulting to \"${defaultingToVersion}\".`,\r\n        invalidVersionString: (versionString: string) => `Invalid version string \"${versionString}\".`,\r\n        propertyValueNotSupported: (value: any, propertyName: string, supportedInVersion: string, versionUsed: string) => `Value \"${value}\" for property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\r\n        propertyNotSupported: (propertyName: string, supportedInVersion: string, versionUsed: string) => `Property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\r\n        indexOutOfRange: (index: number) => `Index out of range (${index}).`,\r\n        elementCannotBeUsedAsInline: () => \"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\",\r\n        inlineAlreadyParented: () => \"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\",\r\n        interactivityNotAllowed: () => \"Interactivity is not allowed.\",\r\n        inputsMustHaveUniqueId: () => \"All inputs must have a unique Id.\",\r\n        choiceSetMustHaveAtLeastOneChoice: () => \"An Input.ChoiceSet must have at least one choice defined.\",\r\n        choiceSetChoicesMustHaveTitleAndValue: () => \"All choices in an Input.ChoiceSet must have their title and value properties set.\",\r\n        propertyMustBeSet: (propertyName: string) => `Property \"${propertyName}\" must be set.`,\r\n        actionHttpHeadersMustHaveNameAndValue: () => \"All headers of an Action.Http must have their name and value properties set.\",\r\n        tooManyActions: (maximumActions: number) => `Maximum number of actions exceeded (${maximumActions}).`,\r\n        columnAlreadyBelongsToAnotherSet: () => \"This column already belongs to another ColumnSet.\",\r\n        invalidCardType: () => `Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\".`,\r\n        unsupportedCardVersion: (version: string, maxSupportedVersion: string) => `The specified card version (${version}) is not supported. The maximum supported card version is ${maxSupportedVersion}.`,\r\n        duplicateId: (id: string) => `Duplicate Id \"${id}\".`,\r\n        markdownProcessingNotEnabled: () => \"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\",\r\n        processMarkdownEventRemoved: () => \"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\",\r\n        elementAlreadyParented: () => \"The element already belongs to another container.\",\r\n        actionAlreadyParented: () => \"The action already belongs to another element.\",\r\n        elementTypeNotStandalone: (typeName: string) => `Elements of type ${typeName} cannot be used as standalone elements.`\r\n    };\r\n    static readonly hints = {\r\n        dontUseWeightedAndStrecthedColumnsInSameSet: () => \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\"\r\n    };\r\n    static readonly defaults = {\r\n        inlineActionTitle: () => \"Inline Action\"\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { SerializableObject, Version, Versions } from \"./serialization\";\r\n\r\nexport interface ITypeRegistration<T extends SerializableObject> {\r\n    typeName: string,\r\n    objectType: { new(): T },\r\n    schemaVersion: Version\r\n}\r\n\r\nexport class CardObjectRegistry<T extends SerializableObject> {\r\n    private _items: { [typeName: string]: ITypeRegistration<T> } = {};\r\n\r\n    findByName(typeName: string): ITypeRegistration<T> | undefined {\r\n        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\r\n    }\r\n\r\n    clear() {\r\n        this._items = {};\r\n    }\r\n\r\n    register(typeName: string, objectType: { new(): T }, schemaVersion: Version = Versions.v1_0) {\r\n        let registrationInfo = this.findByName(typeName);\r\n\r\n        if (registrationInfo !== undefined) {\r\n            registrationInfo.objectType = objectType;\r\n        }\r\n        else {\r\n            registrationInfo = {\r\n                typeName: typeName,\r\n                objectType: objectType,\r\n                schemaVersion: schemaVersion\r\n            }\r\n        }\r\n\r\n        this._items[typeName] = registrationInfo;\r\n    }\r\n\r\n    unregister(typeName: string) {\r\n        delete this._items[typeName];\r\n    }\r\n\r\n    createInstance(typeName: string, targetVersion: Version): T | undefined {\r\n        let registrationInfo = this.findByName(typeName);\r\n\r\n        return (registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0) ? new registrationInfo.objectType() : undefined;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return Object.keys(this._items).length;\r\n    }\r\n\r\n    getItemAt(index: number): ITypeRegistration<T> {\r\n        return Object.values(this._items)[index];\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Utils from \"./utils\";\r\nimport { Strings} from \"./strings\";\r\nimport { Dictionary, GlobalSettings } from \"./shared\";\r\nimport { HostConfig } from \"./host-config\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\nimport { Versions, property, SerializableObject, StringProperty, SerializableObjectProperty, IValidationEvent, PropertyDefinition } from \"./serialization\";\r\n\r\nexport class ValidationResults {\r\n    readonly allIds: Dictionary<number> = {};\r\n    readonly validationEvents: IValidationEvent[] = [];\r\n\r\n    addFailure(cardObject: CardObject, event: Enums.ValidationEvent, message: string) {\r\n        this.validationEvents.push(\r\n            {\r\n                phase: Enums.ValidationPhase.Validation,\r\n                source: cardObject,\r\n                event: event,\r\n                message: message\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport type CardObjectType = { new(): CardObject };\r\n\r\nexport abstract class CardObject extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly typeNameProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"type\",\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        (sender: object) => {\r\n            return (<CardObject>sender).getJsonTypeName()\r\n        });\r\n    static readonly idProperty = new StringProperty(Versions.v1_0, \"id\");\r\n    static readonly requiresProperty = new SerializableObjectProperty(\r\n        Versions.v1_2,\r\n        \"requires\",\r\n        HostCapabilities,\r\n        new HostCapabilities());\r\n\r\n    protected getSchemaKey(): string {\r\n        return this.getJsonTypeName();\r\n    }\r\n\r\n    @property(CardObject.idProperty)\r\n    id?: string;\r\n\r\n    @property(CardObject.requiresProperty)\r\n    get requires(): HostCapabilities {\r\n        return this.getValue(CardObject.requiresProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _shouldFallback: boolean = false;\r\n\r\n    protected _parent?: CardObject;\r\n    protected _renderedElement?: HTMLElement;\r\n\r\n    onPreProcessPropertyValue?: (sender: CardObject, property: PropertyDefinition, value: any) => any;\r\n\r\n    abstract getJsonTypeName(): string;\r\n\r\n    abstract get hostConfig(): HostConfig;\r\n\r\n    preProcessPropertyValue(property: PropertyDefinition, propertyValue?: any): any {\r\n        let value = propertyValue === undefined ? this.getValue(property) : propertyValue;\r\n\r\n        if (GlobalSettings.allowPreProcessingPropertyValues) {\r\n            let currentObject: CardObject | undefined = this;\r\n\r\n            while (currentObject && !currentObject.onPreProcessPropertyValue) {\r\n                currentObject = currentObject.parent;\r\n            }\r\n\r\n            if (currentObject && currentObject.onPreProcessPropertyValue) {\r\n                return currentObject.onPreProcessPropertyValue(this, property, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    setParent(value: CardObject | undefined) {\r\n        this._parent = value;\r\n    }\r\n\r\n    setShouldFallback(value: boolean) {\r\n        this._shouldFallback = value;\r\n    }\r\n\r\n    shouldFallback(): boolean {\r\n        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);\r\n    }\r\n\r\n    getRootObject(): CardObject {\r\n        let rootObject: CardObject = this;\r\n\r\n        while (rootObject.parent) {\r\n            rootObject = rootObject.parent;\r\n        }\r\n\r\n        return rootObject;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        if (this.id) {\r\n            if (context.allIds.hasOwnProperty(this.id)) {\r\n                if (context.allIds[this.id] == 1) {\r\n                    context.addFailure(\r\n                        this,\r\n                        Enums.ValidationEvent.DuplicateId,\r\n                        Strings.errors.duplicateId(this.id));\r\n                }\r\n\r\n                context.allIds[this.id] += 1;\r\n            }\r\n            else {\r\n                context.allIds[this.id] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    validateProperties(): ValidationResults {\r\n        let result = new ValidationResults();\r\n\r\n        this.internalValidateProperties(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    get parent(): CardObject | undefined {\r\n        return this._parent;\r\n    }\r\n\r\n    get renderedElement(): HTMLElement | undefined {\r\n        return this._renderedElement;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { TargetVersion, Version, SerializableObject, BaseSerializationContext, PropertyBag } from \"./serialization\";\r\n\r\nexport class HostCapabilities extends SerializableObject {\r\n    private _capabilities: { [key: string]: TargetVersion } = {};\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"HostCapabilities\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: BaseSerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        if (source) {\r\n            for (let name in source) {\r\n                let jsonVersion = source[name];\r\n\r\n                if (typeof jsonVersion === \"string\") {\r\n                    if (jsonVersion == \"*\") {\r\n                        this.addCapability(name, \"*\");\r\n                    }\r\n                    else {\r\n                        let version = Version.parse(jsonVersion, context);\r\n\r\n                        if (version && version.isValid) {\r\n                            this.addCapability(name, version);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        for (let key in this._capabilities) {\r\n            target[key] = this._capabilities[key];\r\n        }\r\n    }\r\n\r\n    addCapability(name: string, version: TargetVersion) {\r\n        this._capabilities[name] = version;\r\n    }\r\n\r\n    removeCapability(name: string) {\r\n        delete this._capabilities[name];\r\n    }\r\n\r\n    clear() {\r\n        this._capabilities = {};\r\n    }\r\n\r\n    hasCapability(name: string, version: TargetVersion): boolean {\r\n        if (this._capabilities.hasOwnProperty(name)) {\r\n            if (version == \"*\" || this._capabilities[name] == \"*\") {\r\n                return true;\r\n            }\r\n\r\n            return version.compareTo(<Version>this._capabilities[name]) <= 0;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    areAllMet(hostCapabilities: HostCapabilities): boolean {\r\n        for (let capabilityName in this._capabilities) {\r\n            if (!hostCapabilities.hasCapability(capabilityName, this._capabilities[capabilityName])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Utils from \"./utils\";\r\nimport * as Shared from \"./shared\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\n\r\nfunction parseHostConfigEnum(targetEnum: { [s: number]: string }, value: string | number, defaultValue: number): number {\r\n    if (typeof value === \"string\") {\r\n        let parsedValue = Utils.parseEnum(targetEnum, value, defaultValue);\r\n\r\n        return parsedValue !== undefined ? parsedValue : defaultValue;\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        return value;\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n\r\nexport class ColorDefinition {\r\n    default: string = \"#000000\";\r\n    subtle: string = \"#666666\";\r\n\r\n    constructor(defaultColor?: string, subtleColor?: string) {\r\n        if (defaultColor) {\r\n            this.default = defaultColor;\r\n        }\r\n\r\n        if (subtleColor) {\r\n            this.subtle = subtleColor;\r\n        }\r\n    }\r\n\r\n    parse(obj?: any) {\r\n        if (obj) {\r\n            this.default = obj[\"default\"] || this.default;\r\n            this.subtle = obj[\"subtle\"] || this.subtle;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextColorDefinition extends ColorDefinition {\r\n    readonly highlightColors = new ColorDefinition(\"#22000000\", \"#11000000\");\r\n\r\n    parse(obj?: any) {\r\n        super.parse(obj);\r\n\r\n        if (obj) {\r\n            this.highlightColors.parse(obj[\"highlightColors\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class AdaptiveCardConfig {\r\n    allowCustomStyle: boolean = false;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.allowCustomStyle = obj[\"allowCustomStyle\"] || this.allowCustomStyle;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ImageSetConfig {\r\n    imageSize: Enums.Size = Enums.Size.Medium;\r\n    maxImageHeight: number = 100;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.imageSize = obj[\"imageSize\"] != null ? obj[\"imageSize\"] : this.imageSize;\r\n            this.maxImageHeight = <number>Utils.parseNumber(obj[\"maxImageHeight\"], 100);\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            imageSize: Enums.Size[this.imageSize],\r\n            maxImageHeight: this.maxImageHeight\r\n        }\r\n    }\r\n}\r\n\r\nexport class MediaConfig {\r\n    defaultPoster?: string;\r\n    allowInlinePlayback: boolean = true;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.defaultPoster = obj[\"defaultPoster\"];\r\n            this.allowInlinePlayback = obj[\"allowInlinePlayback\"] || this.allowInlinePlayback;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            defaultPoster: this.defaultPoster,\r\n            allowInlinePlayback: this.allowInlinePlayback\r\n        }\r\n    }\r\n}\r\n\r\nexport class BaseTextDefinition {\r\n    size: Enums.TextSize = Enums.TextSize.Default;\r\n    color: Enums.TextColor = Enums.TextColor.Default;;\r\n    isSubtle: boolean = false;\r\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.size = parseHostConfigEnum(Enums.TextSize, obj[\"size\"], this.size);\r\n            this.color = parseHostConfigEnum(Enums.TextColor, obj[\"color\"], this.color);\r\n            this.isSubtle = obj[\"isSubtle\"] || this.isSubtle;\r\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], this.getDefaultWeight());\r\n        }\r\n    }\r\n\r\n    getDefaultWeight() {\r\n        return Enums.TextWeight.Default;\r\n    }\r\n\r\n    toJSON(): any {\r\n        return {\r\n            size: Enums.TextSize[this.size],\r\n            color: Enums.TextColor[this.color],\r\n            isSubtle: this.isSubtle,\r\n            weight: Enums.TextWeight[this.weight]\r\n        }\r\n    }\r\n}\r\n\r\nexport class RequiredInputLabelTextDefinition extends BaseTextDefinition {\r\n    suffix?: string = \" *\";\r\n    suffixColor: Enums.TextColor = Enums.TextColor.Attention;\r\n\r\n    constructor(obj?: any) {\r\n        super(obj);\r\n\r\n        if (obj) {\r\n            this.suffix = obj[\"suffix\"] || this.suffix;\r\n            this.suffixColor = parseHostConfigEnum(Enums.TextColor, obj[\"suffixColor\"], this.suffixColor);\r\n        }\r\n    }\r\n\r\n    toJSON(): any {\r\n        let result = super.toJSON();\r\n        result[\"suffix\"] = this.suffix;\r\n        result[\"suffixColor\"] = Enums.TextColor[this.suffixColor];\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class InputLabelConfig {\r\n    inputSpacing: Enums.Spacing = Enums.Spacing.Small;\r\n    readonly requiredInputs: RequiredInputLabelTextDefinition = new RequiredInputLabelTextDefinition();\r\n    readonly optionalInputs: BaseTextDefinition = new BaseTextDefinition();\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.inputSpacing = parseHostConfigEnum(Enums.Spacing, obj[\"inputSpacing\"], this.inputSpacing);\r\n            this.requiredInputs = new RequiredInputLabelTextDefinition(obj[\"requiredInputs\"]);\r\n            this.optionalInputs = new BaseTextDefinition(obj[\"optionalInputs\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class InputConfig {\r\n    readonly label: InputLabelConfig = new InputLabelConfig();\r\n    readonly errorMessage: BaseTextDefinition = new BaseTextDefinition({ color: Enums.TextColor.Attention });\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.label = new InputLabelConfig(obj[\"label\"]);\r\n            this.errorMessage = new BaseTextDefinition(obj[\"errorMessage\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class FactTextDefinition extends BaseTextDefinition {\r\n    wrap: boolean = true;\r\n\r\n    constructor(obj?: any) {\r\n        super(obj);\r\n\r\n        if (obj) {\r\n            this.wrap = obj[\"wrap\"] != null ? obj[\"wrap\"] : this.wrap;\r\n        }\r\n    }\r\n\r\n    toJSON(): any {\r\n        let result = super.toJSON();\r\n        result[\"wrap\"] = this.wrap;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class FactTitleDefinition extends FactTextDefinition {\r\n    maxWidth?: number = 150;\r\n    weight: Enums.TextWeight = Enums.TextWeight.Bolder;\r\n\r\n    constructor(obj?: any) {\r\n        super(obj);\r\n\r\n        if (obj) {\r\n            this.maxWidth = obj[\"maxWidth\"] != null ? obj[\"maxWidth\"] : this.maxWidth;\r\n            this.weight = parseHostConfigEnum(Enums.TextWeight, obj[\"weight\"], Enums.TextWeight.Bolder);\r\n        }\r\n    }\r\n\r\n    getDefaultWeight() {\r\n        return Enums.TextWeight.Bolder;\r\n    }\r\n}\r\n\r\nexport class FactSetConfig {\r\n    readonly title: FactTitleDefinition = new FactTitleDefinition();\r\n    readonly value: FactTextDefinition = new FactTextDefinition();\r\n    spacing: number = 10;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.title = new FactTitleDefinition(obj[\"title\"]);\r\n            this.value = new FactTextDefinition(obj[\"value\"]);\r\n            this.spacing = obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ShowCardActionConfig {\r\n    actionMode: Enums.ShowCardActionMode = Enums.ShowCardActionMode.Inline;\r\n    inlineTopMargin: number = 16;\r\n    style?: string = Enums.ContainerStyle.Emphasis;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.actionMode = parseHostConfigEnum(Enums.ShowCardActionMode, obj[\"actionMode\"], Enums.ShowCardActionMode.Inline);\r\n            this.inlineTopMargin = obj[\"inlineTopMargin\"] != null ? obj[\"inlineTopMargin\"] : this.inlineTopMargin;\r\n            this.style = obj[\"style\"] && typeof obj[\"style\"] === \"string\" ? obj[\"style\"] : Enums.ContainerStyle.Emphasis;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            actionMode: Enums.ShowCardActionMode[this.actionMode],\r\n            inlineTopMargin: this.inlineTopMargin,\r\n            style: this.style\r\n        }\r\n    }\r\n}\r\n\r\nexport class ActionsConfig {\r\n    maxActions: number = 5;\r\n    spacing: Enums.Spacing = Enums.Spacing.Default;\r\n    buttonSpacing: number = 20;\r\n    readonly showCard: ShowCardActionConfig = new ShowCardActionConfig();\r\n    preExpandSingleShowCardAction?: boolean = false;\r\n    actionsOrientation: Enums.Orientation = Enums.Orientation.Horizontal;\r\n    actionAlignment: Enums.ActionAlignment = Enums.ActionAlignment.Left;\r\n    iconPlacement: Enums.ActionIconPlacement = Enums.ActionIconPlacement.LeftOfTitle;\r\n    allowTitleToWrap: boolean = false;\r\n    iconSize: number = 16;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.maxActions = obj[\"maxActions\"] != null ? obj[\"maxActions\"] : this.maxActions;\r\n            this.spacing = parseHostConfigEnum(Enums.Spacing, obj.spacing && obj.spacing, Enums.Spacing.Default);\r\n            this.buttonSpacing = obj[\"buttonSpacing\"] != null ? obj[\"buttonSpacing\"] : this.buttonSpacing;\r\n            this.showCard = new ShowCardActionConfig(obj[\"showCard\"]);\r\n            this.preExpandSingleShowCardAction = Utils.parseBool(obj[\"preExpandSingleShowCardAction\"], false);\r\n            this.actionsOrientation = parseHostConfigEnum(Enums.Orientation, obj[\"actionsOrientation\"], Enums.Orientation.Horizontal);\r\n            this.actionAlignment = parseHostConfigEnum(Enums.ActionAlignment, obj[\"actionAlignment\"], Enums.ActionAlignment.Left);\r\n            this.iconPlacement = parseHostConfigEnum(Enums.ActionIconPlacement, obj[\"iconPlacement\"], Enums.ActionIconPlacement.LeftOfTitle);\r\n            this.allowTitleToWrap = obj[\"allowTitleToWrap\"] != null ? obj[\"allowTitleToWrap\"] : this.allowTitleToWrap;\r\n\r\n            try {\r\n                let sizeAndUnit = Shared.SizeAndUnit.parse(obj[\"iconSize\"]);\r\n\r\n                if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {\r\n                    this.iconSize = sizeAndUnit.physicalSize;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Swallow this, keep default icon size\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            maxActions: this.maxActions,\r\n            spacing: Enums.Spacing[this.spacing],\r\n            buttonSpacing: this.buttonSpacing,\r\n            showCard: this.showCard,\r\n            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,\r\n            actionsOrientation: Enums.Orientation[this.actionsOrientation],\r\n            actionAlignment: Enums.ActionAlignment[this.actionAlignment]\r\n        }\r\n    }\r\n}\r\n\r\nexport class ColorSetDefinition {\r\n    private parseSingleColor(obj: any, propertyName: string) {\r\n        if (obj) {\r\n            ((<any>this)[propertyName] as TextColorDefinition).parse(obj[propertyName]);\r\n        }\r\n    }\r\n\r\n    default: TextColorDefinition = new TextColorDefinition();\r\n    dark: TextColorDefinition = new TextColorDefinition();\r\n    light: TextColorDefinition = new TextColorDefinition();\r\n    accent: TextColorDefinition = new TextColorDefinition();\r\n    good: TextColorDefinition = new TextColorDefinition();\r\n    warning: TextColorDefinition = new TextColorDefinition();\r\n    attention: TextColorDefinition = new TextColorDefinition();\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.parseSingleColor(obj, \"default\");\r\n            this.parseSingleColor(obj, \"dark\");\r\n            this.parseSingleColor(obj, \"light\");\r\n            this.parseSingleColor(obj, \"accent\");\r\n            this.parseSingleColor(obj, \"good\");\r\n            this.parseSingleColor(obj, \"warning\");\r\n            this.parseSingleColor(obj, \"attention\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class ContainerStyleDefinition {\r\n    backgroundColor?: string;\r\n\r\n    readonly foregroundColors: ColorSetDefinition = new ColorSetDefinition(\r\n        {\r\n            \"default\": { default: \"#333333\", subtle: \"#EE333333\" },\r\n            \"dark\": { default: \"#000000\", subtle: \"#66000000\" },\r\n            \"light\": { default: \"#FFFFFF\", subtle: \"#33000000\" },\r\n            \"accent\": { default: \"#2E89FC\", subtle: \"#882E89FC\" },\r\n            \"good\": { default: \"#028A02\", subtle: \"#DD027502\" },\r\n            \"warning\": { default: \"#E69500\", subtle: \"#DDE69500\" },\r\n            \"attention\": { default: \"#CC3300\", subtle: \"#DDCC3300\" }\r\n        }\r\n    );\r\n\r\n    highlightBackgroundColor?: string;\r\n    highlightForegroundColor?: string;\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.backgroundColor = obj[\"backgroundColor\"];\r\n\r\n            this.foregroundColors.parse(obj[\"foregroundColors\"]);\r\n\r\n            this.highlightBackgroundColor = obj[\"highlightBackgroundColor\"];\r\n            this.highlightForegroundColor = obj[\"highlightForegroundColor\"];\r\n        }\r\n    }\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    get isBuiltIn(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass BuiltInContainerStyleDefinition extends ContainerStyleDefinition {\r\n    get isBuiltIn(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport interface ILineHeightDefinitions {\r\n    small: number;\r\n    medium: number;\r\n    default: number;\r\n    large: number;\r\n    extraLarge: number;\r\n}\r\n\r\nexport class ContainerStyleSet {\r\n    private _allStyles: { [key: string]: ContainerStyleDefinition } = {};\r\n\r\n    constructor(obj?: any) {\r\n        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();\r\n\r\n        if (obj) {\r\n            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);\r\n            this._allStyles[Enums.ContainerStyle.Emphasis].parse(obj[Enums.ContainerStyle.Emphasis]);\r\n            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);\r\n            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);\r\n            this._allStyles[Enums.ContainerStyle.Attention].parse(obj[Enums.ContainerStyle.Attention]);\r\n            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);\r\n\r\n            const customStyleArray = obj[\"customStyles\"];\r\n\r\n            if (customStyleArray && Array.isArray(customStyleArray)) {\r\n                for (let customStyle of customStyleArray) {\r\n                    if (customStyle) {\r\n                        let styleName = customStyle[\"name\"];\r\n\r\n                        if (styleName && typeof styleName === \"string\") {\r\n                            if (this._allStyles.hasOwnProperty(styleName)) {\r\n                                this._allStyles[styleName].parse(customStyle[\"style\"]);\r\n                            }\r\n                            else {\r\n                                this._allStyles[styleName] = new ContainerStyleDefinition(customStyle[\"style\"]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        let customStyleArray: any[] = [];\r\n\r\n        Object.keys(this._allStyles).forEach(\r\n            (key) => {\r\n                if (!this._allStyles[key].isBuiltIn) {\r\n                    customStyleArray.push({\r\n                        name: key,\r\n                        style: this._allStyles[key]\r\n                    });\r\n                }\r\n            });\r\n\r\n        let result: any = {\r\n            default: this.default,\r\n            emphasis: this.emphasis\r\n        }\r\n\r\n        if (customStyleArray.length > 0) {\r\n            result.customStyles = customStyleArray;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getStyleByName(name: string | undefined, defaultValue?: ContainerStyleDefinition): ContainerStyleDefinition {\r\n        if (name && this._allStyles.hasOwnProperty(name)) {\r\n            return this._allStyles[name];\r\n        }\r\n        else {\r\n            return defaultValue ? defaultValue : this._allStyles[Enums.ContainerStyle.Default];\r\n        }\r\n    }\r\n\r\n    get default(): ContainerStyleDefinition {\r\n        return this._allStyles[Enums.ContainerStyle.Default];\r\n    }\r\n\r\n    get emphasis(): ContainerStyleDefinition {\r\n        return this._allStyles[Enums.ContainerStyle.Emphasis];\r\n    }\r\n}\r\n\r\nexport interface IFontSizeDefinitions {\r\n    small: number;\r\n    default: number;\r\n    medium: number;\r\n    large: number;\r\n    extraLarge: number;\r\n}\r\n\r\nexport interface IFontWeightDefinitions {\r\n    lighter: number;\r\n    default: number;\r\n    bolder: number;\r\n}\r\n\r\nexport class FontTypeDefinition {\r\n    static readonly monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\r\n\r\n    fontFamily?: string = \"Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif\";\r\n\r\n    fontSizes: IFontSizeDefinitions = {\r\n        small: 12,\r\n        default: 14,\r\n        medium: 17,\r\n        large: 21,\r\n        extraLarge: 26\r\n    };\r\n\r\n    fontWeights: IFontWeightDefinitions = {\r\n        lighter: 200,\r\n        default: 400,\r\n        bolder: 600\r\n    };\r\n\r\n    constructor(fontFamily?: string) {\r\n        if (fontFamily) {\r\n            this.fontFamily = fontFamily;\r\n        }\r\n    }\r\n\r\n    parse(obj?: any) {\r\n        this.fontFamily = obj[\"fontFamily\"] || this.fontFamily;\r\n        this.fontSizes = {\r\n            small: obj.fontSizes && obj.fontSizes[\"small\"] || this.fontSizes.small,\r\n            default: obj.fontSizes && obj.fontSizes[\"default\"] || this.fontSizes.default,\r\n            medium: obj.fontSizes && obj.fontSizes[\"medium\"] || this.fontSizes.medium,\r\n            large: obj.fontSizes && obj.fontSizes[\"large\"] || this.fontSizes.large,\r\n            extraLarge: obj.fontSizes && obj.fontSizes[\"extraLarge\"] || this.fontSizes.extraLarge\r\n        };\r\n        this.fontWeights = {\r\n            lighter: obj.fontWeights && obj.fontWeights[\"lighter\"] || this.fontWeights.lighter,\r\n            default: obj.fontWeights && obj.fontWeights[\"default\"] || this.fontWeights.default,\r\n            bolder: obj.fontWeights && obj.fontWeights[\"bolder\"] || this.fontWeights.bolder\r\n        };\r\n    }\r\n}\r\n\r\nexport class FontTypeSet {\r\n    default: FontTypeDefinition;\r\n    monospace: FontTypeDefinition;\r\n\r\n    constructor(obj?: any) {\r\n        this.default = new FontTypeDefinition();\r\n        this.monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\r\n\r\n        if (obj) {\r\n            this.default.parse(obj[\"default\"]);\r\n            this.monospace.parse(obj[\"monospace\"]);\r\n        }\r\n    }\r\n\r\n    getStyleDefinition(style: Enums.FontType | undefined): FontTypeDefinition {\r\n        switch (style) {\r\n            case Enums.FontType.Monospace:\r\n                return this.monospace;\r\n            case Enums.FontType.Default:\r\n            default:\r\n                return this.default;\r\n        }\r\n    }\r\n}\r\n\r\nexport class HostConfig {\r\n    readonly hostCapabilities = new HostCapabilities();\r\n\r\n    private _legacyFontType: FontTypeDefinition;\r\n\r\n    choiceSetInputValueSeparator: string = \",\";\r\n    supportsInteractivity: boolean = true;\r\n    lineHeights?: ILineHeightDefinitions;\r\n    fontTypes?: FontTypeSet;\r\n\r\n    readonly spacing = {\r\n        small: 3,\r\n        default: 8,\r\n        medium: 20,\r\n        large: 30,\r\n        extraLarge: 40,\r\n        padding: 15\r\n    };\r\n\r\n    readonly separator = {\r\n        lineThickness: 1,\r\n        lineColor: \"#EEEEEE\"\r\n    };\r\n\r\n    readonly imageSizes = {\r\n        small: 40,\r\n        medium: 80,\r\n        large: 160\r\n    };\r\n\r\n    readonly containerStyles: ContainerStyleSet = new ContainerStyleSet();\r\n    readonly inputs: InputConfig = new InputConfig();\r\n    readonly actions: ActionsConfig = new ActionsConfig();\r\n    readonly adaptiveCard: AdaptiveCardConfig = new AdaptiveCardConfig();\r\n    readonly imageSet: ImageSetConfig = new ImageSetConfig();\r\n    readonly media: MediaConfig = new MediaConfig();\r\n    readonly factSet: FactSetConfig = new FactSetConfig();\r\n\r\n    cssClassNamePrefix?: string;\r\n    alwaysAllowBleed: boolean = false;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            if (typeof obj === \"string\" || obj instanceof String) {\r\n                obj = JSON.parse(obj as string);\r\n            }\r\n\r\n            this.choiceSetInputValueSeparator = (obj && typeof obj[\"choiceSetInputValueSeparator\"] === \"string\") ? obj[\"choiceSetInputValueSeparator\"] : this.choiceSetInputValueSeparator;\r\n            this.supportsInteractivity = (obj && typeof obj[\"supportsInteractivity\"] === \"boolean\") ? obj[\"supportsInteractivity\"] : this.supportsInteractivity;\r\n\r\n            this._legacyFontType = new FontTypeDefinition();\r\n            this._legacyFontType.parse(obj);\r\n\r\n            if (obj.fontTypes) {\r\n                this.fontTypes = new FontTypeSet(obj.fontTypes);\r\n            }\r\n\r\n            if (obj.lineHeights) {\r\n                this.lineHeights = {\r\n                    small: obj.lineHeights[\"small\"],\r\n                    default: obj.lineHeights[\"default\"],\r\n                    medium: obj.lineHeights[\"medium\"],\r\n                    large: obj.lineHeights[\"large\"],\r\n                    extraLarge: obj.lineHeights[\"extraLarge\"]\r\n                };\r\n            };\r\n\r\n            this.imageSizes = {\r\n                small: obj.imageSizes && obj.imageSizes[\"small\"] || this.imageSizes.small,\r\n                medium: obj.imageSizes && obj.imageSizes[\"medium\"] || this.imageSizes.medium,\r\n                large: obj.imageSizes && obj.imageSizes[\"large\"] || this.imageSizes.large,\r\n            };\r\n\r\n            this.containerStyles = new ContainerStyleSet(obj[\"containerStyles\"]);\r\n            this.spacing = {\r\n                small: obj.spacing && obj.spacing[\"small\"] || this.spacing.small,\r\n                default: obj.spacing && obj.spacing[\"default\"] || this.spacing.default,\r\n                medium: obj.spacing && obj.spacing[\"medium\"] || this.spacing.medium,\r\n                large: obj.spacing && obj.spacing[\"large\"] || this.spacing.large,\r\n                extraLarge: obj.spacing && obj.spacing[\"extraLarge\"] || this.spacing.extraLarge,\r\n                padding: obj.spacing && obj.spacing[\"padding\"] || this.spacing.padding\r\n            };\r\n\r\n            this.separator = {\r\n                lineThickness: obj.separator && obj.separator[\"lineThickness\"] || this.separator.lineThickness,\r\n                lineColor: obj.separator && obj.separator[\"lineColor\"] || this.separator.lineColor\r\n            }\r\n\r\n            this.inputs = new InputConfig(obj.inputs || this.inputs);\r\n            this.actions = new ActionsConfig(obj.actions || this.actions);\r\n            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);\r\n            this.imageSet = new ImageSetConfig(obj[\"imageSet\"]);\r\n            this.factSet = new FactSetConfig(obj[\"factSet\"])\r\n        }\r\n    }\r\n\r\n    getFontTypeDefinition(style?: Enums.FontType): FontTypeDefinition {\r\n        if (this.fontTypes) {\r\n            return this.fontTypes.getStyleDefinition(style);\r\n        }\r\n        else {\r\n            return style == Enums.FontType.Monospace ? FontTypeDefinition.monospace : this._legacyFontType;\r\n        }\r\n    }\r\n\r\n    getEffectiveSpacing(spacing: Enums.Spacing): number {\r\n        switch (spacing) {\r\n            case Enums.Spacing.Small:\r\n                return this.spacing.small;\r\n            case Enums.Spacing.Default:\r\n                return this.spacing.default;\r\n            case Enums.Spacing.Medium:\r\n                return this.spacing.medium;\r\n            case Enums.Spacing.Large:\r\n                return this.spacing.large;\r\n            case Enums.Spacing.ExtraLarge:\r\n                return this.spacing.extraLarge;\r\n            case Enums.Spacing.Padding:\r\n                return this.spacing.padding;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    paddingDefinitionToSpacingDefinition(paddingDefinition: Shared.PaddingDefinition): Shared.SpacingDefinition {\r\n        return new Shared.SpacingDefinition(\r\n            this.getEffectiveSpacing(paddingDefinition.top),\r\n            this.getEffectiveSpacing(paddingDefinition.right),\r\n            this.getEffectiveSpacing(paddingDefinition.bottom),\r\n            this.getEffectiveSpacing(paddingDefinition.left));\r\n    }\r\n\r\n    makeCssClassNames(...classNames: string[]): string[] {\r\n        let result: string[] = [];\r\n\r\n        for (let className of classNames) {\r\n            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + \"-\" : \"\") + className);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    makeCssClassName(...classNames: string[]): string {\r\n        let result = this.makeCssClassNames(...classNames).join(\" \");\r\n\r\n        return result ? result : \"\";\r\n    }\r\n\r\n    get fontFamily(): string | undefined {\r\n        return this._legacyFontType.fontFamily;\r\n    }\r\n\r\n    set fontFamily(value: string | undefined) {\r\n        this._legacyFontType.fontFamily = value;\r\n    }\r\n\r\n    get fontSizes(): IFontSizeDefinitions {\r\n        return this._legacyFontType.fontSizes;\r\n    }\r\n\r\n    get fontWeights(): IFontWeightDefinitions {\r\n        return this._legacyFontType.fontWeights;\r\n    }\r\n}\r\n\r\nexport const defaultHostConfig: HostConfig = new HostConfig(\r\n    {\r\n        supportsInteractivity: true,\r\n        spacing: {\r\n            small: 10,\r\n            default: 20,\r\n            medium: 30,\r\n            large: 40,\r\n            extraLarge: 50,\r\n            padding: 20\r\n        },\r\n        separator: {\r\n            lineThickness: 1,\r\n            lineColor: \"#EEEEEE\"\r\n        },\r\n        fontTypes: {\r\n            default: {\r\n                fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n                fontSizes: {\r\n                    small: 12,\r\n                    default: 14,\r\n                    medium: 17,\r\n                    large: 21,\r\n                    extraLarge: 26\r\n                },\r\n                fontWeights: {\r\n                    lighter: 200,\r\n                    default: 400,\r\n                    bolder: 600\r\n                }\r\n            },\r\n            monospace: {\r\n                fontFamily: \"'Courier New', Courier, monospace\",\r\n                fontSizes: {\r\n                    small: 12,\r\n                    default: 14,\r\n                    medium: 17,\r\n                    large: 21,\r\n                    extraLarge: 26\r\n                },\r\n                fontWeights: {\r\n                    lighter: 200,\r\n                    default: 400,\r\n                    bolder: 600\r\n                }\r\n            }\r\n        },\r\n        imageSizes: {\r\n            small: 40,\r\n            medium: 80,\r\n            large: 160\r\n        },\r\n        containerStyles: {\r\n            default: {\r\n                backgroundColor: \"#FFFFFF\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            emphasis: {\r\n                backgroundColor: \"#08000000\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            accent: {\r\n                backgroundColor: \"#C7DEF9\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            good: {\r\n                backgroundColor: \"#CCFFCC\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            attention: {\r\n                backgroundColor: \"#FFC5B2\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            },\r\n            warning: {\r\n                backgroundColor: \"#FFE2B2\",\r\n                foregroundColors: {\r\n                    default: {\r\n                        default: \"#333333\",\r\n                        subtle: \"#EE333333\"\r\n                    },\r\n                    dark: {\r\n                        default: \"#000000\",\r\n                        subtle: \"#66000000\"\r\n                    },\r\n                    light: {\r\n                        default: \"#FFFFFF\",\r\n                        subtle: \"#33000000\"\r\n                    },\r\n                    accent: {\r\n                        default: \"#2E89FC\",\r\n                        subtle: \"#882E89FC\"\r\n                    },\r\n                    attention: {\r\n                        default: \"#cc3300\",\r\n                        subtle: \"#DDcc3300\"\r\n                    },\r\n                    good: {\r\n                        default: \"#028A02\",\r\n                        subtle: \"#DD027502\"\r\n                    },\r\n                    warning: {\r\n                        default: \"#e69500\",\r\n                        subtle: \"#DDe69500\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        inputs: {\r\n            label: {\r\n                requiredInputs: {\r\n                    color: Enums.TextColor.Accent,\r\n                    size: Enums.TextSize.ExtraLarge,\r\n                    weight: Enums.TextWeight.Bolder,\r\n                    isSubtle: true,\r\n                    suffix: \" (required)\",\r\n                    suffixColor: Enums.TextColor.Good\r\n                },\r\n                optionalInputs: {\r\n                    color: Enums.TextColor.Warning,\r\n                    size: Enums.TextSize.Medium,\r\n                    weight: Enums.TextWeight.Lighter,\r\n                    isSubtle: false\r\n                }\r\n            },\r\n            errorMessage: {\r\n                color: Enums.TextColor.Accent,\r\n                size: Enums.TextSize.Small,\r\n                weight: Enums.TextWeight.Bolder\r\n            }\r\n        },\r\n        actions: {\r\n            maxActions: 5,\r\n            spacing: Enums.Spacing.Default,\r\n            buttonSpacing: 10,\r\n            showCard: {\r\n                actionMode: Enums.ShowCardActionMode.Inline,\r\n                inlineTopMargin: 16\r\n            },\r\n            actionsOrientation: Enums.Orientation.Horizontal,\r\n            actionAlignment: Enums.ActionAlignment.Left\r\n        },\r\n        adaptiveCard: {\r\n            allowCustomStyle: false\r\n        },\r\n        imageSet: {\r\n            imageSize: Enums.Size.Medium,\r\n            maxImageHeight: 100\r\n        },\r\n        factSet: {\r\n            title: {\r\n                color: Enums.TextColor.Default,\r\n                size: Enums.TextSize.Default,\r\n                isSubtle: false,\r\n                weight: Enums.TextWeight.Bolder,\r\n                wrap: true,\r\n                maxWidth: 150,\r\n            },\r\n            value: {\r\n                color: Enums.TextColor.Default,\r\n                size: Enums.TextSize.Default,\r\n                isSubtle: false,\r\n                weight: Enums.TextWeight.Default,\r\n                wrap: true,\r\n            },\r\n            spacing: 10\r\n        }\r\n    });\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport * from \"./serialization\";\r\nexport * from \"./registry\";\r\nexport * from \"./card-object\";\r\nexport * from \"./card-elements\";\r\nexport * from \"./enums\";\r\nexport * from \"./host-config\";\r\nexport * from \"./shared\";\r\nexport * from \"./utils\";\r\nexport * from \"./strings\";\r\nexport { IAdaptiveCard, ICardElement } from \"./schema\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport { PaddingDefinition, GlobalSettings, SizeAndUnit,SpacingDefinition,\r\n    Dictionary, StringWithSubstitutions, ContentTypes, IInput, IResourceInformation } from \"./shared\";\r\nimport * as Utils from \"./utils\";\r\nimport { HostConfig, defaultHostConfig, BaseTextDefinition, FontTypeDefinition, ColorSetDefinition, TextColorDefinition, ContainerStyleDefinition } from \"./host-config\";\r\nimport * as TextFormatters from \"./text-formatters\";\r\nimport { CardObject, ValidationResults } from \"./card-object\";\r\nimport { Versions, Version, property, BaseSerializationContext, SerializableObject, SerializableObjectSchema, StringProperty,\r\n    BoolProperty, ValueSetProperty, EnumProperty, SerializableObjectCollectionProperty, SerializableObjectProperty, PixelSizeProperty,\r\n    NumProperty, PropertyBag, CustomProperty, PropertyDefinition } from \"./serialization\";\r\nimport { CardObjectRegistry } from \"./registry\";\r\nimport { Strings } from \"./strings\";\r\n\r\nexport type CardElementHeight = \"auto\" | \"stretch\";\r\n\r\nexport abstract class CardElement extends CardObject {\r\n    //#region Schema\r\n\r\n    static readonly langProperty = new StringProperty(Versions.v1_1, \"lang\", true, /^[a-z]{2,3}$/ig);\r\n    static readonly isVisibleProperty = new BoolProperty(Versions.v1_2, \"isVisible\", true);\r\n    static readonly separatorProperty = new BoolProperty(Versions.v1_0, \"separator\", false);\r\n    static readonly heightProperty = new ValueSetProperty(\r\n        Versions.v1_1,\r\n        \"height\",\r\n        [\r\n            { value: \"auto\" },\r\n            { value: \"stretch\" }\r\n        ],\r\n        \"auto\");\r\n    static readonly horizontalAlignmentProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"horizontalAlignment\",\r\n        Enums.HorizontalAlignment,\r\n        Enums.HorizontalAlignment.Left);\r\n    static readonly spacingProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"spacing\",\r\n        Enums.Spacing,\r\n        Enums.Spacing.Default);\r\n\r\n    @property(CardElement.horizontalAlignmentProperty)\r\n    horizontalAlignment: Enums.HorizontalAlignment;\r\n\r\n    @property(CardElement.spacingProperty)\r\n    spacing: Enums.Spacing;\r\n\r\n    @property(CardElement.separatorProperty)\r\n    separator: boolean;\r\n\r\n    @property(CardElement.heightProperty)\r\n    height: CardElementHeight;\r\n\r\n    @property(CardElement.langProperty)\r\n    get lang(): string | undefined {\r\n        let lang = this.getValue(CardElement.langProperty);\r\n\r\n        if (lang) {\r\n            return lang;\r\n        }\r\n        else {\r\n            if (this.parent) {\r\n                return this.parent.lang;\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    set lang(value: string | undefined) {\r\n        this.setValue(CardElement.langProperty, value);\r\n    }\r\n\r\n    @property(CardElement.isVisibleProperty)\r\n    get isVisible(): boolean {\r\n        return this.getValue(CardElement.isVisibleProperty);\r\n    }\r\n\r\n    set isVisible(value: boolean) {\r\n        // If the element is going to be hidden, reset any changes that were due\r\n        // to overflow truncation (this ensures that if the element is later\r\n        // un-hidden it has the right content)\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && !value) {\r\n            this.undoOverflowTruncation();\r\n        }\r\n\r\n        if (this.isVisible !== value) {\r\n            this.setValue(CardElement.isVisibleProperty, value);\r\n\r\n            this.updateRenderedElementVisibility();\r\n\r\n            if (this._renderedElement) {\r\n                raiseElementVisibilityChangedEvent(this);\r\n            }\r\n        }\r\n\r\n        if (this._renderedElement) {\r\n            this._renderedElement.setAttribute(\"aria-expanded\", value.toString());\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _hostConfig?: HostConfig;\r\n    private _separatorElement?: HTMLElement;\r\n    private _truncatedDueToOverflow: boolean = false;\r\n    private _defaultRenderedElementDisplayMode?: string;\r\n    private _padding?: PaddingDefinition;\r\n\r\n    private internalRenderSeparator(): HTMLElement | undefined {\r\n        let renderedSeparator = Utils.renderSeparation(\r\n            this.hostConfig,\r\n            {\r\n                spacing: this.hostConfig.getEffectiveSpacing(this.spacing),\r\n                lineThickness: this.separator ? this.hostConfig.separator.lineThickness : undefined,\r\n                lineColor: this.separator ? this.hostConfig.separator.lineColor : undefined\r\n            },\r\n            this.separatorOrientation);\r\n\r\n            if (GlobalSettings.alwaysBleedSeparators && renderedSeparator && this.separatorOrientation == Enums.Orientation.Horizontal) {\r\n                // Adjust separator's margins if the option to always bleed separators is turned on\r\n                let parentContainer = this.getParentContainer();\r\n\r\n                if (parentContainer && parentContainer.getEffectivePadding()) {\r\n                    let parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(parentContainer.getEffectivePadding());\r\n\r\n                    renderedSeparator.style.marginLeft = \"-\" + parentPhysicalPadding.left + \"px\";\r\n                    renderedSeparator.style.marginRight = \"-\" + parentPhysicalPadding.right + \"px\";\r\n                }\r\n            }\r\n\r\n            return renderedSeparator;\r\n    }\r\n\r\n    private updateRenderedElementVisibility() {\r\n        let displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : \"none\";\r\n\r\n        if (this._renderedElement) {\r\n            if (displayMode) {\r\n                this._renderedElement.style.display = displayMode;\r\n            }\r\n            else {\r\n                this._renderedElement.style.removeProperty(\"display\");\r\n            }\r\n        }\r\n\r\n        if (this._separatorElement) {\r\n            if (this.parent && this.parent.isFirstElement(this)) {\r\n                this._separatorElement.style.display = \"none\";\r\n            }\r\n            else {\r\n                if (displayMode) {\r\n                    this._separatorElement.style.display = displayMode;\r\n                }\r\n                else {\r\n                    this._separatorElement.style.removeProperty(\"display\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private hideElementDueToOverflow() {\r\n        if (this._renderedElement && this.isVisible) {\r\n            this._renderedElement.style.visibility = \"hidden\";\r\n\r\n            this.isVisible = false;\r\n            raiseElementVisibilityChangedEvent(this, false);\r\n        }\r\n    }\r\n\r\n    private showElementHiddenDueToOverflow() {\r\n        if (this._renderedElement && !this.isVisible) {\r\n            this._renderedElement.style.removeProperty(\"visibility\");\r\n\r\n            this.isVisible = true;\r\n            raiseElementVisibilityChangedEvent(this, false);\r\n        }\r\n    }\r\n\r\n    // Marked private to emulate internal access\r\n    private handleOverflow(maxHeight: number) {\r\n        if (this.isVisible || this.isHiddenDueToOverflow()) {\r\n            let handled = this.truncateOverflow(maxHeight);\r\n\r\n            // Even if we were unable to truncate the element to fit this time,\r\n            // it still could have been previously truncated\r\n            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;\r\n\r\n            if (!handled) {\r\n                this.hideElementDueToOverflow();\r\n            }\r\n            else if (handled && !this.isVisible) {\r\n                this.showElementHiddenDueToOverflow();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Marked private to emulate internal access\r\n    private resetOverflow(): boolean {\r\n        let sizeChanged = false;\r\n\r\n        if (this._truncatedDueToOverflow) {\r\n            this.undoOverflowTruncation();\r\n            this._truncatedDueToOverflow = false;\r\n            sizeChanged = true;\r\n        }\r\n\r\n        if (this.isHiddenDueToOverflow()) {\r\n            this.showElementHiddenDueToOverflow();\r\n        }\r\n\r\n        return sizeChanged;\r\n    }\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SerializationContext();\r\n    }\r\n\r\n    protected createPlaceholderElement(): HTMLElement {\r\n        let styleDefinition = this.getEffectiveStyleDefinition();\r\n        let foregroundCssColor = Utils.stringToCssColor(styleDefinition.foregroundColors.default.subtle);\r\n\r\n        let element = document.createElement(\"div\");\r\n        element.style.border = \"1px dashed \" + foregroundCssColor;\r\n        element.style.padding = \"4px\";\r\n        element.style.minHeight = \"32px\";\r\n        element.style.fontSize = \"10px\";\r\n        element.style.color = <string>foregroundCssColor;\r\n        element.innerText = \"Empty \" + this.getJsonTypeName();\r\n\r\n        return element;\r\n    }\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        if (this.height === \"auto\") {\r\n            renderedElement.style.flex = \"0 0 auto\";\r\n        }\r\n        else {\r\n            renderedElement.style.flex = \"1 1 auto\";\r\n        }\r\n    }\r\n\r\n    protected isDisplayed(): boolean {\r\n        return this._renderedElement !== undefined && this.isVisible && this._renderedElement.offsetHeight > 0;\r\n    }\r\n\r\n    protected abstract internalRender(): HTMLElement | undefined;\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        return this.internalRender();\r\n    }\r\n\r\n    protected applyPadding() {\r\n        if (this.separatorElement) {\r\n            if (GlobalSettings.alwaysBleedSeparators && this.separatorOrientation == Enums.Orientation.Horizontal && !this.isBleeding()) {\r\n                let padding = new PaddingDefinition();\r\n\r\n                this.getImmediateSurroundingPadding(padding);\r\n\r\n                let physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n                this.separatorElement.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\r\n                this.separatorElement.style.marginRight = \"-\" + physicalPadding.right + \"px\";\r\n            }\r\n            else {\r\n                this.separatorElement.style.marginRight = \"0\";\r\n                this.separatorElement.style.marginLeft = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Called when this element overflows the bottom of the card.\r\n     * maxHeight will be the amount of space still available on the card (0 if\r\n     * the element is fully off the card).\r\n     */\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        // Child implementations should return true if the element handled\r\n        // the truncation request such that its content fits within maxHeight,\r\n        // false if the element should fall back to being hidden\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * This should reverse any changes performed in truncateOverflow().\r\n     */\r\n    protected undoOverflowTruncation() { }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition();\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getPadding(): PaddingDefinition | undefined {\r\n        return this._padding;\r\n    }\r\n\r\n    protected setPadding(value: PaddingDefinition | undefined) {\r\n        this._padding = value;\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return context.elementRegistry.findByName(this.getJsonTypeName()) !== undefined;\r\n    }\r\n\r\n    protected get useDefaultSizing(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get allowCustomPadding(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get separatorOrientation(): Enums.Orientation {\r\n        return Enums.Orientation.Horizontal;\r\n    }\r\n\r\n    protected get defaultStyle(): string {\r\n        return Enums.ContainerStyle.Default;\r\n    }\r\n\r\n    customCssSelector?: string;\r\n\r\n    parse(source: any, context?: SerializationContext) {\r\n        super.parse(source, context ? context : new SerializationContext());\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        return \"\";\r\n    }\r\n\r\n    isBleeding(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getEffectiveStyle(): string {\r\n        if (this.parent) {\r\n            return this.parent.getEffectiveStyle();\r\n        }\r\n\r\n        return this.defaultStyle;\r\n    }\r\n\r\n    getEffectiveStyleDefinition(): ContainerStyleDefinition {\r\n        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());\r\n    }\r\n\r\n    getForbiddenActionTypes(): ActionType[] {\r\n        return [];\r\n    }\r\n\r\n    getImmediateSurroundingPadding(\r\n        result: PaddingDefinition,\r\n        processTop: boolean = true,\r\n        processRight: boolean = true,\r\n        processBottom: boolean = true,\r\n        processLeft: boolean = true) {\r\n        if (this.parent) {\r\n            let doProcessTop = processTop && this.parent.isTopElement(this);\r\n            let doProcessRight = processRight && this.parent.isRightMostElement(this);\r\n            let doProcessBottom = processBottom && this.parent.isBottomElement(this);\r\n            let doProcessLeft = processLeft && this.parent.isLeftMostElement(this);\r\n\r\n            let effectivePadding = this.parent.getEffectivePadding();\r\n\r\n            if (effectivePadding) {\r\n                if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {\r\n                    result.top = effectivePadding.top;\r\n\r\n                    doProcessTop = false;\r\n                }\r\n\r\n                if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {\r\n                    result.right = effectivePadding.right;\r\n\r\n                    doProcessRight = false;\r\n                }\r\n\r\n                if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {\r\n                    result.bottom = effectivePadding.bottom;\r\n\r\n                    doProcessBottom = false;\r\n                }\r\n\r\n                if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {\r\n                    result.left = effectivePadding.left;\r\n\r\n                    doProcessLeft = false;\r\n                }\r\n            }\r\n\r\n            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {\r\n                this.parent.getImmediateSurroundingPadding(\r\n                    result,\r\n                    doProcessTop,\r\n                    doProcessRight,\r\n                    doProcessBottom,\r\n                    doProcessLeft);\r\n            }\r\n        }\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        throw new Error(Strings.errors.indexOutOfRange(index));\r\n    }\r\n\r\n    remove(): boolean {\r\n        if (this.parent && this.parent instanceof CardElementContainer) {\r\n            return this.parent.removeItem(this);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        this._renderedElement = this.overrideInternalRender();\r\n        this._separatorElement = this.internalRenderSeparator();\r\n\r\n        if (this._renderedElement) {\r\n            if (this.id) {\r\n                this._renderedElement.id = this.id;\r\n            }\r\n\r\n            if (this.customCssSelector) {\r\n                this._renderedElement.classList.add(this.customCssSelector);\r\n            }\r\n\r\n            this._renderedElement.style.boxSizing = \"border-box\";\r\n            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display ? this._renderedElement.style.display : undefined;\r\n\r\n            this.adjustRenderedElementSize(this._renderedElement);\r\n            this.updateLayout(false);\r\n        }\r\n        else if (this.isDesignMode()) {\r\n            this._renderedElement = this.createPlaceholderElement();\r\n        }\r\n\r\n        return this._renderedElement;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        this.updateRenderedElementVisibility();\r\n        this.applyPadding();\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return -1;\r\n    }\r\n\r\n    isDesignMode(): boolean {\r\n        let rootElement = this.getRootElement();\r\n\r\n        return rootElement instanceof AdaptiveCard && rootElement.designMode;\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isAtTheVeryLeft(): boolean {\r\n        return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;\r\n    }\r\n\r\n    isAtTheVeryRight(): boolean {\r\n        return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;\r\n    }\r\n\r\n    isAtTheVeryTop(): boolean {\r\n        return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;\r\n    }\r\n\r\n    isAtTheVeryBottom(): boolean {\r\n        return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        return false;\r\n    }\r\n\r\n    isLeftMostElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isRightMostElement(element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isTopElement(element: CardElement): boolean {\r\n        return this.isFirstElement(element);\r\n    }\r\n\r\n    isBottomElement(element: CardElement): boolean {\r\n        return this.isLastElement(element);\r\n    }\r\n\r\n    isHiddenDueToOverflow(): boolean {\r\n        return this._renderedElement !== undefined && this._renderedElement.style.visibility == 'hidden';\r\n    }\r\n\r\n    getRootElement(): CardElement {\r\n        return this.getRootObject() as CardElement;\r\n    }\r\n\r\n    getParentContainer(): Container | undefined {\r\n        let currentElement = this.parent;\r\n\r\n        while (currentElement) {\r\n            if (currentElement instanceof Container) {\r\n                return <Container>currentElement;\r\n            }\r\n\r\n            currentElement = currentElement.parent;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return [];\r\n    }\r\n\r\n    getElementById(id: string): CardElement | undefined {\r\n        return this.id === id ? this : undefined;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        return undefined;\r\n    }\r\n\r\n    getEffectivePadding(): PaddingDefinition {\r\n        let padding = this.getPadding();\r\n\r\n        return (padding && this.allowCustomPadding) ? padding : this.getDefaultPadding();\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        if (this._hostConfig) {\r\n            return this._hostConfig;\r\n        }\r\n        else {\r\n            if (this.parent) {\r\n                return this.parent.hostConfig;\r\n            }\r\n            else {\r\n                return defaultHostConfig;\r\n            }\r\n        }\r\n    }\r\n\r\n    set hostConfig(value: HostConfig) {\r\n        this._hostConfig = value;\r\n    }\r\n\r\n    get index(): number {\r\n        if (this.parent) {\r\n            return this.parent.indexOf(this);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get isInline(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        if (this.parent && this.separatorElement) {\r\n            return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get separatorElement(): HTMLElement | undefined {\r\n        return this._separatorElement;\r\n    }\r\n\r\n    get parent(): CardElement | undefined {\r\n        return <CardElement>this._parent;\r\n    }\r\n}\r\n\r\nexport class ActionProperty extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: SerializationContext): Action | undefined {\r\n        let parent = <CardElement>sender;\r\n\r\n        return context.parseAction(\r\n            parent,\r\n            source[this.name],\r\n            this.forbiddenActionTypes,\r\n            parent.isDesignMode());\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: Action | undefined, context: SerializationContext) {\r\n        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly forbiddenActionTypes: string[] = []) {\r\n        super(targetVersion, name, undefined);\r\n    }\r\n}\r\n\r\nexport abstract class BaseTextBlock extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly textProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"text\",\r\n        true);\r\n    static readonly sizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"size\",\r\n        Enums.TextSize,\r\n        Enums.TextSize.Default);\r\n    static readonly weightProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"weight\",\r\n        Enums.TextWeight,\r\n        Enums.TextWeight.Default);\r\n    static readonly colorProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"color\",\r\n        Enums.TextColor,\r\n        Enums.TextColor.Default);\r\n    static readonly isSubtleProperty = new BoolProperty(\r\n        Versions.v1_0,\r\n        \"isSubtle\",\r\n        false);\r\n    static readonly fontTypeProperty = new EnumProperty(\r\n        Versions.v1_2,\r\n        \"fontType\",\r\n        Enums.FontType);\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        // selectAction is declared on BaseTextBlock but is only exposed on TextRun,\r\n        // so the property is removed from the BaseTextBlock schema.\r\n        schema.remove(BaseTextBlock.selectActionProperty);\r\n    }\r\n\r\n    @property(BaseTextBlock.sizeProperty)\r\n    size: Enums.TextSize = Enums.TextSize.Default;\r\n\r\n    @property(BaseTextBlock.weightProperty)\r\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\r\n\r\n    @property(BaseTextBlock.colorProperty)\r\n    color: Enums.TextColor = Enums.TextColor.Default;\r\n\r\n    @property(BaseTextBlock.fontTypeProperty)\r\n    fontType?: Enums.FontType;\r\n\r\n    @property(BaseTextBlock.isSubtleProperty)\r\n    isSubtle: boolean = false;\r\n\r\n    @property(BaseTextBlock.textProperty)\r\n    get text(): string | undefined {\r\n        return this.getValue(BaseTextBlock.textProperty);\r\n    }\r\n\r\n    set text(value: string | undefined) {\r\n        this.setText(value);\r\n    }\r\n\r\n    @property(BaseTextBlock.selectActionProperty)\r\n    selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    protected getFontSize(fontType: FontTypeDefinition): number {\r\n        switch (this.size) {\r\n            case Enums.TextSize.Small:\r\n                return fontType.fontSizes.small;\r\n            case Enums.TextSize.Medium:\r\n                return fontType.fontSizes.medium;\r\n            case Enums.TextSize.Large:\r\n                return fontType.fontSizes.large;\r\n            case Enums.TextSize.ExtraLarge:\r\n                return fontType.fontSizes.extraLarge;\r\n            default:\r\n                return fontType.fontSizes.default;\r\n        }\r\n    }\r\n\r\n    protected getColorDefinition(colorSet: ColorSetDefinition, color: Enums.TextColor): TextColorDefinition {\r\n        switch (color) {\r\n            case Enums.TextColor.Accent:\r\n                return colorSet.accent;\r\n            case Enums.TextColor.Dark:\r\n                return colorSet.dark;\r\n            case Enums.TextColor.Light:\r\n                return colorSet.light;\r\n            case Enums.TextColor.Good:\r\n                return colorSet.good;\r\n            case Enums.TextColor.Warning:\r\n                return colorSet.warning;\r\n            case Enums.TextColor.Attention:\r\n                return colorSet.attention;\r\n            default:\r\n                return colorSet.default;\r\n        }\r\n    }\r\n\r\n    protected setText(value: string | undefined) {\r\n        this.setValue(BaseTextBlock.textProperty, value);\r\n    }\r\n\r\n    ariaHidden: boolean = false;\r\n\r\n    constructor(text?: string) {\r\n        super();\r\n\r\n        if (text) {\r\n            this.text = text;\r\n        }\r\n    }\r\n\r\n    init(textDefinition: BaseTextDefinition) {\r\n        this.size = textDefinition.size;\r\n        this.weight = textDefinition.weight;\r\n        this.color = textDefinition.color;\r\n        this.isSubtle = textDefinition.isSubtle;\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        return this.text;\r\n    }\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        let fontType = this.hostConfig.getFontTypeDefinition(this.fontType);\r\n\r\n        if (fontType.fontFamily) {\r\n            targetElement.style.fontFamily = fontType.fontFamily;\r\n        }\r\n\r\n        let fontSize: number;\r\n\r\n        switch (this.size) {\r\n            case Enums.TextSize.Small:\r\n                fontSize = fontType.fontSizes.small;\r\n                break;\r\n            case Enums.TextSize.Medium:\r\n                fontSize = fontType.fontSizes.medium;\r\n                break;\r\n            case Enums.TextSize.Large:\r\n                fontSize = fontType.fontSizes.large;\r\n                break;\r\n            case Enums.TextSize.ExtraLarge:\r\n                fontSize = fontType.fontSizes.extraLarge;\r\n                break;\r\n            default:\r\n                fontSize = fontType.fontSizes.default;\r\n                break;\r\n        }\r\n\r\n        targetElement.style.fontSize = fontSize + \"px\";\r\n\r\n        let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\r\n\r\n        targetElement.style.color = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.subtle : colorDefinition.default);\r\n\r\n        let fontWeight: number;\r\n\r\n        switch (this.weight) {\r\n            case Enums.TextWeight.Lighter:\r\n                fontWeight = fontType.fontWeights.lighter;\r\n                break;\r\n            case Enums.TextWeight.Bolder:\r\n                fontWeight = fontType.fontWeights.bolder;\r\n                break;\r\n            default:\r\n                fontWeight = fontType.fontWeights.default;\r\n                break;\r\n        }\r\n\r\n        targetElement.style.fontWeight = fontWeight.toString();\r\n\r\n        if (this.ariaHidden) {\r\n            targetElement.setAttribute(\"aria-hidden\", \"true\");\r\n        }\r\n    }\r\n\r\n    get effectiveColor(): Enums.TextColor {\r\n        return this.color ? this.color : Enums.TextColor.Default;\r\n    }\r\n}\r\n\r\nexport class TextBlock extends BaseTextBlock {\r\n    //#region Schema\r\n\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_0, \"wrap\", false);\r\n    static readonly maxLinesProperty = new NumProperty(Versions.v1_0, \"maxLines\");\r\n\r\n    @property(TextBlock.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    @property(TextBlock.maxLinesProperty)\r\n    maxLines?: number;\r\n\r\n    //#endregion\r\n\r\n    private _computedLineHeight: number;\r\n    private _originalInnerHtml: string;\r\n    private _processedText?: string;\r\n    private _treatAsPlainText: boolean = true;\r\n\r\n    private restoreOriginalContent() {\r\n        if (this.renderedElement !== undefined) {\r\n            if (this.maxLines && this.maxLines > 0) {\r\n                this.renderedElement.style.maxHeight = this._computedLineHeight * this.maxLines + \"px\";\r\n            }\r\n\r\n            this.renderedElement.innerHTML = this._originalInnerHtml;\r\n        }\r\n    }\r\n\r\n    private truncateIfSupported(maxHeight: number): boolean {\r\n        if (this.renderedElement !== undefined) {\r\n            // For now, only truncate TextBlocks that contain just a single\r\n            // paragraph -- since the maxLines calculation doesn't take into\r\n            // account Markdown lists\r\n            let children = this.renderedElement.children;\r\n            let isTextOnly = !children.length;\r\n            let truncationSupported = isTextOnly || children.length == 1 && (<HTMLElement>children[0]).tagName.toLowerCase() == 'p';\r\n\r\n            if (truncationSupported) {\r\n                let element = isTextOnly ? this.renderedElement : <HTMLElement>children[0];\r\n\r\n                Utils.truncate(element, maxHeight, this._computedLineHeight);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected setText(value: string) {\r\n        super.setText(value);\r\n\r\n        this._processedText = undefined;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._processedText = undefined;\r\n\r\n        if (this.text) {\r\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let element: HTMLElement;\r\n\r\n            if (this.forElementId) {\r\n                let labelElement = document.createElement(\"label\");\r\n                labelElement.htmlFor = this.forElementId;\r\n\r\n                element = labelElement;\r\n            }\r\n            else {\r\n                element = document.createElement(\"div\");\r\n            }\r\n\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textBlock\"));\r\n            element.style.overflow = \"hidden\";\r\n\r\n            this.applyStylesTo(element);\r\n\r\n            if (this.selectAction) {\r\n                element.onclick = (e) => {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    if (this.selectAction) {\r\n                        this.selectAction.execute();\r\n                    }\r\n                }\r\n\r\n                if (hostConfig.supportsInteractivity) {\r\n                    element.tabIndex = 0\r\n                    element.setAttribute(\"role\", this.selectAction.getAriaRole());\r\n\r\n                    if (this.selectAction.title) {\r\n                        element.setAttribute(\"aria-label\", this.selectAction.title);\r\n                        element.title = this.selectAction.title;\r\n                    }\r\n\r\n                    element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                }\r\n            }\r\n\r\n            if (!this._processedText) {\r\n                this._treatAsPlainText = true;\r\n\r\n                let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\r\n\r\n                if (this.useMarkdown && formattedText) {\r\n                    if (GlobalSettings.allowMarkForTextHighlighting) {\r\n                        formattedText = formattedText.replace(/<mark>/g, \"===\").replace(/<\\/mark>/g, \"/==/\");\r\n                    }\r\n\r\n                    let markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);\r\n\r\n                    if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {\r\n                        this._processedText = markdownProcessingResult.outputHtml;\r\n                        this._treatAsPlainText = false;\r\n\r\n                        // Only process <mark> tag if markdown processing was applied because\r\n                        // markdown processing is also responsible for sanitizing the input string\r\n                        if (GlobalSettings.allowMarkForTextHighlighting && this._processedText) {\r\n                            let markStyle: string = \"\";\r\n                            let effectiveStyle = this.getEffectiveStyleDefinition();\r\n\r\n                            if (effectiveStyle.highlightBackgroundColor) {\r\n                                markStyle += \"background-color: \" + effectiveStyle.highlightBackgroundColor + \";\";\r\n                            }\r\n\r\n                            if (effectiveStyle.highlightForegroundColor) {\r\n                                markStyle += \"color: \" + effectiveStyle.highlightForegroundColor + \";\";\r\n                            }\r\n\r\n                            if (markStyle) {\r\n                                markStyle = 'style=\"' + markStyle + '\"';\r\n                            }\r\n\r\n                            this._processedText = this._processedText.replace(/===/g, \"<mark \" + markStyle + \">\").replace(/\\/==\\//g, \"</mark>\");\r\n                        }\r\n                    } else {\r\n                        this._processedText = formattedText;\r\n                        this._treatAsPlainText = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this._processedText = formattedText;\r\n                    this._treatAsPlainText = true;\r\n                }\r\n            }\r\n\r\n            if (!this._processedText) {\r\n                this._processedText = \"\";\r\n            }\r\n\r\n            if (this._treatAsPlainText) {\r\n                element.innerText = this._processedText;\r\n            }\r\n            else {\r\n                element.innerHTML = this._processedText;\r\n            }\r\n\r\n            if (element.firstElementChild instanceof HTMLElement) {\r\n                let firstElementChild = <HTMLElement>element.firstElementChild;\r\n                firstElementChild.style.marginTop = \"0px\";\r\n                firstElementChild.style.width = \"100%\";\r\n\r\n                if (!this.wrap) {\r\n                    firstElementChild.style.overflow = \"hidden\";\r\n                    firstElementChild.style.textOverflow = \"ellipsis\";\r\n                }\r\n            }\r\n\r\n            if (element.lastElementChild instanceof HTMLElement) {\r\n                (<HTMLElement>element.lastElementChild).style.marginBottom = \"0px\";\r\n            }\r\n\r\n            let anchors = element.getElementsByTagName(\"a\");\r\n\r\n            for (let i = 0; i < anchors.length; i++) {\r\n                let anchor = <HTMLAnchorElement>anchors[i];\r\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\r\n                anchor.target = \"_blank\";\r\n                anchor.onclick = (e) => {\r\n                    if (raiseAnchorClickedEvent(this, e.target as HTMLAnchorElement)) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.wrap) {\r\n                element.style.wordWrap = \"break-word\";\r\n\r\n                if (this.maxLines && this.maxLines > 0) {\r\n                    element.style.maxHeight = (this._computedLineHeight * this.maxLines) + \"px\";\r\n                    element.style.overflow = \"hidden\";\r\n                }\r\n            }\r\n            else {\r\n                element.style.whiteSpace = \"nowrap\";\r\n                element.style.textOverflow = \"ellipsis\";\r\n            }\r\n\r\n            if (GlobalSettings.useAdvancedTextBlockTruncation || GlobalSettings.useAdvancedCardBottomTruncation) {\r\n                this._originalInnerHtml = element.innerHTML;\r\n            }\r\n\r\n            return element;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        if (maxHeight >= this._computedLineHeight) {\r\n            return this.truncateIfSupported(maxHeight);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        this.restoreOriginalContent();\r\n\r\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines) {\r\n            let maxHeight = this._computedLineHeight * this.maxLines;\r\n\r\n            this.truncateIfSupported(maxHeight);\r\n        }\r\n    }\r\n\r\n    useMarkdown: boolean = true;\r\n    forElementId?: string;\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        super.applyStylesTo(targetElement);\r\n\r\n        let parentContainer = this.getParentContainer();\r\n        let isRtl = parentContainer ? parentContainer.isRtl() : false;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Enums.HorizontalAlignment.Center:\r\n                targetElement.style.textAlign = \"center\";\r\n                break;\r\n            case Enums.HorizontalAlignment.Right:\r\n                targetElement.style.textAlign = isRtl ? \"left\" : \"right\";\r\n                break;\r\n            default:\r\n                targetElement.style.textAlign = isRtl ? \"right\" : \"left\";\r\n                break;\r\n        }\r\n\r\n        let lineHeights = this.hostConfig.lineHeights;\r\n\r\n        if (lineHeights) {\r\n            switch (this.size) {\r\n                case Enums.TextSize.Small:\r\n                    this._computedLineHeight = lineHeights.small;\r\n                    break;\r\n                case Enums.TextSize.Medium:\r\n                    this._computedLineHeight = lineHeights.medium;\r\n                    break;\r\n                case Enums.TextSize.Large:\r\n                    this._computedLineHeight = lineHeights.large;\r\n                    break;\r\n                case Enums.TextSize.ExtraLarge:\r\n                    this._computedLineHeight = lineHeights.extraLarge;\r\n                    break;\r\n                default:\r\n                    this._computedLineHeight = lineHeights.default;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            // Looks like 1.33 is the magic number to compute line-height\r\n            // from font size.\r\n            this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.fontType)) * 1.33;\r\n        }\r\n\r\n        targetElement.style.lineHeight = this._computedLineHeight + \"px\";\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = false) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines && this.isDisplayed()) {\r\n            // Reset the element's innerHTML in case the available room for\r\n            // content has increased\r\n            this.restoreOriginalContent();\r\n            this.truncateIfSupported(this._computedLineHeight * this.maxLines);\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextRun extends BaseTextBlock {\r\n    //#region Schema\r\n\r\n    static readonly italicProperty = new BoolProperty(Versions.v1_2, \"italic\", false);\r\n    static readonly strikethroughProperty = new BoolProperty(Versions.v1_2, \"strikethrough\", false);\r\n    static readonly highlightProperty = new BoolProperty(Versions.v1_2, \"highlight\", false);\r\n    static readonly underlineProperty = new BoolProperty(Versions.v1_3, \"underline\", false);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.add(BaseTextBlock.selectActionProperty);\r\n    }\r\n\r\n    @property(TextRun.italicProperty)\r\n    italic: boolean = false;\r\n\r\n    @property(TextRun.strikethroughProperty)\r\n    strikethrough: boolean = false;\r\n\r\n    @property(TextRun.highlightProperty)\r\n    highlight: boolean = false;\r\n\r\n    @property(TextRun.underlineProperty)\r\n    underline: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this.text) {\r\n            let preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\r\n\r\n            if (!formattedText) {\r\n                formattedText = \"\";\r\n            }\r\n\r\n            let element = document.createElement(\"span\");\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textRun\"));\r\n\r\n            this.applyStylesTo(element);\r\n\r\n            if (this.selectAction && hostConfig.supportsInteractivity) {\r\n                let anchor = document.createElement(\"a\");\r\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\r\n\r\n                let href = this.selectAction.getHref();\r\n\r\n                anchor.href = href ? href : \"\";\r\n                anchor.target = \"_blank\";\r\n                anchor.onclick = (e) => {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    if (this.selectAction) {\r\n                        this.selectAction.execute();\r\n                    }\r\n                }\r\n\r\n                if (this.selectAction.title) {\r\n                    anchor.setAttribute(\"aria-label\", this.selectAction.title);\r\n                    anchor.title = this.selectAction.title;\r\n                }\r\n\r\n                anchor.innerText = formattedText;\r\n\r\n                element.appendChild(anchor);\r\n            }\r\n            else {\r\n                element.innerText = formattedText;\r\n            }\r\n\r\n            return element;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        super.applyStylesTo(targetElement);\r\n\r\n        if (this.italic) {\r\n            targetElement.style.fontStyle = \"italic\";\r\n        }\r\n\r\n        if (this.strikethrough) {\r\n            targetElement.style.textDecoration = \"line-through\";\r\n        }\r\n\r\n        if (this.highlight) {\r\n            let colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);\r\n\r\n            targetElement.style.backgroundColor = <string>Utils.stringToCssColor(this.isSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);\r\n        }\r\n\r\n        if (this.underline) {\r\n            targetElement.style.textDecoration = \"underline\";\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TextRun\";\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get isInline(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class RichTextBlock extends CardElement {\r\n    private _inlines: CardElement[] = [];\r\n\r\n    private internalAddInline(inline: CardElement, forceAdd: boolean = false) {\r\n        if (!inline.isInline) {\r\n            throw new Error(Strings.errors.elementCannotBeUsedAsInline());\r\n        }\r\n\r\n        let doAdd: boolean = inline.parent === undefined || forceAdd;\r\n\r\n        if (!doAdd && inline.parent != this) {\r\n            throw new Error(Strings.errors.inlineAlreadyParented());\r\n        }\r\n        else {\r\n            inline.setParent(this);\r\n\r\n            this._inlines.push(inline);\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._inlines = [];\r\n\r\n        if (Array.isArray(source[\"inlines\"])) {\r\n            for (let jsonInline of source[\"inlines\"]) {\r\n                let inline: CardElement | undefined;\r\n\r\n                if (typeof jsonInline === \"string\") {\r\n                    let textRun = new TextRun();\r\n                    textRun.text = jsonInline;\r\n\r\n                    inline = textRun;\r\n                }\r\n                else {\r\n                    // No fallback for inlines in 1.2\r\n                    inline = context.parseElement(this, jsonInline, false);\r\n                }\r\n\r\n                if (inline) {\r\n                    this.internalAddInline(inline, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        if (this._inlines.length > 0) {\r\n            let jsonInlines: any[] = [];\r\n\r\n            for (let inline of this._inlines) {\r\n                jsonInlines.push(inline.toJSON(context));\r\n            }\r\n\r\n            context.serializeValue(target, \"inlines\", jsonInlines);\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this._inlines.length > 0) {\r\n            let element: HTMLElement;\r\n\r\n            if (this.forElementId) {\r\n                let labelElement = document.createElement(\"label\");\r\n                labelElement.htmlFor = this.forElementId;\r\n\r\n                element = labelElement;\r\n            }\r\n            else {\r\n                element = document.createElement(\"div\");\r\n            }\r\n\r\n            element.className = this.hostConfig.makeCssClassName(\"ac-richTextBlock\");\r\n\r\n            let parentContainer = this.getParentContainer();\r\n            let isRtl = parentContainer ? parentContainer.isRtl() : false;\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.textAlign = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.textAlign = isRtl ? \"left\" : \"right\";\r\n                    break;\r\n                default:\r\n                    element.style.textAlign = isRtl ? \"right\" : \"left\";\r\n                    break;\r\n            }\r\n\r\n            let renderedInlines: number = 0;\r\n\r\n            for (let inline of this._inlines) {\r\n                let renderedInline = inline.render();\r\n\r\n                if (renderedInline) {\r\n                    element.appendChild(renderedInline);\r\n\r\n                    renderedInlines++;\r\n                }\r\n            }\r\n\r\n            if (renderedInlines > 0) {\r\n                return element;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    forElementId?: string;\r\n\r\n    asString(): string | undefined {\r\n        let result = \"\";\r\n\r\n        for (let inline of this._inlines) {\r\n            result += inline.asString();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"RichTextBlock\";\r\n    }\r\n\r\n    getInlineCount(): number {\r\n        return this._inlines.length;\r\n    }\r\n\r\n    getInlineAt(index: number): CardElement {\r\n        if (index >= 0 && index < this._inlines.length) {\r\n            return this._inlines[index];\r\n        }\r\n        else {\r\n            throw new Error(Strings.errors.indexOutOfRange(index));\r\n        }\r\n    }\r\n\r\n    addInline(inline: CardElement | string) {\r\n        if (typeof inline === \"string\") {\r\n            this.internalAddInline(new TextRun(inline));\r\n        }\r\n        else {\r\n            this.internalAddInline(inline);\r\n        }\r\n    }\r\n\r\n    removeInline(inline: CardElement): boolean {\r\n        let index = this._inlines.indexOf(inline);\r\n\r\n        if (index >= 0) {\r\n            this._inlines[index].setParent(undefined);\r\n            this._inlines.splice(index, 1);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class Fact extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n\r\n    // For historic reasons, the \"title\" schema property is exposed as \"name\" in the OM.\r\n    @property(Fact.titleProperty)\r\n    name?: string;\r\n\r\n    @property(Fact.valueProperty)\r\n    value?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Fact\";\r\n    }\r\n\r\n    constructor(name?: string, value?: string) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class FactSet extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly factsProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"facts\", Fact);\r\n\r\n    @property(FactSet.factsProperty)\r\n    facts: Fact[];\r\n\r\n    //#endregion\r\n\r\n    protected get useDefaultSizing(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n        let hostConfig = this.hostConfig;\r\n\r\n        if (this.facts.length > 0) {\r\n            element = document.createElement(\"table\");\r\n            element.style.borderWidth = \"0px\";\r\n            element.style.borderSpacing = \"0px\";\r\n            element.style.borderStyle = \"none\";\r\n            element.style.borderCollapse = \"collapse\";\r\n            element.style.display = \"block\";\r\n            element.style.overflow = \"hidden\";\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-factset\"));\r\n            element.setAttribute(\"role\", \"presentation\");\r\n\r\n            for (let i = 0; i < this.facts.length; i++) {\r\n                let trElement = document.createElement(\"tr\");\r\n\r\n                if (i > 0) {\r\n                    trElement.style.marginTop = hostConfig.factSet.spacing + \"px\";\r\n                }\r\n\r\n                // Title column\r\n                let tdElement = document.createElement(\"td\");\r\n                tdElement.style.padding = \"0\";\r\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-title\"));\r\n\r\n                if (hostConfig.factSet.title.maxWidth) {\r\n                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + \"px\";\r\n                }\r\n\r\n                tdElement.style.verticalAlign = \"top\";\r\n\r\n                let textBlock = new TextBlock();\r\n                textBlock.setParent(this);\r\n                textBlock.text = (!this.facts[i].name && this.isDesignMode()) ? \"Title\" : this.facts[i].name;\r\n                textBlock.size = hostConfig.factSet.title.size;\r\n                textBlock.color = hostConfig.factSet.title.color;\r\n                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;\r\n                textBlock.weight = hostConfig.factSet.title.weight;\r\n                textBlock.wrap = hostConfig.factSet.title.wrap;\r\n                textBlock.spacing = Enums.Spacing.None;\r\n\r\n                Utils.appendChild(tdElement, textBlock.render());\r\n                Utils.appendChild(trElement, tdElement);\r\n\r\n                // Spacer column\r\n                tdElement = document.createElement(\"td\");\r\n                tdElement.style.width = \"10px\";\r\n\r\n                Utils.appendChild(trElement, tdElement);\r\n\r\n                // Value column\r\n                tdElement = document.createElement(\"td\");\r\n                tdElement.style.padding = \"0\";\r\n                tdElement.style.verticalAlign = \"top\";\r\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-value\"));\r\n\r\n                textBlock = new TextBlock();\r\n                textBlock.setParent(this);\r\n                textBlock.text = this.facts[i].value;\r\n                textBlock.size = hostConfig.factSet.value.size;\r\n                textBlock.color = hostConfig.factSet.value.color;\r\n                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;\r\n                textBlock.weight = hostConfig.factSet.value.weight;\r\n                textBlock.wrap = hostConfig.factSet.value.wrap;\r\n                textBlock.spacing = Enums.Spacing.None;\r\n\r\n                Utils.appendChild(tdElement, textBlock.render());\r\n                Utils.appendChild(trElement, tdElement);\r\n                Utils.appendChild(element, trElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"FactSet\";\r\n    }\r\n}\r\n\r\nclass ImageDimensionProperty extends PropertyDefinition {\r\n    getInternalName(): string {\r\n        return this.internalName;\r\n    }\r\n\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\r\n        let result: number | undefined = undefined;\r\n        let sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (typeof sourceValue === \"string\") {\r\n            try {\r\n                let size = SizeAndUnit.parse(sourceValue, true);\r\n\r\n                if (size.unit == Enums.SizeUnit.Pixel) {\r\n                    result = size.physicalSize;\r\n\r\n                    isValid = true;\r\n                }\r\n            }\r\n            catch {\r\n                // Swallow the exception\r\n            }\r\n\r\n            // If the source value isn't valid per this property definition,\r\n            // check its validity per the fallback property, if specified\r\n            if (!isValid && this.fallbackProperty) {\r\n                isValid = this.fallbackProperty.isValidValue(sourceValue, context);\r\n            }\r\n        }\r\n\r\n        if (!isValid) {\r\n            context.logParseEvent(\r\n                sender,\r\n                Enums.ValidationEvent.InvalidPropertyValue,\r\n                Strings.errors.invalidPropertyValue(sourceValue, this.name));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly internalName: string,\r\n        readonly fallbackProperty?: ValueSetProperty) {\r\n        super(targetVersion, name);\r\n    }\r\n}\r\n\r\nexport class Image extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n    static readonly altTextProperty = new StringProperty(Versions.v1_0, \"altText\");\r\n    static readonly backgroundColorProperty = new StringProperty(Versions.v1_1, \"backgroundColor\");\r\n    static readonly styleProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        Enums.ImageStyle,\r\n        Enums.ImageStyle.Default);\r\n    static readonly sizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"size\",\r\n        Enums.Size,\r\n        Enums.Size.Auto);\r\n    static readonly pixelWidthProperty = new ImageDimensionProperty(Versions.v1_1, \"width\", \"pixelWidth\");\r\n    static readonly pixelHeightProperty = new ImageDimensionProperty(Versions.v1_1, \"height\", \"pixelHeight\", CardElement.heightProperty);\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.remove(CardElement.heightProperty);\r\n    }\r\n\r\n    @property(Image.urlProperty)\r\n    url?: string;\r\n\r\n    @property(Image.altTextProperty)\r\n    altText?: string;\r\n\r\n    @property(Image.backgroundColorProperty)\r\n    backgroundColor?: string;\r\n\r\n    @property(Image.sizeProperty)\r\n    size: Enums.Size = Enums.Size.Auto;\r\n\r\n    @property(Image.styleProperty)\r\n    style: Enums.ImageStyle = Enums.ImageStyle.Default;\r\n\r\n    @property(Image.pixelWidthProperty)\r\n    pixelWidth?: number;\r\n\r\n    @property(Image.pixelHeightProperty)\r\n    pixelHeight?: number;\r\n\r\n    @property(Image.selectActionProperty)\r\n    selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    private applySize(element: HTMLElement) {\r\n        if (this.pixelWidth || this.pixelHeight) {\r\n            if (this.pixelWidth) {\r\n                element.style.width = this.pixelWidth + \"px\";\r\n            }\r\n\r\n            if (this.pixelHeight) {\r\n                element.style.height = this.pixelHeight + \"px\";\r\n            }\r\n        }\r\n        else {\r\n            if (this.maxHeight) {\r\n                // If the image is constrained in height, we set its height property and\r\n                // auto and stretch are ignored (default to medium). THis is necessary for\r\n                // ImageSet which uses a maximum image height as opposed to the cards width\r\n                // as a constraining dimension\r\n                switch (this.size) {\r\n                    case Enums.Size.Small:\r\n                        element.style.height = this.hostConfig.imageSizes.small + \"px\";\r\n                        break;\r\n                    case Enums.Size.Large:\r\n                        element.style.height = this.hostConfig.imageSizes.large + \"px\";\r\n                        break;\r\n                    default:\r\n                        element.style.height = this.hostConfig.imageSizes.medium + \"px\";\r\n                        break;\r\n                }\r\n\r\n                element.style.maxHeight = this.maxHeight + \"px\";\r\n            }\r\n            else {\r\n                switch (this.size) {\r\n                    case Enums.Size.Stretch:\r\n                        element.style.width = \"100%\";\r\n                        break;\r\n                    case Enums.Size.Auto:\r\n                        element.style.maxWidth = \"100%\";\r\n                        break;\r\n                    case Enums.Size.Small:\r\n                        element.style.width = this.hostConfig.imageSizes.small + \"px\";\r\n                        break;\r\n                    case Enums.Size.Large:\r\n                        element.style.width = this.hostConfig.imageSizes.large + \"px\";\r\n                        break;\r\n                    case Enums.Size.Medium:\r\n                        element.style.width = this.hostConfig.imageSizes.medium + \"px\";\r\n                        break;\r\n                }\r\n\r\n                element.style.maxHeight = \"100%\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected get useDefaultSizing() {\r\n        return false;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n\r\n        if (this.url) {\r\n            element = document.createElement(\"div\");\r\n            element.style.display = \"flex\";\r\n            element.style.alignItems = \"flex-start\";\r\n\r\n            element.onkeypress = (e) => {\r\n                if (this.selectAction && (e.keyCode == 13 || e.keyCode == 32)) { // enter or space pressed\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    this.selectAction.execute();\r\n                }\r\n            }\r\n\r\n            element.onclick = (e) => {\r\n                if (this.selectAction) {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    this.selectAction.execute();\r\n                }\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.justifyContent = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.justifyContent = \"flex-end\";\r\n                    break;\r\n                default:\r\n                    element.style.justifyContent = \"flex-start\";\r\n                    break;\r\n            }\r\n\r\n            // Cache hostConfig to avoid walking the parent hierarchy multiple times\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let imageElement = document.createElement(\"img\");\r\n            imageElement.onload = (e: Event) => {\r\n                raiseImageLoadedEvent(this);\r\n            }\r\n            imageElement.onerror = (e: Event) => {\r\n                if (this.renderedElement) {\r\n                    let card = this.getRootElement() as AdaptiveCard;\r\n\r\n                    this.renderedElement.innerHTML = \"\";\r\n\r\n                    if (card && card.designMode) {\r\n                        let errorElement = document.createElement(\"div\");\r\n                        errorElement.style.display = \"flex\";\r\n                        errorElement.style.alignItems = \"center\";\r\n                        errorElement.style.justifyContent = \"center\";\r\n                        errorElement.style.backgroundColor = \"#EEEEEE\";\r\n                        errorElement.style.color = \"black\";\r\n                        errorElement.innerText = \":-(\";\r\n                        errorElement.style.padding = \"10px\";\r\n\r\n                        this.applySize(errorElement);\r\n\r\n                        this.renderedElement.appendChild(errorElement);\r\n                    }\r\n                }\r\n\r\n                raiseImageLoadedEvent(this);\r\n            }\r\n            imageElement.style.minWidth = \"0\";\r\n            imageElement.classList.add(hostConfig.makeCssClassName(\"ac-image\"));\r\n\r\n            if (this.selectAction !== undefined && hostConfig.supportsInteractivity) {\r\n                imageElement.tabIndex = 0\r\n                imageElement.setAttribute(\"role\", this.selectAction.getAriaRole());\r\n\r\n                if (this.selectAction.title) {\r\n                    imageElement.setAttribute(\"aria-label\", <string>this.selectAction.title);\r\n                    imageElement.title = this.selectAction.title;\r\n                }\r\n\r\n                imageElement.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n            }\r\n\r\n            this.applySize(imageElement);\r\n\r\n            if (this.style === Enums.ImageStyle.Person) {\r\n                imageElement.style.borderRadius = \"50%\";\r\n                imageElement.style.backgroundPosition = \"50% 50%\";\r\n                imageElement.style.backgroundRepeat = \"no-repeat\";\r\n            }\r\n\r\n            imageElement.style.backgroundColor = <string>Utils.stringToCssColor(this.backgroundColor);\r\n            imageElement.src = <string>this.preProcessPropertyValue(Image.urlProperty);\r\n\r\n            const altTextProperty = this.preProcessPropertyValue(Image.altTextProperty);\r\n            if (altTextProperty) {\r\n                imageElement.alt = <string>altTextProperty;\r\n            }\r\n\r\n            element.appendChild(imageElement);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    maxHeight?: number;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    getActionById(id: string) {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result && this.selectAction) {\r\n            result = this.selectAction.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this.url ? [{ url: this.url, mimeType: \"image\" }] : [];\r\n    }\r\n}\r\n\r\nexport abstract class CardElementContainer extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [ \"Action.ShowCard\" ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        if (!this.isSelectable) {\r\n            schema.remove(CardElementContainer.selectActionProperty);\r\n        }\r\n    }\r\n\r\n    @property(CardElementContainer.selectActionProperty)\r\n    protected _selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    protected isElementAllowed(element: CardElement) {\r\n        return this.hostConfig.supportsInteractivity || !element.isInteractive;\r\n    }\r\n\r\n    protected applyPadding() {\r\n        super.applyPadding();\r\n\r\n        if (!this.renderedElement) {\r\n            return;\r\n        }\r\n\r\n        let physicalPadding = new SpacingDefinition();\r\n\r\n        if (this.getEffectivePadding()) {\r\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\r\n        }\r\n\r\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\r\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\r\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\r\n\r\n        this.renderedElement.style.marginRight = \"0\";\r\n        this.renderedElement.style.marginLeft = \"0\";\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    abstract getItemCount(): number;\r\n    abstract getItemAt(index: number): CardElement;\r\n    abstract getFirstVisibleRenderedItem(): CardElement | undefined;\r\n    abstract getLastVisibleRenderedItem(): CardElement | undefined;\r\n    abstract removeItem(item: CardElement): boolean;\r\n\r\n    allowVerticalOverflow: boolean = false;\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            let item = this.getItemAt(i);\r\n\r\n            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InteractivityNotAllowed,\r\n                    Strings.errors.interactivityNotAllowed());\r\n            }\r\n\r\n            if (!this.isElementAllowed(item)) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InteractivityNotAllowed,\r\n                    Strings.errors.elementTypeNotAllowed(item.getJsonTypeName()));\r\n            }\r\n\r\n            item.internalValidateProperties(context);\r\n        }\r\n\r\n        if (this._selectAction) {\r\n            this._selectAction.internalValidateProperties(context);\r\n        }\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let element = super.render();\r\n\r\n        if (element) {\r\n            let hostConfig = this.hostConfig;\r\n\r\n            if (this.allowVerticalOverflow) {\r\n                element.style.overflowX = \"hidden\";\r\n                element.style.overflowY = \"auto\";\r\n            }\r\n\r\n            if (element && this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {\r\n                element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                element.tabIndex = 0;\r\n                element.setAttribute(\"role\", this._selectAction.getAriaRole());\r\n\r\n                if (this._selectAction.title) {\r\n                    element.setAttribute(\"aria-label\", this._selectAction.title);\r\n                    element.title = this._selectAction.title;\r\n                }\r\n\r\n                element.onclick = (e) => {\r\n                    if (this._selectAction !== undefined) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this._selectAction.execute();\r\n                    }\r\n                }\r\n\r\n                element.onkeypress = (e) => {\r\n                    if (this._selectAction !== undefined && (e.keyCode == 13 || e.keyCode == 32)) {\r\n                        // Enter or space pressed\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this._selectAction.execute();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (processChildren) {\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                this.getItemAt(i).updateLayout();\r\n            }\r\n        }\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result = result.concat(this.getItemAt(i).getAllInputs(processActions));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result = result.concat(this.getItemAt(i).getResourceInformation());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getElementById(id: string): CardElement | undefined {\r\n        let result = super.getElementById(id);\r\n\r\n        if (!result) {\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                result = this.getItemAt(i).getElementById(id);\r\n\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class ImageSet extends CardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly imagesProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_0,\r\n        \"images\",\r\n        Image,\r\n        (sender: SerializableObject, item: Image) => { item.setParent(<CardElement>sender); });\r\n    static readonly imageSizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"imageSize\",\r\n        Enums.ImageSize,\r\n        Enums.ImageSize.Medium);\r\n\r\n    @property(ImageSet.imagesProperty)\r\n    private _images: Image[] = [];\r\n\r\n    @property(ImageSet.imageSizeProperty)\r\n    imageSize: Enums.ImageSize = Enums.ImageSize.Medium;\r\n\r\n    //#endregion\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n\r\n        if (this._images.length > 0) {\r\n            element = document.createElement(\"div\");\r\n            element.style.display = \"flex\";\r\n            element.style.flexWrap = \"wrap\";\r\n\r\n            for (let image of this._images) {\r\n                switch (this.imageSize) {\r\n                    case Enums.ImageSize.Small:\r\n                        image.size = Enums.Size.Small;\r\n                        break;\r\n                    case Enums.ImageSize.Large:\r\n                        image.size = Enums.Size.Large;\r\n                        break;\r\n                    default:\r\n                        image.size = Enums.Size.Medium;\r\n                        break;\r\n                }\r\n\r\n                image.maxHeight = this.hostConfig.imageSet.maxImageHeight;\r\n\r\n                let renderedImage = image.render();\r\n\r\n                if (renderedImage) {\r\n                    renderedImage.style.display = \"inline-flex\";\r\n                    renderedImage.style.margin = \"0px\";\r\n                    renderedImage.style.marginRight = \"10px\";\r\n\r\n                    Utils.appendChild(element, renderedImage);\r\n                }\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._images.length;\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this._images[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        return this._images && this._images.length > 0 ? this._images[0] : undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : undefined;\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        if (item instanceof Image) {\r\n            let itemIndex = this._images.indexOf(item);\r\n\r\n            if (itemIndex >= 0) {\r\n                this._images.splice(itemIndex, 1);\r\n\r\n                item.setParent(undefined);\r\n\r\n                this.updateLayout();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ImageSet\";\r\n    }\r\n\r\n    addImage(image: Image) {\r\n        if (!image.parent) {\r\n            this._images.push(image);\r\n\r\n            image.setParent(this);\r\n        }\r\n        else {\r\n            throw new Error(\"This image already belongs to another ImageSet\");\r\n        }\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;\r\n    }\r\n}\r\n\r\nexport class MediaSource extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly mimeTypeProperty = new StringProperty(Versions.v1_1, \"mimeType\");\r\n    static readonly urlProperty = new StringProperty(Versions.v1_1, \"url\");\r\n\r\n    @property(MediaSource.mimeTypeProperty)\r\n    mimeType?: string;\r\n\r\n    @property(MediaSource.urlProperty)\r\n    url?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"MediaSource\";\r\n    }\r\n\r\n    constructor(url?: string, mimeType?: string) {\r\n        super();\r\n\r\n        this.url = url;\r\n        this.mimeType = mimeType;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this.mimeType && this.url ? true : false;\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let result: HTMLSourceElement | undefined = undefined;\r\n\r\n        if (this.isValid()) {\r\n            result = document.createElement(\"source\");\r\n            result.src = <string>this.url;\r\n            result.type = <string>this.mimeType;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Media extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly sourcesProperty = new SerializableObjectCollectionProperty(Versions.v1_1, \"sources\", MediaSource);\r\n    static readonly posterProperty = new StringProperty(Versions.v1_1, \"poster\");\r\n    static readonly altTextProperty = new StringProperty(Versions.v1_1, \"altText\");\r\n\r\n    @property(Media.sourcesProperty)\r\n    sources: MediaSource[] = [];\r\n\r\n    @property(Media.posterProperty)\r\n    poster?: string;\r\n\r\n    @property(Media.altTextProperty)\r\n    altText?: string;\r\n\r\n    //#endregion\r\n\r\n    static readonly supportedMediaTypes = [\"audio\", \"video\"];\r\n\r\n    private _selectedMediaType?: string;\r\n    private _selectedSources: MediaSource[];\r\n\r\n    private getPosterUrl(): string | undefined {\r\n        return this.poster ? this.poster : this.hostConfig.media.defaultPoster;\r\n    }\r\n\r\n    private processSources() {\r\n        this._selectedSources = [];\r\n        this._selectedMediaType = undefined;\r\n\r\n        for (let source of this.sources) {\r\n            let mimeComponents = source.mimeType ? source.mimeType.split('/') : [];\r\n\r\n            if (mimeComponents.length == 2) {\r\n                if (!this._selectedMediaType) {\r\n                    let index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);\r\n\r\n                    if (index >= 0) {\r\n                        this._selectedMediaType = Media.supportedMediaTypes[index];\r\n                    }\r\n                }\r\n                if (mimeComponents[0] == this._selectedMediaType) {\r\n                    this._selectedSources.push(source);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private handlePlayButtonInvoke(event: UIEvent) : void\r\n    {\r\n        if (this.hostConfig.media.allowInlinePlayback) {\r\n            event.preventDefault();\r\n            event.cancelBubble = true;\r\n\r\n            if (this.renderedElement) {\r\n                let mediaPlayerElement = this.renderMediaPlayer();\r\n\r\n                this.renderedElement.innerHTML = \"\";\r\n                this.renderedElement.appendChild(mediaPlayerElement);\r\n\r\n                mediaPlayerElement.play();\r\n            }\r\n        }\r\n        else {\r\n            if (Media.onPlay) {\r\n                event.preventDefault();\r\n                event.cancelBubble = true;\r\n\r\n                Media.onPlay(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderPoster(): HTMLElement {\r\n        const playButtonArrowWidth = 12;\r\n        const playButtonArrowHeight = 15;\r\n\r\n        let posterRootElement = document.createElement(\"div\");\r\n        posterRootElement.className = this.hostConfig.makeCssClassName(\"ac-media-poster\");\r\n        posterRootElement.setAttribute(\"role\", \"contentinfo\");\r\n        posterRootElement.setAttribute(\"aria-label\", this.altText ? this.altText : \"Media content\");\r\n        posterRootElement.style.position = \"relative\";\r\n        posterRootElement.style.display = \"flex\";\r\n\r\n        let posterUrl = this.getPosterUrl();\r\n\r\n        if (posterUrl) {\r\n            let posterImageElement = document.createElement(\"img\");\r\n            posterImageElement.style.width = \"100%\";\r\n            posterImageElement.style.height = \"100%\";\r\n            posterImageElement.setAttribute(\"role\", \"presentation\");\r\n\r\n            posterImageElement.onerror = (e: Event) => {\r\n                if (posterImageElement.parentNode) {\r\n                    posterImageElement.parentNode.removeChild(posterImageElement);\r\n                }\r\n\r\n                posterRootElement.classList.add(\"empty\");\r\n                posterRootElement.style.minHeight = \"150px\";\r\n            }\r\n\r\n            posterImageElement.src = posterUrl;\r\n\r\n            posterRootElement.appendChild(posterImageElement);\r\n        }\r\n        else {\r\n            posterRootElement.classList.add(\"empty\");\r\n            posterRootElement.style.minHeight = \"150px\";\r\n        }\r\n\r\n        if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {\r\n            let playButtonOuterElement = document.createElement(\"div\");\r\n            playButtonOuterElement.tabIndex = 0;\r\n            playButtonOuterElement.setAttribute(\"role\", \"button\");\r\n            playButtonOuterElement.setAttribute(\"aria-label\", \"Play media\");\r\n            playButtonOuterElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton\");\r\n            playButtonOuterElement.style.display = \"flex\";\r\n            playButtonOuterElement.style.alignItems = \"center\";\r\n            playButtonOuterElement.style.justifyContent = \"center\";\r\n            playButtonOuterElement.onclick = (e) => {\r\n                this.handlePlayButtonInvoke(e);\r\n            }\r\n\r\n            playButtonOuterElement.onkeypress = (e: KeyboardEvent) => {\r\n                if (e.keyCode == 13 || e.keyCode == 32) { // space or enter\r\n                    this.handlePlayButtonInvoke(e);\r\n                }\r\n            }\r\n\r\n            let playButtonInnerElement = document.createElement(\"div\");\r\n            playButtonInnerElement.className = this.hostConfig.makeCssClassName(\"ac-media-playButton-arrow\");\r\n            playButtonInnerElement.style.width = playButtonArrowWidth + \"px\";\r\n            playButtonInnerElement.style.height = playButtonArrowHeight + \"px\";\r\n            playButtonInnerElement.style.borderTopWidth = (playButtonArrowHeight / 2) + \"px\";\r\n            playButtonInnerElement.style.borderBottomWidth = (playButtonArrowHeight / 2) + \"px\";\r\n            playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + \"px\";\r\n            playButtonInnerElement.style.borderRightWidth = \"0\";\r\n            playButtonInnerElement.style.borderStyle = \"solid\";\r\n            playButtonInnerElement.style.borderTopColor = \"transparent\";\r\n            playButtonInnerElement.style.borderRightColor = \"transparent\";\r\n            playButtonInnerElement.style.borderBottomColor = \"transparent\";\r\n            playButtonInnerElement.style.transform = \"translate(\" + (playButtonArrowWidth / 10) + \"px,0px)\";\r\n\r\n            playButtonOuterElement.appendChild(playButtonInnerElement);\r\n\r\n            let playButtonContainer = document.createElement(\"div\");\r\n            playButtonContainer.style.position = \"absolute\";\r\n            playButtonContainer.style.left = \"0\";\r\n            playButtonContainer.style.top = \"0\";\r\n            playButtonContainer.style.width = \"100%\";\r\n            playButtonContainer.style.height = \"100%\";\r\n            playButtonContainer.style.display = \"flex\";\r\n            playButtonContainer.style.justifyContent = \"center\";\r\n            playButtonContainer.style.alignItems = \"center\";\r\n\r\n            playButtonContainer.appendChild(playButtonOuterElement);\r\n            posterRootElement.appendChild(playButtonContainer);\r\n        }\r\n\r\n        return posterRootElement;\r\n    }\r\n\r\n    private renderMediaPlayer(): HTMLMediaElement {\r\n        let mediaElement: HTMLMediaElement;\r\n\r\n        if (this._selectedMediaType == \"video\") {\r\n            let videoPlayer = document.createElement(\"video\");\r\n\r\n            let posterUrl = this.getPosterUrl();\r\n\r\n            if (posterUrl) {\r\n                videoPlayer.poster = posterUrl;\r\n            }\r\n\r\n            mediaElement = videoPlayer;\r\n        }\r\n        else {\r\n            mediaElement = document.createElement(\"audio\");\r\n        }\r\n\r\n        mediaElement.setAttribute(\"webkit-playsinline\", \"\");\r\n        mediaElement.setAttribute(\"playsinline\", \"\");\r\n        mediaElement.autoplay = true;\r\n        mediaElement.controls = true;\r\n\r\n        if (Utils.isMobileOS()) {\r\n            mediaElement.muted = true;\r\n        }\r\n\r\n        mediaElement.preload = \"none\";\r\n        mediaElement.style.width = \"100%\";\r\n\r\n        for (let source of this.sources) {\r\n            let renderedSource = source.render();\r\n\r\n            Utils.appendChild(mediaElement, renderedSource);\r\n        }\r\n\r\n        return mediaElement;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element = <HTMLElement>document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-media\");\r\n\r\n        this.processSources();\r\n\r\n        element.appendChild(this.renderPoster());\r\n\r\n        return element;\r\n    }\r\n\r\n    static onPlay?: (sender: Media) => void;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Media\";\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        let posterUrl = this.getPosterUrl();\r\n\r\n        if (posterUrl) {\r\n            result.push({ url: posterUrl, mimeType: \"image\" });\r\n        }\r\n\r\n        for (let mediaSource of this.sources) {\r\n            if (mediaSource.isValid()) {\r\n                result.push(\r\n                    {\r\n                        url: <string>mediaSource.url,\r\n                        mimeType: <string>mediaSource.mimeType\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get selectedMediaType(): string | undefined {\r\n        return this._selectedMediaType;\r\n    }\r\n}\r\n\r\nexport abstract class Input extends CardElement implements IInput {\r\n    //#region Schema\r\n\r\n    static readonly labelProperty = new StringProperty(Versions.v1_3, \"label\", true);\r\n    static readonly isRequiredProperty = new BoolProperty(Versions.v1_3, \"isRequired\", false);\r\n    static readonly errorMessageProperty = new StringProperty(Versions.v1_3, \"errorMessage\", true);\r\n\r\n    @property(Input.labelProperty)\r\n    label?: string;\r\n\r\n    @property(Input.isRequiredProperty)\r\n    isRequired: boolean;\r\n\r\n    @property(Input.errorMessageProperty)\r\n    errorMessage?: string;\r\n\r\n    //#endregion\r\n\r\n    private _outerContainerElement: HTMLElement;\r\n    private _inputControlContainerElement: HTMLElement;\r\n    private _renderedErrorMessageElement?: HTMLElement;\r\n    private _renderedLabelElement?: HTMLElement;\r\n    private _renderedInputControlElement?: HTMLElement;\r\n\r\n    protected getAllLabelIds(): string[] {\r\n        let labelIds: string[] = [];\r\n\r\n        if (this._renderedLabelElement) {\r\n            labelIds.push(this._renderedLabelElement.id);\r\n        }\r\n\r\n        if (this._renderedErrorMessageElement) {\r\n            labelIds.push(this._renderedErrorMessageElement.id);\r\n        }\r\n\r\n        return labelIds;\r\n    }\r\n\r\n    protected updateInputControlAriaLabelledBy() {\r\n        if (this._renderedInputControlElement) {\r\n            let labelIds: string[] = this.getAllLabelIds();\r\n\r\n            if (this._renderedLabelElement) {\r\n                labelIds.push(this._renderedLabelElement.id);\r\n            }\r\n\r\n            if (this._renderedErrorMessageElement) {\r\n                labelIds.push(this._renderedErrorMessageElement.id);\r\n            }\r\n\r\n            if (labelIds.length > 0) {\r\n                this._renderedInputControlElement.setAttribute(\"aria-labelledby\", labelIds.join(\" \"));\r\n            }\r\n            else {\r\n                this._renderedInputControlElement.removeAttribute(\"aria-labelledby\");\r\n            }\r\n        }\r\n    }\r\n\r\n    protected get isNullable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get renderedInputControlElement(): HTMLElement | undefined {\r\n        return this._renderedInputControlElement;\r\n    }\r\n\r\n    protected get inputControlContainerElement(): HTMLElement {\r\n        return this._inputControlContainerElement;\r\n    }\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        let hostConfig = this.hostConfig;\r\n\r\n        this._outerContainerElement = document.createElement(\"div\");\r\n        this._outerContainerElement.style.display = \"flex\";\r\n        this._outerContainerElement.style.flexDirection = \"column\";\r\n\r\n        let renderedInputControlId = Utils.generateUniqueId();\r\n\r\n        if (this.label) {\r\n            let labelRichTextBlock = new RichTextBlock();\r\n            labelRichTextBlock.setParent(this);\r\n            labelRichTextBlock.forElementId = renderedInputControlId;\r\n\r\n            let labelInline = new TextRun(this.label);\r\n            labelRichTextBlock.addInline(labelInline);\r\n\r\n            if (this.isRequired) {\r\n                labelInline.init(hostConfig.inputs.label.requiredInputs);\r\n\r\n                let isRequiredCueInline = new TextRun(hostConfig.inputs.label.requiredInputs.suffix);\r\n                isRequiredCueInline.color = hostConfig.inputs.label.requiredInputs.suffixColor;\r\n                isRequiredCueInline.ariaHidden = true;\r\n\r\n                labelRichTextBlock.addInline(isRequiredCueInline);\r\n            }\r\n            else {\r\n                labelInline.init(hostConfig.inputs.label.optionalInputs);\r\n            }\r\n\r\n            this._renderedLabelElement = labelRichTextBlock.render();\r\n\r\n            if (this._renderedLabelElement) {\r\n                this._renderedLabelElement.id = Utils.generateUniqueId();\r\n                this._renderedLabelElement.style.marginBottom = hostConfig.getEffectiveSpacing(hostConfig.inputs.label.inputSpacing) + \"px\";\r\n\r\n                this._outerContainerElement.appendChild(this._renderedLabelElement);\r\n            }\r\n        }\r\n\r\n        this._inputControlContainerElement = document.createElement(\"div\");\r\n        this._inputControlContainerElement.className = hostConfig.makeCssClassName(\"ac-input-container\");\r\n        this._inputControlContainerElement.style.display = \"flex\";\r\n\r\n        this._renderedInputControlElement = this.internalRender();\r\n\r\n        if (this._renderedInputControlElement) {\r\n            this._renderedInputControlElement.id = renderedInputControlId;\r\n            this._renderedInputControlElement.style.minWidth = \"0px\";\r\n\r\n            if (this.isNullable && this.isRequired) {\r\n                this._renderedInputControlElement.setAttribute(\"aria-required\", \"true\");\r\n                this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName(\"ac-input-required\"));\r\n            }\r\n\r\n            this._inputControlContainerElement.appendChild(this._renderedInputControlElement);\r\n            this._outerContainerElement.appendChild(this._inputControlContainerElement);\r\n\r\n            this.updateInputControlAriaLabelledBy();\r\n\r\n            return this._outerContainerElement;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected valueChanged() {\r\n        if (this.isValid()) {\r\n            this.resetValidationFailureCue();\r\n        }\r\n\r\n        if (this.onValueChanged) {\r\n            this.onValueChanged(this);\r\n        }\r\n\r\n        raiseInputValueChangedEvent(this);\r\n    }\r\n\r\n    protected resetValidationFailureCue() {\r\n        if (this.renderedInputControlElement) {\r\n            this.renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\r\n\r\n            this.updateInputControlAriaLabelledBy();\r\n\r\n            if (this._renderedErrorMessageElement) {\r\n                this._outerContainerElement.removeChild(this._renderedErrorMessageElement);\r\n\r\n                this._renderedErrorMessageElement = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected showValidationErrorMessage() {\r\n        if (this.renderedElement && this.errorMessage && GlobalSettings.displayInputValidationErrors) {\r\n            let errorMessageTextBlock = new TextBlock();\r\n            errorMessageTextBlock.setParent(this);\r\n            errorMessageTextBlock.text = this.errorMessage;\r\n            errorMessageTextBlock.wrap = true;\r\n            errorMessageTextBlock.init(this.hostConfig.inputs.errorMessage);\r\n\r\n            this._renderedErrorMessageElement = errorMessageTextBlock.render();\r\n\r\n            if (this._renderedErrorMessageElement) {\r\n                this._renderedErrorMessageElement.id = Utils.generateUniqueId();\r\n                this._outerContainerElement.appendChild(this._renderedErrorMessageElement);\r\n\r\n                this.updateInputControlAriaLabelledBy();\r\n            }\r\n        }\r\n    }\r\n\r\n    onValueChanged: (sender: Input) => void;\r\n\r\n    abstract isSet(): boolean;\r\n\r\n    focus() {\r\n        if (this._renderedInputControlElement) {\r\n            this._renderedInputControlElement.focus();\r\n        }\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return true;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.id) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.inputsMustHaveUniqueId());\r\n        }\r\n\r\n        if (this.isRequired) {\r\n            if (!this.label) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.RequiredInputsShouldHaveLabel,\r\n                    \"Required inputs should have a label\");\r\n            }\r\n\r\n            if (!this.errorMessage) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.RequiredInputsShouldHaveErrorMessage,\r\n                    \"Required inputs should have an error message\");\r\n            }\r\n        }\r\n    }\r\n\r\n    validateValue(): boolean {\r\n        this.resetValidationFailureCue();\r\n\r\n        let result = this.isRequired ? this.isSet() && this.isValid() : this.isValid();\r\n\r\n        if (!result && this.renderedInputControlElement) {\r\n            this.renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName(\"ac-input-validation-failed\"));\r\n\r\n            this.showValidationErrorMessage();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return [ this ];\r\n    }\r\n\r\n    abstract get value(): any;\r\n\r\n    get isInteractive(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class TextInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly maxLengthProperty = new NumProperty(Versions.v1_0, \"maxLength\");\r\n    static readonly isMultilineProperty = new BoolProperty(Versions.v1_0, \"isMultiline\", false);\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly styleProperty = new EnumProperty(Versions.v1_0, \"style\", Enums.InputTextStyle, Enums.InputTextStyle.Text);\r\n    static readonly inlineActionProperty = new ActionProperty(Versions.v1_0, \"inlineAction\", [ \"Action.ShowCard\" ]);\r\n    static readonly regexProperty = new StringProperty(Versions.v1_3, \"regex\", true);\r\n\r\n    @property(TextInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(TextInput.maxLengthProperty)\r\n    maxLength?: number;\r\n\r\n    @property(TextInput.isMultilineProperty)\r\n    isMultiline: boolean = false;\r\n\r\n    @property(TextInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    @property(TextInput.styleProperty)\r\n    style: Enums.InputTextStyle = Enums.InputTextStyle.Text;\r\n\r\n    @property(TextInput.inlineActionProperty)\r\n    inlineAction?: Action;\r\n\r\n    @property(TextInput.regexProperty)\r\n    regex?: string;\r\n\r\n    //#endregion\r\n\r\n    private setupInput(input: HTMLInputElement | HTMLTextAreaElement) {\r\n        input.style.flex = \"1 1 auto\";\r\n        input.tabIndex = 0;\r\n\r\n        if (this.placeholder) {\r\n            input.placeholder = this.placeholder;\r\n            input.setAttribute(\"aria-label\", this.placeholder)\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            input.value = this.defaultValue;\r\n        }\r\n\r\n        if (this.maxLength && this.maxLength > 0) {\r\n            input.maxLength = this.maxLength;\r\n        }\r\n\r\n        input.oninput = () => { this.valueChanged(); }\r\n        input.onkeypress = (e: KeyboardEvent) => {\r\n            // Ctrl+Enter pressed\r\n            if (e.ctrlKey && e.code === \"Enter\" && this.inlineAction) {\r\n                this.inlineAction.execute();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let result: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n        if (this.isMultiline) {\r\n            result = document.createElement(\"textarea\");\r\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\", \"ac-multiline\");\r\n        }\r\n        else {\r\n            result = document.createElement(\"input\");\r\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\");\r\n            result.type = Enums.InputTextStyle[this.style].toLowerCase();\r\n        }\r\n\r\n        this.setupInput(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        let renderedInputControl = super.overrideInternalRender();\r\n\r\n        if (this.inlineAction) {\r\n            let button = document.createElement(\"button\");\r\n            button.className = this.hostConfig.makeCssClassName(\"ac-inlineActionButton\");\r\n            button.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n\r\n                if (this.inlineAction) {\r\n                    this.inlineAction.execute();\r\n                }\r\n            };\r\n\r\n            if (this.inlineAction.iconUrl) {\r\n                button.classList.add(\"iconOnly\");\r\n\r\n                let icon = document.createElement(\"img\");\r\n                icon.style.height = \"100%\";\r\n                icon.setAttribute(\"role\", \"presentation\");\r\n\r\n                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed\r\n                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant\r\n                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button\r\n                // after the image has loaded and been gicven its final size. The below trick also fixes that.\r\n                icon.style.display = \"none\";\r\n                icon.onload = () => {\r\n                    icon.style.removeProperty(\"display\");\r\n                };\r\n                icon.onerror = () => {\r\n                    button.removeChild(icon);\r\n                    button.classList.remove(\"iconOnly\");\r\n                    button.classList.add(\"textOnly\");\r\n                    button.textContent = this.inlineAction && this.inlineAction.title ? this.inlineAction.title : Strings.defaults.inlineActionTitle();\r\n                }\r\n\r\n                icon.src = this.inlineAction.iconUrl;\r\n\r\n                button.appendChild(icon);\r\n                button.title = this.inlineAction.title ? this.inlineAction.title : Strings.defaults.inlineActionTitle();\r\n            }\r\n            else {\r\n                button.classList.add(\"textOnly\");\r\n                button.textContent = this.inlineAction.title ? this.inlineAction.title : Strings.defaults.inlineActionTitle();\r\n            }\r\n\r\n            button.style.marginLeft = \"8px\";\r\n\r\n            this.inputControlContainerElement.appendChild(button);\r\n        }\r\n\r\n        return renderedInputControl;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Text\";\r\n    }\r\n\r\n    getActionById(id: string) {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result && this.inlineAction) {\r\n            result = this.inlineAction.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return true;\r\n        }\r\n\r\n        if (this.regex) {\r\n            return new RegExp(this.regex, \"g\").test(this.value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (this.renderedInputControlElement) {\r\n            if (this.isMultiline) {\r\n                return (<HTMLTextAreaElement>this.renderedInputControlElement).value;\r\n            }\r\n            else {\r\n                return (<HTMLInputElement>this.renderedInputControlElement).value;\r\n            }\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ToggleInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueOnProperty = new StringProperty(Versions.v1_0, \"valueOn\", true, undefined, \"true\", (sender: SerializableObject) => { return \"true\"; });\r\n    static readonly valueOffProperty = new StringProperty(Versions.v1_0, \"valueOff\", true, undefined, \"false\", (sender: SerializableObject) => { return \"false\"; });\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\r\n\r\n    @property(ToggleInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(ToggleInput.titleProperty)\r\n    title?: string;\r\n\r\n    @property(ToggleInput.valueOnProperty)\r\n    valueOn: string = \"true\";\r\n\r\n    @property(ToggleInput.valueOffProperty)\r\n    valueOff: string = \"false\";\r\n\r\n    @property(ToggleInput.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    private _checkboxInputElement: HTMLInputElement;\r\n    private _checkboxInputLabelElement: HTMLElement | undefined;\r\n\r\n    protected updateInputControlAriaLabelledBy() {\r\n        if (this._checkboxInputElement) {\r\n            let joinedLabelIds = this.getAllLabelIds().join(\" \");\r\n\r\n            if (this._checkboxInputLabelElement && this._checkboxInputLabelElement.id) {\r\n                joinedLabelIds += \" \" + this._checkboxInputLabelElement.id;\r\n            }\r\n\r\n            if (joinedLabelIds) {\r\n                this._checkboxInputElement.setAttribute(\"aria-labelledby\", joinedLabelIds);\r\n            }\r\n            else {\r\n                this._checkboxInputElement.removeAttribute(\"aria-labelledby\");\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-toggleInput\");\r\n        element.style.width = \"100%\";\r\n        element.style.display = \"flex\";\r\n        element.style.alignItems = \"center\";\r\n\r\n        this._checkboxInputElement = document.createElement(\"input\");\r\n        this._checkboxInputElement.id = Utils.generateUniqueId();\r\n        this._checkboxInputElement.type = \"checkbox\";\r\n        this._checkboxInputElement.style.display = \"inline-block\";\r\n        this._checkboxInputElement.style.verticalAlign = \"middle\";\r\n        this._checkboxInputElement.style.margin = \"0\";\r\n        this._checkboxInputElement.style.flex = \"0 0 auto\";\r\n\r\n        if (this.title) {\r\n            this._checkboxInputElement.setAttribute(\"aria-label\", this.title);\r\n        }\r\n\r\n        if (this.isRequired) {\r\n            this._checkboxInputElement.setAttribute(\"aria-required\", \"true\");\r\n        }\r\n\r\n        this._checkboxInputElement.tabIndex = 0;\r\n\r\n        if (this.defaultValue == this.valueOn) {\r\n            this._checkboxInputElement.checked = true;\r\n        }\r\n\r\n        this._checkboxInputElement.onchange = () => { this.valueChanged(); }\r\n\r\n        Utils.appendChild(element, this._checkboxInputElement);\r\n\r\n        if (this.title || this.isDesignMode()) {\r\n            let label = new TextBlock();\r\n            label.setParent(this);\r\n            label.forElementId = this._checkboxInputElement.id;\r\n            label.hostConfig = this.hostConfig;\r\n            label.text = !this.title ? this.getJsonTypeName() : this.title;\r\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\r\n            label.wrap = this.wrap;\r\n\r\n            this._checkboxInputLabelElement = label.render();\r\n\r\n            if (this._checkboxInputLabelElement) {\r\n                this._checkboxInputLabelElement.id = Utils.generateUniqueId();\r\n                this._checkboxInputLabelElement.style.display = \"inline-block\";\r\n                this._checkboxInputLabelElement.style.flex = \"1 1 auto\";\r\n                this._checkboxInputLabelElement.style.marginLeft = \"6px\";\r\n                this._checkboxInputLabelElement.style.verticalAlign = \"middle\";\r\n\r\n                let spacerElement = document.createElement(\"div\");\r\n                spacerElement.style.width = \"6px\";\r\n\r\n                Utils.appendChild(element, spacerElement);\r\n                Utils.appendChild(element, this._checkboxInputLabelElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected get isNullable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Toggle\";\r\n    }\r\n\r\n    focus() {\r\n        if (this._checkboxInputElement) {\r\n            this._checkboxInputElement.focus();\r\n        }\r\n    }\r\n\r\n    isSet(): boolean {\r\n        if (this.isRequired) {\r\n            return this.value === this.valueOn;\r\n        }\r\n\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (this._checkboxInputElement) {\r\n            return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Choice extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n\r\n    @property(Choice.titleProperty)\r\n    title?: string;\r\n\r\n    @property(Choice.valueProperty)\r\n    value?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Choice\";\r\n    }\r\n\r\n    constructor(title?: string, value?: string) {\r\n        super();\r\n\r\n        this.title = title;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class ChoiceSetInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly choicesProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"choices\", Choice);\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        [\r\n            { value: \"compact\" },\r\n            { value: \"expanded\" }\r\n        ],\r\n        \"compact\");\r\n    static readonly isMultiSelectProperty = new BoolProperty(Versions.v1_0, \"isMultiSelect\", false);\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\r\n\r\n    @property(ChoiceSetInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(ChoiceSetInput.styleProperty)\r\n    style?: \"compact\" | \"expanded\";\r\n\r\n    get isCompact(): boolean {\r\n        return this.style !== \"expanded\";\r\n    }\r\n\r\n    set isCompact(value: boolean) {\r\n        this.style = value ? undefined : \"expanded\";\r\n    }\r\n\r\n    @property(ChoiceSetInput.isMultiSelectProperty)\r\n    isMultiSelect: boolean = false;\r\n\r\n    @property(ChoiceSetInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    @property(ChoiceSetInput.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    @property(ChoiceSetInput.choicesProperty)\r\n    choices: Choice[] = [];\r\n\r\n    //#endregion\r\n\r\n    private static uniqueCategoryCounter = 0;\r\n\r\n    private static getUniqueCategoryName(): string {\r\n        let uniqueCategoryName = \"__ac-category\" + ChoiceSetInput.uniqueCategoryCounter;\r\n\r\n        ChoiceSetInput.uniqueCategoryCounter++;\r\n\r\n        return uniqueCategoryName;\r\n    }\r\n\r\n    private _uniqueCategoryName: string;\r\n    private _selectElement: HTMLSelectElement;\r\n    private _toggleInputs: HTMLInputElement[];\r\n    private _labels: Array<HTMLElement | undefined>;\r\n\r\n    private renderCompoundInput(cssClassName: string, type: \"checkbox\" | \"radio\", defaultValues: string[] | undefined): HTMLElement {\r\n        let element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", cssClassName);\r\n        element.style.width = \"100%\";\r\n\r\n        this._toggleInputs = [];\r\n        this._labels = [];\r\n\r\n        for (let choice of this.choices) {\r\n            let input = document.createElement(\"input\");\r\n            input.id = Utils.generateUniqueId();\r\n            input.type = type;\r\n            input.style.margin = \"0\";\r\n            input.style.display = \"inline-block\";\r\n            input.style.verticalAlign = \"middle\";\r\n            input.style.flex = \"0 0 auto\";\r\n            input.name = this.id ? this.id : this._uniqueCategoryName;\r\n\r\n            if (this.isRequired) {\r\n                input.setAttribute(\"aria-required\", \"true\");\r\n            }\r\n\r\n            if (choice.value) {\r\n                input.value = choice.value;\r\n            }\r\n\r\n            if (choice.title) {\r\n                input.setAttribute(\"aria-label\", choice.title);\r\n            }\r\n\r\n            if (defaultValues && choice.value) {\r\n                if (defaultValues.indexOf(choice.value) >= 0) {\r\n                    input.checked = true;\r\n                }\r\n            }\r\n\r\n            input.onchange = () => { this.valueChanged(); }\r\n\r\n            this._toggleInputs.push(input);\r\n\r\n            let compoundInput = document.createElement(\"div\");\r\n            compoundInput.style.display = \"flex\";\r\n            compoundInput.style.alignItems = \"center\";\r\n\r\n            Utils.appendChild(compoundInput, input);\r\n\r\n            let label = new TextBlock();\r\n            label.setParent(this);\r\n            label.forElementId = input.id;\r\n            label.hostConfig = this.hostConfig;\r\n            label.text = choice.title ? choice.title : \"Choice \" + this._toggleInputs.length;\r\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\r\n            label.wrap = this.wrap;\r\n\r\n            let labelElement = label.render();\r\n\r\n            this._labels.push(labelElement);\r\n\r\n            if (labelElement) {\r\n                labelElement.id = Utils.generateUniqueId();\r\n                labelElement.style.display = \"inline-block\";\r\n                labelElement.style.flex = \"1 1 auto\";\r\n                labelElement.style.marginLeft = \"6px\";\r\n                labelElement.style.verticalAlign = \"middle\";\r\n\r\n                let spacerElement = document.createElement(\"div\");\r\n                spacerElement.style.width = \"6px\";\r\n\r\n                Utils.appendChild(compoundInput, spacerElement);\r\n                Utils.appendChild(compoundInput, labelElement);\r\n            }\r\n\r\n            Utils.appendChild(element, compoundInput);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected updateInputControlAriaLabelledBy() {\r\n        if (this.isMultiSelect || this.style === \"expanded\") {\r\n            let labelIds: string[] = this.getAllLabelIds();\r\n\r\n            for (let i = 0; i < this._toggleInputs.length; i++) {\r\n                let joinedLabelIds = labelIds.join(\" \");\r\n                let label = this._labels[i];\r\n\r\n                if (label && label.id) {\r\n                    joinedLabelIds += \" \" + label.id;\r\n                }\r\n\r\n                if (joinedLabelIds) {\r\n                    this._toggleInputs[i].setAttribute(\"aria-labelledby\", joinedLabelIds);\r\n                }\r\n                else {\r\n                    this._toggleInputs[i].removeAttribute(\"aria-labelledby\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            super.updateInputControlAriaLabelledBy();\r\n        }\r\n    }\r\n\r\n    // Make sure `aria-current` is applied to the currently-selected item\r\n    protected internalApplyAriaCurrent(): void {\r\n        const options = this._selectElement.options;\r\n\r\n        if (options) {\r\n            for (let i = 0; i < options.length; i++) {\r\n                if (options[i].selected) {\r\n                    options[i].setAttribute(\"aria-current\", \"true\");\r\n                }\r\n                else {\r\n                    options[i].removeAttribute(\"aria-current\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();\r\n\r\n        if (this.isMultiSelect) {\r\n            // Render as a list of toggle inputs\r\n            return this.renderCompoundInput(\r\n                \"ac-choiceSetInput-multiSelect\",\r\n                \"checkbox\",\r\n                this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : undefined);\r\n        }\r\n        else {\r\n            if (this.style === \"expanded\") {\r\n                // Render as a series of radio buttons\r\n                return this.renderCompoundInput(\r\n                    \"ac-choiceSetInput-expanded\",\r\n                    \"radio\",\r\n                    this.defaultValue ? [ this.defaultValue ] : undefined);\r\n            }\r\n            else {\r\n                // Render as a combo box\r\n                this._selectElement = document.createElement(\"select\");\r\n                this._selectElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-multichoiceInput\", \"ac-choiceSetInput-compact\");\r\n                this._selectElement.style.width = \"100%\";\r\n\r\n                let option = document.createElement(\"option\");\r\n                option.selected = true;\r\n                option.disabled = true;\r\n                option.hidden = true;\r\n                option.value = \"\";\r\n\r\n                if (this.placeholder) {\r\n                    option.text = this.placeholder;\r\n                }\r\n\r\n                Utils.appendChild(this._selectElement, option);\r\n\r\n                for (let choice of this.choices) {\r\n                    let option = document.createElement(\"option\");\r\n                    option.value = <string>choice.value;\r\n                    option.text = <string>choice.title;\r\n                    option.setAttribute(\"aria-label\", <string>choice.title);\r\n\r\n                    if (choice.value == this.defaultValue) {\r\n                        option.selected = true;\r\n                    }\r\n\r\n                    Utils.appendChild(this._selectElement, option);\r\n                }\r\n\r\n                this._selectElement.onchange = () => {\r\n                    this.internalApplyAriaCurrent();\r\n                    this.valueChanged();\r\n                }\r\n\r\n                this.internalApplyAriaCurrent();\r\n\r\n                return this._selectElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.ChoiceSet\";\r\n    }\r\n\r\n    focus() {\r\n        if (this.isMultiSelect || this.style === \"expanded\") {\r\n            if (this._toggleInputs.length > 0) {\r\n                this._toggleInputs[0].focus();\r\n            }\r\n        }\r\n        else {\r\n            super.focus();\r\n        }\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this.choices.length == 0) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.CollectionCantBeEmpty,\r\n                Strings.errors.choiceSetMustHaveAtLeastOneChoice());\r\n        }\r\n\r\n        for (let choice of this.choices) {\r\n            if (!choice.title || !choice.value) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.PropertyCantBeNull,\r\n                    Strings.errors.choiceSetChoicesMustHaveTitleAndValue());\r\n            }\r\n        }\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (!this.isMultiSelect) {\r\n            if (this.isCompact) {\r\n                if (this._selectElement) {\r\n                    return this._selectElement.selectedIndex > 0 ? this._selectElement.value : undefined;\r\n                }\r\n\r\n                return undefined;\r\n            }\r\n            else {\r\n                if (!this._toggleInputs || this._toggleInputs.length == 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                for (let toggleInput of this._toggleInputs) {\r\n                    if (toggleInput.checked) {\r\n                        return toggleInput.value;\r\n                    }\r\n                }\r\n\r\n                return undefined;\r\n            }\r\n        }\r\n        else {\r\n            if (!this._toggleInputs || this._toggleInputs.length == 0) {\r\n                return undefined;\r\n            }\r\n\r\n            let result: string = \"\";\r\n\r\n            for (let toggleInput of this._toggleInputs) {\r\n                if (toggleInput.checked) {\r\n                    if (result != \"\") {\r\n                        result += this.hostConfig.choiceSetInputValueSeparator;\r\n                    }\r\n\r\n                    result += toggleInput.value;\r\n                }\r\n            }\r\n\r\n            return result ? result : undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class NumberInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new NumProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new NumProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new NumProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(NumberInput.valueProperty)\r\n    defaultValue?: number;\r\n\r\n    @property(NumberInput.minProperty)\r\n    min?: number;\r\n\r\n    @property(NumberInput.maxProperty)\r\n    max?: number;\r\n\r\n    @property(NumberInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _numberInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._numberInputElement = document.createElement(\"input\");\r\n        this._numberInputElement.setAttribute(\"type\", \"number\");\r\n\r\n        if (this.min) {\r\n            this._numberInputElement.setAttribute(\"min\", this.min.toString());\r\n        }\r\n\r\n        if (this.max) {\r\n            this._numberInputElement.setAttribute(\"max\", this.max.toString());\r\n        }\r\n\r\n        this._numberInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-numberInput\");\r\n        this._numberInputElement.style.width = \"100%\";\r\n        this._numberInputElement.tabIndex = 0;\r\n\r\n        if (this.defaultValue !== undefined) {\r\n            this._numberInputElement.valueAsNumber = this.defaultValue;\r\n        }\r\n\r\n        if (this.placeholder) {\r\n            this._numberInputElement.placeholder = this.placeholder;\r\n            this._numberInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._numberInputElement.oninput = () => { this.valueChanged(); }\r\n\r\n        return this._numberInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Number\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value !== undefined && !isNaN(this.value);\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return !this.isRequired;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        if (this.min !== undefined) {\r\n            result = result && (this.value >= this.min);\r\n        }\r\n\r\n        if (this.max !== undefined) {\r\n            result = result && (this.value <= this.max);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get value(): number | undefined {\r\n        return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;\r\n    }\r\n}\r\n\r\nexport class DateInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new StringProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new StringProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(DateInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(DateInput.minProperty)\r\n    min?: string;\r\n\r\n    @property(DateInput.maxProperty)\r\n    max?: string;\r\n\r\n    @property(DateInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _dateInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._dateInputElement = document.createElement(\"input\");\r\n        this._dateInputElement.setAttribute(\"type\", \"date\");\r\n\r\n        if (this.min) {\r\n            this._dateInputElement.setAttribute(\"min\", this.min);\r\n        }\r\n\r\n        if (this.max) {\r\n            this._dateInputElement.setAttribute(\"max\", this.max);\r\n        }\r\n\r\n        if (this.placeholder) {\r\n            this._dateInputElement.placeholder = this.placeholder;\r\n            this._dateInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._dateInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-dateInput\");\r\n        this._dateInputElement.style.width = \"100%\";\r\n\r\n        this._dateInputElement.oninput = () => { this.valueChanged(); }\r\n\r\n        if (this.defaultValue) {\r\n            this._dateInputElement.value = this.defaultValue;\r\n        }\r\n\r\n        return this._dateInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Date\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return !this.isRequired;\r\n        }\r\n\r\n        let valueAsDate = new Date(this.value);\r\n\r\n        let result = true;\r\n\r\n        if (this.min) {\r\n            let minDate = new Date(this.min);\r\n\r\n            result = result && (valueAsDate >= minDate);\r\n        }\r\n\r\n        if (this.max) {\r\n            let maxDate = new Date(this.max);\r\n\r\n            result = result && (valueAsDate <= maxDate);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._dateInputElement ? this._dateInputElement.value : undefined;\r\n    }\r\n}\r\n\r\nexport class TimeProperty extends CustomProperty<string | undefined> {\r\n    constructor(readonly targetVersion: Version, readonly name: string) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n                let value = source[property.name];\r\n\r\n                if (typeof value === \"string\" && value && /^[0-9]{2}:[0-9]{2}$/.test(value)) {\r\n                    return value;\r\n                }\r\n\r\n                return undefined;\r\n            },\r\n            (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) => {\r\n                context.serializeValue(target, property.name, value);\r\n            });\r\n    }\r\n}\r\n\r\nexport class TimeInput extends Input {\r\n    private static convertTimeStringToDate(timeString: string): Date {\r\n        return new Date(\"1973-09-04T\" + timeString + \":00Z\");\r\n    }\r\n\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new TimeProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new TimeProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new TimeProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(TimeInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(TimeInput.minProperty)\r\n    min?: string;\r\n\r\n    @property(TimeInput.maxProperty)\r\n    max?: string;\r\n\r\n    @property(TimeInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _timeInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._timeInputElement = document.createElement(\"input\");\r\n        this._timeInputElement.setAttribute(\"type\", \"time\");\r\n        this._timeInputElement.setAttribute(\"min\", <string>this.min);\r\n        this._timeInputElement.setAttribute(\"max\", <string>this.max);\r\n        this._timeInputElement.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-timeInput\");\r\n        this._timeInputElement.style.width = \"100%\";\r\n        this._timeInputElement.oninput = () => { this.valueChanged(); }\r\n\r\n        if (this.placeholder) {\r\n            this._timeInputElement.placeholder = this.placeholder;\r\n            this._timeInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            this._timeInputElement.value = this.defaultValue;\r\n        }\r\n\r\n        return this._timeInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Time\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return !this.isRequired;\r\n        }\r\n\r\n        let valueAsDate = TimeInput.convertTimeStringToDate(this.value);\r\n\r\n        let result = true;\r\n\r\n        if (this.min) {\r\n            let minDate = TimeInput.convertTimeStringToDate(this.min);\r\n\r\n            result = result && (valueAsDate >= minDate);\r\n        }\r\n\r\n        if (this.max) {\r\n            let maxDate = TimeInput.convertTimeStringToDate(this.max);\r\n\r\n            result = result && (valueAsDate <= maxDate);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._timeInputElement ? this._timeInputElement.value : undefined;\r\n    }\r\n}\r\n\r\nconst enum ActionButtonState {\r\n    Normal,\r\n    Expanded,\r\n    Subdued\r\n}\r\n\r\nclass ActionButton {\r\n    private _parentContainerStyle: string;\r\n    private _state: ActionButtonState = ActionButtonState.Normal;\r\n\r\n    private updateCssStyle() {\r\n        if (this.action.parent && this.action.renderedElement) {\r\n            let hostConfig = this.action.parent.hostConfig;\r\n\r\n            this.action.renderedElement.className = hostConfig.makeCssClassName(\"ac-pushButton\");\r\n\r\n            if (this._parentContainerStyle) {\r\n                this.action.renderedElement.classList.add(\"style-\" + this._parentContainerStyle);\r\n            }\r\n\r\n            this.action.updateActionButtonCssStyle(this.action.renderedElement, this._state);\r\n\r\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"expanded\"));\r\n            this.action.renderedElement.classList.remove(hostConfig.makeCssClassName(\"subdued\"));\r\n\r\n            switch (this._state) {\r\n                case ActionButtonState.Expanded:\r\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"expanded\"));\r\n                    break;\r\n                case ActionButtonState.Subdued:\r\n                    this.action.renderedElement.classList.add(hostConfig.makeCssClassName(\"subdued\"));\r\n                    break;\r\n            }\r\n\r\n            if (this.action.style) {\r\n                if (this.action.style === Enums.ActionStyle.Positive) {\r\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"primary\", \"style-positive\"));\r\n                }\r\n                else {\r\n                    this.action.renderedElement.classList.add(...hostConfig.makeCssClassNames(\"style-\" + this.action.style.toLowerCase()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    readonly action: Action;\r\n\r\n    constructor(action: Action, parentContainerStyle: string) {\r\n        this.action = action;\r\n        this._parentContainerStyle = parentContainerStyle;\r\n    }\r\n\r\n    onClick?: (actionButton: ActionButton) => void;\r\n\r\n    render() {\r\n        this.action.render();\r\n\r\n        if (this.action.renderedElement) {\r\n            this.action.renderedElement.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n\r\n                this.click();\r\n            };\r\n\r\n            this.updateCssStyle();\r\n        }\r\n    }\r\n\r\n    click() {\r\n        if (this.onClick !== undefined) {\r\n            this.onClick(this);\r\n        }\r\n    }\r\n\r\n    get state(): ActionButtonState {\r\n        return this._state;\r\n    }\r\n\r\n    set state(value: ActionButtonState) {\r\n        this._state = value;\r\n\r\n        this.updateCssStyle();\r\n    }\r\n}\r\n\r\nexport type ActionType = { new(): Action };\r\n\r\nexport abstract class Action extends CardObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly iconUrlProperty = new StringProperty(Versions.v1_1, \"iconUrl\");\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_2,\r\n        \"style\",\r\n        [\r\n            { value: Enums.ActionStyle.Default },\r\n            { value: Enums.ActionStyle.Positive },\r\n            { value: Enums.ActionStyle.Destructive }\r\n        ],\r\n        Enums.ActionStyle.Default);\r\n    // TODO: Revise this when finalizing input validation\r\n    static readonly ignoreInputValidationProperty = new BoolProperty(Versions.v1_3, \"ignoreInputValidation\", false);\r\n\r\n    @property(Action.titleProperty)\r\n    title?: string;\r\n\r\n    @property(Action.iconUrlProperty)\r\n    iconUrl?: string;\r\n\r\n    @property(Action.styleProperty)\r\n    style: string = Enums.ActionStyle.Default;\r\n\r\n    //#endregion\r\n\r\n    private _actionCollection?: ActionCollection; // hold the reference to its action collection\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SerializationContext();\r\n    }\r\n\r\n    protected addCssClasses(element: HTMLElement) {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    protected internalGetReferencedInputs(): Dictionary<Input> {\r\n        return {};\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    protected internalValidateInputs(referencedInputs: Dictionary<Input> | undefined): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        if (!this.ignoreInputValidation && referencedInputs) {\r\n            for (let key of Object.keys(referencedInputs)) {\r\n                let input = referencedInputs[key];\r\n\r\n                if (!input.validateValue()) {\r\n                    result.push(input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return context.actionRegistry.findByName(this.getJsonTypeName()) !== undefined;\r\n    }\r\n\r\n    protected raiseExecuteActionEvent() {\r\n        if (this.onExecute) {\r\n            this.onExecute(this);\r\n        }\r\n\r\n        raiseExecuteActionEvent(this);\r\n    }\r\n\r\n    onExecute: (sender: Action) => void;\r\n\r\n    getHref(): string | undefined {\r\n        return \"\";\r\n    }\r\n\r\n    getAriaRole(): string {\r\n        return \"button\";\r\n    }\r\n\r\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    parse(source: any, context?: SerializationContext) {\r\n        return super.parse(source, context ? context : new SerializationContext());\r\n    }\r\n\r\n    render(baseCssClass: string = \"ac-pushButton\") {\r\n        // Cache hostConfig for perf\r\n        let hostConfig = this.hostConfig;\r\n\r\n        let buttonElement = document.createElement(\"button\");\r\n\r\n        this.addCssClasses(buttonElement);\r\n\r\n        if (this.title) {\r\n            buttonElement.setAttribute(\"aria-label\", this.title);\r\n        }\r\n\r\n        buttonElement.type = \"button\";\r\n        buttonElement.style.display = \"flex\";\r\n        buttonElement.style.alignItems = \"center\";\r\n        buttonElement.style.justifyContent = \"center\";\r\n\r\n        buttonElement.setAttribute(\"role\", this.getAriaRole());\r\n\r\n        let titleElement = document.createElement(\"div\");\r\n        titleElement.style.overflow = \"hidden\";\r\n        titleElement.style.textOverflow = \"ellipsis\";\r\n\r\n        if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {\r\n            titleElement.style.whiteSpace = \"nowrap\";\r\n        }\r\n\r\n        if (this.title) {\r\n            titleElement.innerText = this.title;\r\n        }\r\n\r\n        if (!this.iconUrl) {\r\n            buttonElement.classList.add(\"noIcon\");\r\n\r\n            buttonElement.appendChild(titleElement);\r\n        }\r\n        else {\r\n            let iconElement = document.createElement(\"img\");\r\n            iconElement.src = this.iconUrl;\r\n            iconElement.style.width = hostConfig.actions.iconSize + \"px\";\r\n            iconElement.style.height = hostConfig.actions.iconSize + \"px\";\r\n            iconElement.style.flex = \"0 0 auto\";\r\n\r\n            if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {\r\n                buttonElement.classList.add(\"iconAbove\");\r\n                buttonElement.style.flexDirection = \"column\";\r\n\r\n                if (this.title) {\r\n                    iconElement.style.marginBottom = \"6px\";\r\n                }\r\n            }\r\n            else {\r\n                buttonElement.classList.add(\"iconLeft\");\r\n\r\n                iconElement.style.maxHeight = \"100%\";\r\n\r\n                if (this.title) {\r\n                    iconElement.style.marginRight = \"6px\";\r\n                }\r\n            }\r\n\r\n            buttonElement.appendChild(iconElement);\r\n            buttonElement.appendChild(titleElement);\r\n        }\r\n\r\n        this._renderedElement = buttonElement;\r\n    }\r\n\r\n    execute() {\r\n        if (this._actionCollection) {\r\n            this._actionCollection.actionExecuted(this);\r\n        }\r\n\r\n        this.raiseExecuteActionEvent();\r\n    }\r\n\r\n    prepareForExecution(): boolean {\r\n        let referencedInputs = this.getReferencedInputs();\r\n        let invalidInputs = this.internalValidateInputs(referencedInputs);\r\n\r\n        if (invalidInputs.length > 0) {\r\n            invalidInputs[0].focus();\r\n\r\n            return false;\r\n        }\r\n\r\n        this.internalPrepareForExecution(referencedInputs);\r\n\r\n        return true;\r\n    };\r\n\r\n    remove(): boolean {\r\n        if (this._actionCollection) {\r\n            return this._actionCollection.removeAction(this);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this.iconUrl ? [{ url: this.iconUrl, mimeType: \"image\" }] : [];\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        return this.id === id ? this : undefined;\r\n    }\r\n\r\n    getReferencedInputs(): Dictionary<Input> | undefined {\r\n        return this.internalGetReferencedInputs();\r\n    }\r\n\r\n    /**\r\n     * Validates the inputs associated with this action.\r\n     *\r\n     * @returns A list of inputs that failed validation, or an empty array if no input failed validation.\r\n     */\r\n    validateInputs(): Input[] {\r\n        return this.internalValidateInputs(this.getReferencedInputs());\r\n    }\r\n\r\n    get isPrimary(): boolean {\r\n        return this.style == Enums.ActionStyle.Positive;\r\n    }\r\n\r\n    set isPrimary(value: boolean) {\r\n        if (value) {\r\n            this.style = Enums.ActionStyle.Positive;\r\n        }\r\n        else {\r\n            if (this.style == Enums.ActionStyle.Positive) {\r\n                this.style = Enums.ActionStyle.Default;\r\n            }\r\n        }\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        return this.parent ? this.parent.hostConfig : defaultHostConfig;\r\n    }\r\n\r\n    get parent(): CardElement | undefined {\r\n        return <CardElement>this._parent;\r\n    }\r\n}\r\n\r\nexport class SubmitAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly dataProperty = new PropertyDefinition(Versions.v1_0, \"data\");\r\n\r\n    @property(SubmitAction.dataProperty)\r\n    private _originalData?: PropertyBag;\r\n\r\n    @property(Action.ignoreInputValidationProperty)\r\n    private _ignoreInputValidation: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Submit\" = \"Action.Submit\";\r\n\r\n    private _isPrepared: boolean = false;\r\n    private _processedData?: PropertyBag;\r\n\r\n    protected internalGetReferencedInputs(): Dictionary<Input> {\r\n        let result: Dictionary<Input> = {};\r\n        let current: CardElement | undefined = this.parent;\r\n        let inputs: Input[] = [];\r\n\r\n        while (current) {\r\n            inputs = inputs.concat(current.getAllInputs(false));\r\n\r\n            current = current.parent;\r\n        }\r\n\r\n        for (let input of inputs) {\r\n            if (input.id) {\r\n                result[input.id] = input;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        if (this._originalData) {\r\n            this._processedData = JSON.parse(JSON.stringify(this._originalData));\r\n        }\r\n        else {\r\n            this._processedData = {};\r\n        }\r\n\r\n        if (this._processedData && inputs) {\r\n            for (let key of Object.keys(inputs)) {\r\n                let input = inputs[key];\r\n\r\n                if (input.id) {\r\n                    this._processedData[input.id] = input.value;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isPrepared = true;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return SubmitAction.JsonTypeName;\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return this._ignoreInputValidation;\r\n    }\r\n\r\n    set ignoreInputValidation(value: boolean) {\r\n        this._ignoreInputValidation = value;\r\n    }\r\n\r\n    get data(): object | undefined {\r\n        return this._isPrepared ? this._processedData : this._originalData;\r\n    }\r\n\r\n    set data(value: object | undefined) {\r\n        this._originalData = value;\r\n        this._isPrepared = false;\r\n    }\r\n}\r\n\r\nexport class OpenUrlAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n\r\n    @property(OpenUrlAction.urlProperty)\r\n    url?: string;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.OpenUrl\" = \"Action.OpenUrl\";\r\n\r\n    getJsonTypeName(): string {\r\n        return OpenUrlAction.JsonTypeName;\r\n    }\r\n\r\n    getAriaRole() : string {\r\n        return \"link\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.url) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"url\"));\r\n        }\r\n    }\r\n\r\n    getHref(): string | undefined {\r\n        return this.url;\r\n    }\r\n}\r\n\r\nexport class ToggleVisibilityAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly targetElementsProperty = new CustomProperty<PropertyBag>(\r\n        Versions.v1_2,\r\n        \"targetElements\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            let result: PropertyBag = {}\r\n\r\n            if (Array.isArray(source[property.name])) {\r\n                for (let item of source[property.name]) {\r\n                    if (typeof item === \"string\") {\r\n                        result[item] = undefined;\r\n                    }\r\n                    else if (typeof item === \"object\") {\r\n                        let elementId = item[\"elementId\"];\r\n\r\n                        if (typeof elementId === \"string\") {\r\n                            result[elementId] = Utils.parseBool(item[\"isVisible\"]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: PropertyBag, context: BaseSerializationContext) => {\r\n            let targetElements: any[] = [];\r\n\r\n            for (let id of Object.keys(value)) {\r\n                if (typeof value[id] === \"boolean\") {\r\n                    targetElements.push(\r\n                        {\r\n                            elementId: id,\r\n                            isVisible: value[id]\r\n                        }\r\n                    );\r\n                }\r\n                else {\r\n                    targetElements.push(id);\r\n                }\r\n            }\r\n\r\n            context.serializeArray(target, property.name, targetElements);\r\n        },\r\n        {},\r\n        (sender: SerializableObject) => { return {}; });\r\n\r\n    @property(ToggleVisibilityAction.targetElementsProperty)\r\n    targetElements: { [key: string]: any } = {};\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.ToggleVisibility\" = \"Action.ToggleVisibility\";\r\n\r\n    private updateAriaControlsAttribute() {\r\n        // apply aria labels to make it clear which elements this action will toggle\r\n        if (this.targetElements) {\r\n            const elementIds = Object.keys(this.targetElements);\r\n\r\n            if (this._renderedElement) {\r\n                if (elementIds.length > 0) {\r\n                    this._renderedElement.setAttribute(\"aria-controls\", elementIds.join(\" \"));\r\n                }\r\n                else {\r\n                    this._renderedElement.removeAttribute(\"aria-controls\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return ToggleVisibilityAction.JsonTypeName;\r\n    }\r\n\r\n    render(baseCssClass: string = \"ac-pushButton\") {\r\n        super.render(baseCssClass);\r\n        this.updateAriaControlsAttribute();\r\n    }\r\n\r\n    execute() {\r\n        if (this.parent) {\r\n            for (let elementId of Object.keys(this.targetElements)) {\r\n                let targetElement = this.parent.getRootElement().getElementById(elementId);\r\n\r\n                if (targetElement) {\r\n                    if (typeof this.targetElements[elementId] === \"boolean\") {\r\n                        targetElement.isVisible = this.targetElements[elementId];\r\n                    }\r\n                    else {\r\n                        targetElement.isVisible = !targetElement.isVisible;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addTargetElement(elementId: string, isVisible: boolean | undefined = undefined) {\r\n        this.targetElements[elementId] = isVisible;\r\n        this.updateAriaControlsAttribute();\r\n    }\r\n\r\n    removeTargetElement(elementId: string) {\r\n        delete this.targetElements[elementId];\r\n        this.updateAriaControlsAttribute();\r\n    }\r\n}\r\n\r\nclass StringWithSubstitutionProperty extends PropertyDefinition  {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): StringWithSubstitutions {\r\n        let result = new StringWithSubstitutions();\r\n        result.set(Utils.parseString(source[this.name]));\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(sender: SerializableObject, target: PropertyBag, value: StringWithSubstitutions, context: BaseSerializationContext): void {\r\n        context.serializeValue(target, this.name, value.getOriginal());\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string) {\r\n        super(targetVersion, name, undefined, () => { return new StringWithSubstitutions(); });\r\n    }\r\n}\r\n\r\nexport class HttpHeader extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly nameProperty = new StringProperty(Versions.v1_0, \"name\");\r\n    static readonly valueProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"value\");\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"HttpHeader\";\r\n    }\r\n\r\n    @property(HttpHeader.nameProperty)\r\n    name: string;\r\n\r\n    @property(HttpHeader.valueProperty)\r\n    private _value: StringWithSubstitutions;\r\n\r\n    //#endregion\r\n\r\n    constructor(name: string = \"\", value: string = \"\") {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n\r\n    getReferencedInputs(inputs: Input[], referencedInputs: Dictionary<Input>) {\r\n        this._value.getReferencedInputs(inputs, referencedInputs);\r\n    }\r\n\r\n    prepareForExecution(inputs: Dictionary<Input>) {\r\n        this._value.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._value.get();\r\n    }\r\n\r\n    set value(newValue: string | undefined) {\r\n        this._value.set(newValue);\r\n    }\r\n}\r\n\r\nexport class HttpAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"url\");\r\n    static readonly bodyProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"body\");\r\n    static readonly methodProperty = new StringProperty(Versions.v1_0, \"method\");\r\n    static readonly headersProperty = new SerializableObjectCollectionProperty(Versions.v1_0, \"headers\", HttpHeader);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.add(Action.ignoreInputValidationProperty);\r\n    }\r\n\r\n    @property(HttpAction.urlProperty)\r\n    private _url: StringWithSubstitutions;\r\n\r\n    @property(HttpAction.bodyProperty)\r\n    private _body: StringWithSubstitutions;\r\n\r\n    @property(HttpAction.methodProperty)\r\n    method?: string;\r\n\r\n    @property(HttpAction.headersProperty)\r\n    headers: HttpHeader[];\r\n\r\n    @property(Action.ignoreInputValidationProperty)\r\n    private _ignoreInputValidation: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Http\" = \"Action.Http\";\r\n\r\n    protected internalGetReferencedInputs(): Dictionary<Input> {\r\n        let allInputs = this.parent ? this.parent.getRootElement().getAllInputs() : [];\r\n        let result: Dictionary<Input> = {};\r\n\r\n        this._url.getReferencedInputs(allInputs, result);\r\n\r\n        for (let header of this.headers) {\r\n            header.getReferencedInputs(allInputs, result);\r\n        }\r\n\r\n        this._body.getReferencedInputs(allInputs, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        if (inputs) {\r\n            this._url.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\r\n\r\n            let contentType = ContentTypes.applicationJson;\r\n\r\n            for (let header of this.headers) {\r\n                header.prepareForExecution(inputs);\r\n\r\n                if (header.name && header.name.toLowerCase() == \"content-type\") {\r\n                    contentType = <string>header.value;\r\n                }\r\n            }\r\n\r\n            this._body.substituteInputValues(inputs, contentType);\r\n        }\r\n    };\r\n\r\n    getJsonTypeName(): string {\r\n        return HttpAction.JsonTypeName;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.url) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"url\"));\r\n        }\r\n\r\n        if (this.headers.length > 0) {\r\n            for (let header of this.headers) {\r\n                if (!header.name) {\r\n                    context.addFailure(\r\n                        this,\r\n                        Enums.ValidationEvent.PropertyCantBeNull,\r\n                        Strings.errors.actionHttpHeadersMustHaveNameAndValue());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return this._ignoreInputValidation;\r\n    }\r\n\r\n    set ignoreInputValidation(value: boolean) {\r\n        this._ignoreInputValidation = value;\r\n    }\r\n\r\n    get url(): string | undefined {\r\n        return this._url.get();\r\n    }\r\n\r\n    set url(value: string | undefined) {\r\n        this._url.set(value);\r\n    }\r\n\r\n    get body(): string | undefined {\r\n        return this._body.get();\r\n    }\r\n\r\n    set body(value: string | undefined) {\r\n        this._body.set(value);\r\n    }\r\n}\r\n\r\nexport class ShowCardAction extends Action {\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.ShowCard\" = \"Action.ShowCard\";\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        let jsonCard = source[\"card\"];\r\n\r\n        if (jsonCard) {\r\n            this.card.parse(jsonCard, context);\r\n        }\r\n        else {\r\n            context.logParseEvent(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.showCardMustHaveCard());\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        if (this.card) {\r\n            context.serializeValue(target, \"card\", this.card.toJSON(context));\r\n        }\r\n    }\r\n\r\n    protected addCssClasses(element: HTMLElement) {\r\n        super.addCssClasses(element);\r\n\r\n        if (this.parent) {\r\n            element.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\r\n        }\r\n    }\r\n\r\n    protected raiseExecuteActionEvent() {\r\n        if (this.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {\r\n            // Only raise the event in Popup mode.\r\n            super.raiseExecuteActionEvent();\r\n        }\r\n    }\r\n\r\n    readonly card: AdaptiveCard = new InlineAdaptiveCard();\r\n\r\n    getJsonTypeName(): string {\r\n        return ShowCardAction.JsonTypeName;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        this.card.internalValidateProperties(context);\r\n    }\r\n\r\n    updateActionButtonCssStyle(actionButtonElement: HTMLElement, buttonState: ActionButtonState = ActionButtonState.Normal): void {\r\n        super.updateActionButtonCssStyle(actionButtonElement);\r\n\r\n        if (this.parent) {\r\n            actionButtonElement.classList.add(this.parent.hostConfig.makeCssClassName(\"expandable\"));\r\n            actionButtonElement.setAttribute(\"aria-expanded\", (buttonState === ActionButtonState.Expanded).toString());\r\n        }\r\n    }\r\n\r\n    setParent(value: CardElement) {\r\n        super.setParent(value);\r\n\r\n        this.card.setParent(value);\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return this.card.getAllInputs(processActions);\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return super.getResourceInformation().concat(this.card.getResourceInformation());\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result) {\r\n            result = this.card.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nclass ActionCollection {\r\n    private _owner: CardElement;\r\n    private _actionCardContainer: HTMLDivElement;\r\n    private _expandedAction?: ShowCardAction;\r\n    private _renderedActionCount: number = 0;\r\n    private _actionCard?: HTMLElement;\r\n\r\n    private isActionAllowed(action: Action): boolean {\r\n        let forbiddenTypes = this._owner.getForbiddenActionTypes();\r\n\r\n        if (forbiddenTypes) {\r\n            for (let forbiddenType of forbiddenTypes) {\r\n                if (action.constructor === forbiddenType) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private refreshContainer() {\r\n        this._actionCardContainer.innerHTML = \"\";\r\n\r\n        if (!this._actionCard) {\r\n            this._actionCardContainer.style.marginTop = \"0px\";\r\n\r\n            return;\r\n        }\r\n\r\n        this._actionCardContainer.style.marginTop = this._renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + \"px\" : \"0px\";\r\n\r\n        let padding = this._owner.getEffectivePadding();\r\n\r\n        this._owner.getImmediateSurroundingPadding(padding);\r\n\r\n        let physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n        if (this._actionCard) {\r\n            this._actionCard.style.paddingLeft = physicalPadding.left + \"px\";\r\n            this._actionCard.style.paddingRight = physicalPadding.right + \"px\";\r\n\r\n            this._actionCard.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\r\n            this._actionCard.style.marginRight = \"-\" + physicalPadding.right + \"px\";\r\n\r\n            if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {\r\n                this._actionCard.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n                this._actionCard.style.marginBottom = \"-\" + physicalPadding.bottom + \"px\";\r\n            }\r\n\r\n            Utils.appendChild(this._actionCardContainer, this._actionCard);\r\n        }\r\n    }\r\n\r\n    private layoutChanged() {\r\n        this._owner.getRootElement().updateLayout();\r\n    }\r\n\r\n    private showActionCard(action: ShowCardAction, suppressStyle: boolean = false, raiseEvent: boolean = true) {\r\n        (<InlineAdaptiveCard>action.card).suppressStyle = suppressStyle;\r\n\r\n        // Always re-render a ShowCard action in design mode; reuse already rendered ShowCard (if available) otherwise\r\n        let renderedCard = action.card.renderedElement && !this._owner.isDesignMode() ? action.card.renderedElement : action.card.render();\r\n\r\n        this._actionCard = renderedCard;\r\n        this._expandedAction = action;\r\n\r\n        this.refreshContainer();\r\n\r\n        if (raiseEvent) {\r\n            this.layoutChanged();\r\n\r\n            raiseInlineCardExpandedEvent(action, true);\r\n        }\r\n    }\r\n\r\n    private collapseExpandedAction() {\r\n        for (let button of this.buttons) {\r\n            button.state = ActionButtonState.Normal;\r\n        }\r\n\r\n        let previouslyExpandedAction = this._expandedAction;\r\n\r\n        this._expandedAction = undefined;\r\n        this._actionCard = undefined;\r\n\r\n        this.refreshContainer();\r\n\r\n        if (previouslyExpandedAction) {\r\n            this.layoutChanged();\r\n\r\n            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);\r\n        }\r\n    }\r\n\r\n    private expandShowCardAction(action: ShowCardAction, raiseEvent: boolean) {\r\n        for (let button of this.buttons) {\r\n            if (button.action !== action) {\r\n                button.state = ActionButtonState.Subdued;\r\n            }\r\n            else {\r\n                button.state = ActionButtonState.Expanded;\r\n            }\r\n        }\r\n\r\n        this.showActionCard(\r\n            action,\r\n            !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()),\r\n            raiseEvent);\r\n    }\r\n\r\n    private getParentContainer(): Container | undefined {\r\n        if (this._owner instanceof Container) {\r\n            return this._owner;\r\n        }\r\n        else {\r\n            return this._owner.getParentContainer();\r\n        }\r\n    }\r\n\r\n    private findActionButton(action: Action): ActionButton | undefined {\r\n        for (let actionButton of this.buttons) {\r\n            if (actionButton.action == action) {\r\n                return actionButton;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    items: Action[] = [];\r\n    buttons: ActionButton[] = [];\r\n\r\n    constructor(owner: CardElement) {\r\n        this._owner = owner;\r\n    }\r\n\r\n    actionExecuted(action: Action) {\r\n        if (!(action instanceof ShowCardAction)) {\r\n            this.collapseExpandedAction();\r\n        }\r\n        else {\r\n            if (action === this._expandedAction) {\r\n                this.collapseExpandedAction();\r\n            }\r\n            else {\r\n                this.expandShowCardAction(action, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    parse(source: any, context: SerializationContext) {\r\n        this.clear();\r\n\r\n        if (Array.isArray(source)) {\r\n            for (let jsonAction of source) {\r\n                let action = context.parseAction(\r\n                    this._owner,\r\n                    jsonAction,\r\n                    [],\r\n                    !this._owner.isDesignMode());\r\n\r\n                if (action) {\r\n                    this.addAction(action);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON(target: PropertyBag, propertyName: string, context: SerializationContext): any {\r\n        context.serializeArray(target, propertyName, this.items);\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = undefined;\r\n\r\n        for (let item of this.items) {\r\n            result = item.getActionById(id);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    validateProperties(context: ValidationResults) {\r\n        if (this._owner.hostConfig.actions.maxActions && this.items.length > this._owner.hostConfig.actions.maxActions) {\r\n            context.addFailure(\r\n                this._owner,\r\n                Enums.ValidationEvent.TooManyActions,\r\n                Strings.errors.tooManyActions(this._owner.hostConfig.actions.maxActions));\r\n        }\r\n\r\n        if (this.items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {\r\n            context.addFailure(\r\n                this._owner,\r\n                Enums.ValidationEvent.InteractivityNotAllowed,\r\n                Strings.errors.interactivityNotAllowed());\r\n        }\r\n\r\n        for (let item of this.items) {\r\n            if (!this.isActionAllowed(item)) {\r\n                context.addFailure(\r\n                    this._owner,\r\n                    Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                    Strings.errors.actionTypeNotAllowed(item.getJsonTypeName()));\r\n            }\r\n\r\n            item.internalValidateProperties(context);\r\n        }\r\n    }\r\n\r\n    render(orientation: Enums.Orientation, isDesignMode: boolean): HTMLElement | undefined {\r\n        // Cache hostConfig for better perf\r\n        let hostConfig = this._owner.hostConfig;\r\n\r\n        if (!hostConfig.supportsInteractivity) {\r\n            return undefined;\r\n        }\r\n\r\n        let element = document.createElement(\"div\");\r\n        let maxActions = hostConfig.actions.maxActions ? Math.min(hostConfig.actions.maxActions, this.items.length) : this.items.length;\r\n\r\n        this._actionCardContainer = document.createElement(\"div\");\r\n        this._renderedActionCount = 0;\r\n\r\n        if (hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this.items[0] instanceof ShowCardAction && this.isActionAllowed(this.items[0])) {\r\n            this.showActionCard(<ShowCardAction>this.items[0], true);\r\n            this._renderedActionCount = 1;\r\n        }\r\n        else {\r\n            let buttonStrip = document.createElement(\"div\");\r\n            buttonStrip.className = hostConfig.makeCssClassName(\"ac-actionSet\");\r\n            buttonStrip.style.display = \"flex\";\r\n            buttonStrip.setAttribute(\"role\", \"menubar\");\r\n\r\n            if (orientation == Enums.Orientation.Horizontal) {\r\n                buttonStrip.style.flexDirection = \"row\";\r\n\r\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\r\n                    switch (this._owner.horizontalAlignment) {\r\n                        case Enums.HorizontalAlignment.Center:\r\n                            buttonStrip.style.justifyContent = \"center\";\r\n                            break;\r\n                        case Enums.HorizontalAlignment.Right:\r\n                            buttonStrip.style.justifyContent = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.justifyContent = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (hostConfig.actions.actionAlignment) {\r\n                        case Enums.ActionAlignment.Center:\r\n                            buttonStrip.style.justifyContent = \"center\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Right:\r\n                            buttonStrip.style.justifyContent = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.justifyContent = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                buttonStrip.style.flexDirection = \"column\";\r\n\r\n                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {\r\n                    switch (this._owner.horizontalAlignment) {\r\n                        case Enums.HorizontalAlignment.Center:\r\n                            buttonStrip.style.alignItems = \"center\";\r\n                            break;\r\n                        case Enums.HorizontalAlignment.Right:\r\n                            buttonStrip.style.alignItems = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.alignItems = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (hostConfig.actions.actionAlignment) {\r\n                        case Enums.ActionAlignment.Center:\r\n                            buttonStrip.style.alignItems = \"center\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Right:\r\n                            buttonStrip.style.alignItems = \"flex-end\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Stretch:\r\n                            buttonStrip.style.alignItems = \"stretch\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.alignItems = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let parentContainer = this.getParentContainer();\r\n\r\n            if (parentContainer) {\r\n                let parentContainerStyle = parentContainer.getEffectiveStyle();\r\n\r\n                const allowedActions = this.items.filter(this.isActionAllowed.bind(this));\r\n\r\n                for (let i = 0; i < allowedActions.length; i++) {\r\n                    let actionButton = this.findActionButton(allowedActions[i]);\r\n\r\n                    if (!actionButton) {\r\n                        actionButton = new ActionButton(allowedActions[i], parentContainerStyle);\r\n                        actionButton.onClick = (ab) => { ab.action.execute(); };\r\n\r\n                        this.buttons.push(actionButton);\r\n                    }\r\n\r\n                    actionButton.render();\r\n\r\n                    if (actionButton.action.renderedElement) {\r\n                        actionButton.action.renderedElement.setAttribute(\"aria-posinset\", (i + 1).toString());\r\n                        actionButton.action.renderedElement.setAttribute(\"aria-setsize\", allowedActions.length.toString());\r\n                        actionButton.action.renderedElement.setAttribute(\"role\", \"menuitem\");\r\n\r\n                        if (hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal && hostConfig.actions.actionAlignment == Enums.ActionAlignment.Stretch) {\r\n                            actionButton.action.renderedElement.style.flex = \"0 1 100%\";\r\n                        }\r\n                        else {\r\n                            actionButton.action.renderedElement.style.flex = \"0 1 auto\";\r\n                        }\r\n\r\n                        buttonStrip.appendChild(actionButton.action.renderedElement);\r\n\r\n                        this._renderedActionCount++;\r\n\r\n                        if (this._renderedActionCount >= hostConfig.actions.maxActions || i == this.items.length - 1) {\r\n                            break;\r\n                        }\r\n                        else if (hostConfig.actions.buttonSpacing > 0) {\r\n                            let spacer = document.createElement(\"div\");\r\n\r\n                            if (orientation === Enums.Orientation.Horizontal) {\r\n                                spacer.style.flex = \"0 0 auto\";\r\n                                spacer.style.width = hostConfig.actions.buttonSpacing + \"px\";\r\n                            }\r\n                            else {\r\n                                spacer.style.height = hostConfig.actions.buttonSpacing + \"px\";\r\n                            }\r\n\r\n                            Utils.appendChild(buttonStrip, spacer);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let buttonStripContainer = document.createElement(\"div\");\r\n            buttonStripContainer.style.overflow = \"hidden\";\r\n            buttonStripContainer.appendChild(buttonStrip);\r\n\r\n            Utils.appendChild(element, buttonStripContainer);\r\n        }\r\n\r\n        Utils.appendChild(element, this._actionCardContainer);\r\n\r\n        for (let button of this.buttons) {\r\n            if (button.state == ActionButtonState.Expanded) {\r\n                this.expandShowCardAction(<ShowCardAction>button.action, false);\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this._renderedActionCount > 0 ? element : undefined;\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        if (!action) {\r\n            throw new Error(\"The action parameter cannot be null.\");\r\n        }\r\n\r\n        if ((!action.parent || action.parent === this._owner) && this.items.indexOf(action) < 0) {\r\n            this.items.push(action);\r\n\r\n            if (!action.parent) {\r\n                action.setParent(this._owner);\r\n            }\r\n\r\n            action[\"_actionCollection\"] = this;\r\n        }\r\n        else {\r\n            throw new Error(Strings.errors.actionAlreadyParented());\r\n        }\r\n    }\r\n\r\n    removeAction(action: Action): boolean {\r\n        if (this.expandedAction && this._expandedAction == action) {\r\n            this.collapseExpandedAction();\r\n        }\r\n\r\n        let actionIndex = this.items.indexOf(action);\r\n\r\n        if (actionIndex >= 0) {\r\n            this.items.splice(actionIndex, 1);\r\n\r\n            action.setParent(undefined);\r\n\r\n            action[\"_actionCollection\"] = undefined;\r\n\r\n            for (let i = 0; i < this.buttons.length; i++) {\r\n                if (this.buttons[i].action == action) {\r\n                    this.buttons.splice(i, 1);\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this.items = [];\r\n        this.buttons = [];\r\n\r\n        this._expandedAction = undefined;\r\n        this._renderedActionCount = 0;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        if (processActions) {\r\n            for (let action of this.items) {\r\n                result = result.concat(action.getAllInputs());\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        for (let action of this.items) {\r\n            result = result.concat(action.getResourceInformation());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get renderedActionCount(): number {\r\n        return this._renderedActionCount;\r\n    }\r\n\r\n    get expandedAction(): ShowCardAction | undefined {\r\n        return this._expandedAction;\r\n    }\r\n}\r\n\r\nexport class ActionSet extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly orientationProperty = new EnumProperty(Versions.v1_1, \"orientation\", Enums.Orientation);\r\n\r\n    @property(ActionSet.orientationProperty)\r\n    orientation?: Enums.Orientation;\r\n\r\n    //#endregion\r\n\r\n    private _actionCollection: ActionCollection;\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._actionCollection.parse(source[\"actions\"], context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        this._actionCollection.toJSON(target, \"actions\", context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        return this._actionCollection.render(this.orientation !== undefined ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._actionCollection = new ActionCollection(this);\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this._actionCollection.renderedActionCount == 0) {\r\n            return super.isBleedingAtBottom();\r\n        }\r\n        else {\r\n            if (this._actionCollection.items.length == 1) {\r\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\r\n            }\r\n            else {\r\n                return this._actionCollection.expandedAction !== undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ActionSet\";\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._actionCollection.items.length;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        if (index >= 0 && index < this.getActionCount()) {\r\n            return this._actionCollection.items[index];\r\n        }\r\n        else {\r\n            return super.getActionAt(index);\r\n        }\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        this._actionCollection.validateProperties(context);\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        this._actionCollection.addAction(action);\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return processActions ? this._actionCollection.getAllInputs() : [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this._actionCollection.getResourceInformation();\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport abstract class StylableCardElementContainer extends CardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        [\r\n            { value: Enums.ContainerStyle.Default },\r\n            { value: Enums.ContainerStyle.Emphasis },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Accent },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Good },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Attention },\r\n            { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Warning }\r\n        ]);\r\n    static readonly bleedProperty = new BoolProperty(Versions.v1_2, \"bleed\", false);\r\n    static readonly minHeightProperty = new PixelSizeProperty(Versions.v1_2, \"minHeight\");\r\n\r\n    @property(StylableCardElementContainer.styleProperty)\r\n    get style(): string | undefined {\r\n        if (this.allowCustomStyle) {\r\n            let style = this.getValue(StylableCardElementContainer.styleProperty);\r\n\r\n            if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\r\n                return style;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    set style(value: string | undefined) {\r\n        this.setValue(StylableCardElementContainer.styleProperty, value);\r\n    }\r\n\r\n    @property(StylableCardElementContainer.bleedProperty)\r\n    private _bleed: boolean = false;\r\n\r\n    @property(StylableCardElementContainer.minHeightProperty)\r\n    minPixelHeight?: number;\r\n\r\n    //#endregion\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        super.adjustRenderedElementSize(renderedElement);\r\n\r\n        if (this.minPixelHeight) {\r\n            renderedElement.style.minHeight = this.minPixelHeight + \"px\";\r\n        }\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.renderedElement) {\r\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\r\n\r\n            if (styleDefinition.backgroundColor) {\r\n                const bgColor = <string>Utils.stringToCssColor(styleDefinition.backgroundColor);\r\n                this.renderedElement.style.backgroundColor = bgColor;\r\n                this.renderedElement.style.border = \"1px solid \" + bgColor;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected applyPadding() {\r\n        super.applyPadding();\r\n\r\n        if (!this.renderedElement) {\r\n            return;\r\n        }\r\n\r\n        let physicalPadding = new SpacingDefinition();\r\n\r\n        if (this.getEffectivePadding()) {\r\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());\r\n        }\r\n\r\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\r\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\r\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\r\n\r\n        if (this.isBleeding()) {\r\n            // Bleed into the first parent that does have padding\r\n            let padding = new PaddingDefinition();\r\n\r\n            this.getImmediateSurroundingPadding(padding);\r\n\r\n            let surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n            this.renderedElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\r\n            this.renderedElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\r\n\r\n            if (!this.isDesignMode()) {\r\n                this.renderedElement.style.marginTop = \"-\" + surroundingPadding.top + \"px\";\r\n                this.renderedElement.style.marginBottom = \"-\" + surroundingPadding.bottom + \"px\";\r\n            }\r\n\r\n            if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {\r\n                this.separatorElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\r\n                this.separatorElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\r\n            }\r\n        }\r\n        else {\r\n            this.renderedElement.style.marginRight = \"0\";\r\n            this.renderedElement.style.marginLeft = \"0\";\r\n            this.renderedElement.style.marginTop = \"0\";\r\n            this.renderedElement.style.marginBottom = \"0\";\r\n\r\n            if (this.separatorElement) {\r\n                this.separatorElement.style.marginRight = \"0\";\r\n                this.separatorElement.style.marginLeft = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        let currentElement: CardElement | undefined = this.parent;\r\n\r\n        while (currentElement) {\r\n            let currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;\r\n\r\n            if (currentElement instanceof StylableCardElementContainer) {\r\n                if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            currentElement = currentElement.parent;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return this.getHasBackground() ?\r\n            new PaddingDefinition(\r\n                Enums.Spacing.Padding,\r\n                Enums.Spacing.Padding,\r\n                Enums.Spacing.Padding,\r\n                Enums.Spacing.Padding) : super.getDefaultPadding();\r\n    }\r\n\r\n    protected getHasExpandedAction(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getBleed(): boolean {\r\n        return this._bleed;\r\n    }\r\n\r\n    protected setBleed(value: boolean) {\r\n        this._bleed = value;\r\n    }\r\n\r\n    protected get renderedActionCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    protected get hasExplicitStyle(): boolean {\r\n        return this.getValue(StylableCardElementContainer.styleProperty) !== undefined;\r\n    }\r\n\r\n    protected get allowCustomStyle(): boolean {\r\n        return true;\r\n    }\r\n\r\n    isBleeding(): boolean {\r\n\t\treturn (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        let explicitStyle = this.getValue(StylableCardElementContainer.styleProperty);\r\n\r\n        if (explicitStyle !== undefined) {\r\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(explicitStyle);\r\n\r\n            if (!styleDefinition) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidPropertyValue(explicitStyle, \"style\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let renderedElement = super.render();\r\n\r\n        if (renderedElement && this.getHasBackground()) {\r\n            this.applyBackground();\r\n        }\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    getEffectiveStyle(): string {\r\n        let effectiveStyle = this.style;\r\n\r\n        return effectiveStyle ? effectiveStyle : super.getEffectiveStyle();\r\n    }\r\n}\r\n\r\nexport class BackgroundImage extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n    static readonly fillModeProperty = new EnumProperty(Versions.v1_2, \"fillMode\", Enums.FillMode, Enums.FillMode.Cover);\r\n    static readonly horizontalAlignmentProperty = new EnumProperty(Versions.v1_2, \"horizontalAlignment\", Enums.HorizontalAlignment, Enums.HorizontalAlignment.Left);\r\n    static readonly verticalAlignmentProperty = new EnumProperty(Versions.v1_2, \"verticalAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\r\n\r\n    @property(BackgroundImage.urlProperty)\r\n    url?: string;\r\n\r\n    @property(BackgroundImage.fillModeProperty)\r\n    fillMode: Enums.FillMode;\r\n\r\n    @property(BackgroundImage.horizontalAlignmentProperty)\r\n    horizontalAlignment: Enums.HorizontalAlignment;\r\n\r\n    @property(BackgroundImage.verticalAlignmentProperty)\r\n    verticalAlignment: Enums.VerticalAlignment;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"BackgroundImage\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: BaseSerializationContext) {\r\n        if (typeof source === \"string\") {\r\n            this.resetDefaultValues();\r\n            this.url = source;\r\n        }\r\n        else {\r\n            return super.internalParse(source, context);\r\n        }\r\n    }\r\n\r\n    apply(element: CardElement) {\r\n        if (this.url && element.renderedElement) {\r\n            element.renderedElement.style.backgroundImage = \"url('\" + element.preProcessPropertyValue(BackgroundImage.urlProperty, this.url) + \"')\";\r\n\r\n            switch (this.fillMode) {\r\n                case Enums.FillMode.Repeat:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat\";\r\n                    break;\r\n                case Enums.FillMode.RepeatHorizontally:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat-x\";\r\n                    break;\r\n                case Enums.FillMode.RepeatVertically:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat-y\";\r\n                    break;\r\n                case Enums.FillMode.Cover:\r\n                default:\r\n                    element.renderedElement.style.backgroundRepeat = \"no-repeat\";\r\n                    element.renderedElement.style.backgroundSize = \"cover\";\r\n                    break;\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.renderedElement.style.backgroundPositionX = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.renderedElement.style.backgroundPositionX = \"right\";\r\n                    break;\r\n            }\r\n\r\n            switch (this.verticalAlignment) {\r\n                case Enums.VerticalAlignment.Center:\r\n                    element.renderedElement.style.backgroundPositionY = \"center\";\r\n                    break;\r\n                case Enums.VerticalAlignment.Bottom:\r\n                    element.renderedElement.style.backgroundPositionY = \"bottom\";\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this.url ? true : false;\r\n    }\r\n}\r\n\r\nexport class Container extends StylableCardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly backgroundImageProperty = new SerializableObjectProperty(\r\n        Versions.v1_0,\r\n        \"backgroundImage\",\r\n        BackgroundImage);\r\n    static readonly verticalContentAlignmentProperty = new EnumProperty(Versions.v1_1, \"verticalContentAlignment\", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);\r\n    static readonly rtlProperty = new BoolProperty(Versions.v1_0, \"rtl\");\r\n\r\n    @property(Container.backgroundImageProperty)\r\n    get backgroundImage(): BackgroundImage {\r\n        return this.getValue(Container.backgroundImageProperty);\r\n    }\r\n\r\n    @property(Container.verticalContentAlignmentProperty)\r\n    verticalContentAlignment: Enums.VerticalAlignment = Enums.VerticalAlignment.Top;\r\n\r\n    @property(Container.rtlProperty)\r\n    rtl?: boolean;\r\n\r\n    //#endregion\r\n\r\n    private _items: CardElement[] = [];\r\n    private _renderedItems: CardElement[] = [];\r\n\r\n    private insertItemAt(\r\n        item: CardElement,\r\n        index: number,\r\n        forceInsert: boolean) {\r\n        if (!item.parent || forceInsert) {\r\n            if (item.isStandalone) {\r\n                if (index < 0 || index >= this._items.length) {\r\n                    this._items.push(item);\r\n                }\r\n                else {\r\n                    this._items.splice(index, 0, item);\r\n                }\r\n\r\n                item.setParent(this);\r\n            }\r\n            else {\r\n                throw new Error(Strings.errors.elementTypeNotStandalone(item.getJsonTypeName()));\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(Strings.errors.elementAlreadyParented());\r\n        }\r\n    }\r\n\r\n    protected supportsExcplitiHeight(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getItemsCollectionPropertyName(): string {\r\n        return \"items\";\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.backgroundImage.isValid() && this.renderedElement) {\r\n            this.backgroundImage.apply(this);\r\n        }\r\n\r\n        super.applyBackground();\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._renderedItems = [];\r\n\r\n        // Cache hostConfig to avoid walking the parent hierarchy several times\r\n        let hostConfig = this.hostConfig;\r\n\r\n        let element = document.createElement(\"div\");\r\n\r\n        if (this.rtl !== undefined && this.rtl) {\r\n            element.dir = \"rtl\";\r\n        }\r\n\r\n        element.classList.add(hostConfig.makeCssClassName(\"ac-container\"));\r\n        element.style.display = \"flex\";\r\n        element.style.flexDirection = \"column\";\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation) {\r\n            // Forces the container to be at least as tall as its content.\r\n            //\r\n            // Fixes a quirk in Chrome where, for nested flex elements, the\r\n            // inner element's height would never exceed the outer element's\r\n            // height. This caused overflow truncation to break -- containers\r\n            // would always be measured as not overflowing, since their heights\r\n            // were constrained by their parents as opposed to truly reflecting\r\n            // the height of their content.\r\n            //\r\n            // See the \"Browser Rendering Notes\" section of this answer:\r\n            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size\r\n            element.style.minHeight = '-webkit-min-content';\r\n        }\r\n\r\n        switch (this.verticalContentAlignment) {\r\n            case Enums.VerticalAlignment.Center:\r\n                element.style.justifyContent = \"center\";\r\n                break;\r\n            case Enums.VerticalAlignment.Bottom:\r\n                element.style.justifyContent = \"flex-end\";\r\n                break;\r\n            default:\r\n                element.style.justifyContent = \"flex-start\";\r\n                break;\r\n        }\r\n\r\n        if (this._items.length > 0) {\r\n            for (let item of this._items) {\r\n                let renderedItem = this.isElementAllowed(item) ? item.render() : undefined;\r\n\r\n                if (renderedItem) {\r\n                    if (this._renderedItems.length > 0 && item.separatorElement) {\r\n                        item.separatorElement.style.flex = \"0 0 auto\";\r\n\r\n                        Utils.appendChild(element, item.separatorElement);\r\n                    }\r\n\r\n                    Utils.appendChild(element, renderedItem);\r\n\r\n                    this._renderedItems.push(item);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.isDesignMode()) {\r\n                let placeholderElement = this.createPlaceholderElement();\r\n                placeholderElement.style.width = \"100%\";\r\n                placeholderElement.style.height = \"100%\";\r\n\r\n                element.appendChild(placeholderElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        if (this.renderedElement) {\r\n            // Add 1 to account for rounding differences between browsers\r\n            let boundary = this.renderedElement.offsetTop + maxHeight + 1;\r\n\r\n            let handleElement = (cardElement: CardElement) => {\r\n                let elt = cardElement.renderedElement;\r\n\r\n                if (elt) {\r\n                    switch (Utils.getFitStatus(elt, boundary)) {\r\n                        case Enums.ContainerFitStatus.FullyInContainer:\r\n                            let sizeChanged = cardElement['resetOverflow']();\r\n                            // If the element's size changed after resetting content,\r\n                            // we have to check if it still fits fully in the card\r\n                            if (sizeChanged) {\r\n                                handleElement(cardElement);\r\n                            }\r\n                            break;\r\n                        case Enums.ContainerFitStatus.Overflowing:\r\n                            let maxHeight = boundary - elt.offsetTop;\r\n                            cardElement['handleOverflow'](maxHeight);\r\n                            break;\r\n                        case Enums.ContainerFitStatus.FullyOutOfContainer:\r\n                            cardElement['handleOverflow'](0);\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            for (let item of this._items) {\r\n                handleElement(item);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        for (let item of this._items) {\r\n            item['resetOverflow']();\r\n        }\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        return this.backgroundImage.isValid() || super.getHasBackground();\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this.clear();\r\n        this.setShouldFallback(false);\r\n\r\n        let jsonItems = source[this.getItemsCollectionPropertyName()];\r\n\r\n        if (Array.isArray(jsonItems)) {\r\n            for (let item of jsonItems) {\r\n                let element = context.parseElement(this, item, !this.isDesignMode());\r\n\r\n                if (element) {\r\n                    this.insertItemAt(element, -1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        context.serializeArray(target, this.getItemsCollectionPropertyName(), this._items);\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this._items[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\r\n            for (let item of this._renderedItems) {\r\n                if (item.isVisible) {\r\n                    return item;\r\n                }\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\r\n            for (let i = this._renderedItems.length - 1; i >= 0; i--) {\r\n                if (this._renderedItems[i].isVisible) {\r\n                    return this._renderedItems[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        let designMode = this.isDesignMode();\r\n\r\n        for (let item of this._items) {\r\n            if (item.isVisible || designMode) {\r\n                return item == element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        let designMode = this.isDesignMode();\r\n\r\n        for (let i = this._items.length - 1; i >= 0; i--) {\r\n            if (this._items[i].isVisible || designMode) {\r\n                return this._items[i] == element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isRtl(): boolean {\r\n        if (this.rtl !== undefined) {\r\n            return this.rtl;\r\n        }\r\n        else {\r\n            let parentContainer = this.getParentContainer();\r\n\r\n            return parentContainer ? parentContainer.isRtl() : false;\r\n        }\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        let firstRenderedItem = this.getFirstVisibleRenderedItem();\r\n\r\n        return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        let lastRenderedItem = this.getLastVisibleRenderedItem();\r\n\r\n        return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return this._items.indexOf(cardElement);\r\n    }\r\n\r\n    addItem(item: CardElement) {\r\n        this.insertItemAt(item, -1, false);\r\n    }\r\n\r\n    insertItemBefore(item: CardElement, insertBefore: CardElement) {\r\n        this.insertItemAt(item, this._items.indexOf(insertBefore), false);\r\n    }\r\n\r\n    insertItemAfter(item: CardElement, insertAfter: CardElement) {\r\n        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        let itemIndex = this._items.indexOf(item);\r\n\r\n        if (itemIndex >= 0) {\r\n            this._items.splice(itemIndex, 1);\r\n\r\n            item.setParent(undefined);\r\n\r\n            this.updateLayout();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this._items = [];\r\n        this._renderedItems = [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result = super.getResourceInformation();\r\n\r\n        if (this.backgroundImage.isValid()) {\r\n            result.push(\r\n                {\r\n                    url: <string>this.backgroundImage.url,\r\n                    mimeType: \"image\"\r\n                }\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = super.getActionById(id);\r\n\r\n        if (!result) {\r\n            if (this.selectAction) {\r\n                result = this.selectAction.getActionById(id);\r\n            }\r\n\r\n            if (!result) {\r\n                for (let item of this._items) {\r\n                    result = item.getActionById(id);\r\n\r\n                    if (result) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get padding(): PaddingDefinition | undefined {\r\n        return this.getPadding();\r\n    }\r\n\r\n    set padding(value: PaddingDefinition | undefined) {\r\n        this.setPadding(value);\r\n    }\r\n\r\n    get selectAction(): Action | undefined {\r\n        return this._selectAction;\r\n    }\r\n\r\n    set selectAction(value: Action | undefined) {\r\n        this._selectAction = value;\r\n    }\r\n\r\n    get bleed(): boolean {\r\n        return this.getBleed();\r\n    }\r\n\r\n    set bleed(value: boolean) {\r\n        this.setBleed(value);\r\n    }\r\n}\r\n\r\nexport type ColumnWidth = SizeAndUnit | \"auto\" | \"stretch\";\r\n\r\nexport class Column extends Container {\r\n    //#region Schema\r\n\r\n    static readonly widthProperty = new CustomProperty<ColumnWidth>(\r\n        Versions.v1_0,\r\n        \"width\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            let result: ColumnWidth = property.defaultValue;\r\n            let value = source[property.name];\r\n            let invalidWidth = false;\r\n\r\n            if (typeof value === \"number\" && !isNaN(value)) {\r\n                result = new SizeAndUnit(value, Enums.SizeUnit.Weight);\r\n            }\r\n            else if (value === \"auto\" || value === \"stretch\") {\r\n                result = value;\r\n            }\r\n            else if (typeof value === \"string\") {\r\n                try {\r\n                    result = SizeAndUnit.parse(value);\r\n\r\n                    if (result.unit === Enums.SizeUnit.Pixel && property.targetVersion.compareTo(context.targetVersion) > 0) {\r\n                        invalidWidth = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    invalidWidth = true;\r\n                }\r\n            }\r\n            else {\r\n                invalidWidth = true;\r\n            }\r\n\r\n            if (invalidWidth) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidColumnWidth(value));\r\n\r\n                result = \"auto\";\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: ColumnWidth, context: BaseSerializationContext) => {\r\n            if (value instanceof SizeAndUnit) {\r\n                if (value.unit === Enums.SizeUnit.Pixel) {\r\n                    context.serializeValue(target, \"width\", value.physicalSize + \"px\");\r\n                }\r\n                else {\r\n                    context.serializeNumber(target, \"width\", value.physicalSize);\r\n                }\r\n            }\r\n            else {\r\n                context.serializeValue(target, \"width\", value);\r\n            }\r\n        },\r\n        \"stretch\");\r\n\r\n    @property(Column.widthProperty)\r\n    width: ColumnWidth = \"stretch\";\r\n\r\n    //#endregion\r\n\r\n    private _computedWeight: number = 0;\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        const minDesignTimeColumnHeight = 20;\r\n\r\n        if (this.isDesignMode()) {\r\n            renderedElement.style.minWidth = \"20px\";\r\n            renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + \"px\";\r\n        }\r\n        else {\r\n            renderedElement.style.minWidth = \"0\";\r\n\r\n            if (this.minPixelHeight) {\r\n                renderedElement.style.minHeight = this.minPixelHeight + \"px\";\r\n            }\r\n        }\r\n\r\n        if (this.width === \"auto\") {\r\n            renderedElement.style.flex = \"0 1 auto\";\r\n        }\r\n        else if (this.width === \"stretch\") {\r\n            renderedElement.style.flex = \"1 1 50px\";\r\n        }\r\n        else if (this.width instanceof SizeAndUnit) {\r\n            if (this.width.unit == Enums.SizeUnit.Pixel) {\r\n                renderedElement.style.flex = \"0 0 auto\";\r\n                renderedElement.style.width = this.width.physicalSize + \"px\";\r\n            }\r\n            else {\r\n                renderedElement.style.flex = \"1 1 \" + (this._computedWeight > 0 ? this._computedWeight : this.width.physicalSize) + \"%\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get separatorOrientation(): Enums.Orientation {\r\n        return Enums.Orientation.Vertical;\r\n    }\r\n\r\n    constructor(width: ColumnWidth = \"stretch\") {\r\n        super();\r\n\r\n        this.width = width;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Column\";\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        if (this.parent && this.parent instanceof ColumnSet) {\r\n            return this.separatorElement !== undefined && !this.parent.isLeftMostElement(this);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class ColumnSet extends StylableCardElementContainer {\r\n    private _columns: Column[] = [];\r\n    private _renderedColumns: Column[];\r\n\r\n    private createColumnInstance(source: any, context: SerializationContext): Column | undefined {\r\n        return context.parseCardObject<Column>(\r\n            this,\r\n            source,\r\n            [], // Forbidden types not supported for elements for now\r\n            !this.isDesignMode(),\r\n            (typeName: string) => {\r\n                return !typeName || typeName === \"Column\" ? new Column() : undefined;\r\n            },\r\n            (typeName: string, errorType: TypeErrorType) => {\r\n                context.logParseEvent(\r\n                    undefined,\r\n                    Enums.ValidationEvent.ElementTypeNotAllowed,\r\n                    Strings.errors.elementTypeNotAllowed(typeName));\r\n            });\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._renderedColumns = [];\r\n\r\n        if (this._columns.length > 0) {\r\n            // Cache hostConfig to avoid walking the parent hierarchy several times\r\n            let hostConfig = this.hostConfig;\r\n\r\n            let element = document.createElement(\"div\");\r\n            element.className = hostConfig.makeCssClassName(\"ac-columnSet\");\r\n            element.style.display = \"flex\";\r\n\r\n            if (GlobalSettings.useAdvancedCardBottomTruncation) {\r\n                // See comment in Container.internalRender()\r\n                element.style.minHeight = '-webkit-min-content';\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.justifyContent = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.justifyContent = \"flex-end\";\r\n                    break;\r\n                default:\r\n                    element.style.justifyContent = \"flex-start\";\r\n                    break;\r\n            }\r\n\r\n            let totalWeight: number = 0;\r\n\r\n            for (let column of this._columns) {\r\n                if (column.width instanceof SizeAndUnit && (column.width.unit == Enums.SizeUnit.Weight)) {\r\n                    totalWeight += column.width.physicalSize;\r\n                }\r\n            }\r\n\r\n            for (let column of this._columns) {\r\n                if (column.width instanceof SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {\r\n                    let computedWeight = 100 / totalWeight * column.width.physicalSize;\r\n\r\n                    // Best way to emulate \"internal\" access I know of\r\n                    column[\"_computedWeight\"] = computedWeight;\r\n                }\r\n\r\n                let renderedColumn = column.render();\r\n\r\n                if (renderedColumn) {\r\n                    if (this._renderedColumns.length > 0 && column.separatorElement) {\r\n                        column.separatorElement.style.flex = \"0 0 auto\";\r\n\r\n                        Utils.appendChild(element, column.separatorElement);\r\n                    }\r\n\r\n                    Utils.appendChild(element, renderedColumn);\r\n\r\n                    this._renderedColumns.push(column);\r\n                }\r\n            }\r\n\r\n            return this._renderedColumns.length > 0 ? element : undefined;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        for (let column of this._columns) {\r\n            column['handleOverflow'](maxHeight);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        for (let column of this._columns) {\r\n            column['resetOverflow']();\r\n        }\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._columns = [];\r\n        this._renderedColumns = [];\r\n\r\n        let jsonColumns = source[\"columns\"];\r\n\r\n        if (Array.isArray(jsonColumns)) {\r\n            for (let item of jsonColumns) {\r\n                let column = this.createColumnInstance(item, context);\r\n\r\n                if (column) {\r\n                    this._columns.push(column);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        context.serializeArray(target, \"columns\", this._columns);\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        for (let column of this._columns) {\r\n            if (column.isVisible) {\r\n                return column == element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        if (this.isBleeding()) {\r\n            return true;\r\n        }\r\n\r\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\r\n            for (let column of this._columns) {\r\n                if (column.isBleedingAtTop()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this.isBleeding()) {\r\n            return true;\r\n        }\r\n\r\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\r\n            for (let column of this._columns) {\r\n                if (column.isBleedingAtBottom()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._columns.length;\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\r\n            return this._renderedColumns[0];\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\r\n            return this._renderedColumns[this._renderedColumns.length - 1];\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getColumnAt(index: number): Column {\r\n        return this._columns[index];\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this.getColumnAt(index);\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ColumnSet\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        let weightedColumns: number = 0;\r\n        let stretchedColumns: number = 0;\r\n\r\n        for (let column of this._columns) {\r\n            if (typeof column.width === \"number\") {\r\n                weightedColumns++;\r\n            }\r\n            else if (column.width === \"stretch\") {\r\n                stretchedColumns++;\r\n            }\r\n        }\r\n\r\n        if (weightedColumns > 0 && stretchedColumns > 0) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.Hint,\r\n                Strings.hints.dontUseWeightedAndStrecthedColumnsInSameSet());\r\n        }\r\n    }\r\n\r\n    addColumn(column: Column) {\r\n        if (!column.parent) {\r\n            this._columns.push(column);\r\n\r\n            column.setParent(this);\r\n        }\r\n        else {\r\n            throw new Error(Strings.errors.columnAlreadyBelongsToAnotherSet());\r\n        }\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        if (item instanceof Column) {\r\n            let itemIndex = this._columns.indexOf(item);\r\n\r\n            if (itemIndex >= 0) {\r\n                this._columns.splice(itemIndex, 1);\r\n\r\n                item.setParent(undefined);\r\n\r\n                this.updateLayout();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;\r\n    }\r\n\r\n    isLeftMostElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) == 0;\r\n    }\r\n\r\n    isRightMostElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) == this._columns.length - 1;\r\n    }\r\n\r\n    isTopElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) >= 0;\r\n    }\r\n\r\n    isBottomElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) >= 0;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = undefined;\r\n\r\n        for (let column of this._columns) {\r\n            result = column.getActionById(id);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get bleed(): boolean {\r\n        return this.getBleed();\r\n    }\r\n\r\n    set bleed(value: boolean) {\r\n        this.setBleed(value);\r\n    }\r\n\r\n    get padding(): PaddingDefinition | undefined {\r\n        return this.getPadding();\r\n    }\r\n\r\n    set padding(value: PaddingDefinition | undefined) {\r\n        this.setPadding(value);\r\n    }\r\n\r\n    get selectAction(): Action | undefined {\r\n        return this._selectAction;\r\n    }\r\n\r\n    set selectAction(value: Action | undefined) {\r\n        this._selectAction = value;\r\n    }\r\n}\r\n\r\nfunction raiseImageLoadedEvent(image: Image) {\r\n    let card = image.getRootElement() as AdaptiveCard;\r\n    let onImageLoadedHandler = (card && card.onImageLoaded) ? card.onImageLoaded : AdaptiveCard.onImageLoaded;\r\n\r\n    if (onImageLoadedHandler) {\r\n        onImageLoadedHandler(image);\r\n    }\r\n}\r\n\r\nfunction raiseAnchorClickedEvent(element: CardElement, anchor: HTMLAnchorElement): boolean {\r\n    let card = element.getRootElement() as AdaptiveCard;\r\n    let onAnchorClickedHandler = (card && card.onAnchorClicked) ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;\r\n\r\n    return onAnchorClickedHandler !== undefined ? onAnchorClickedHandler(element, anchor) : false;\r\n}\r\n\r\nfunction raiseExecuteActionEvent(action: Action) {\r\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\r\n    let onExecuteActionHandler = (card && card.onExecuteAction) ? card.onExecuteAction : AdaptiveCard.onExecuteAction;\r\n\r\n    if (action.prepareForExecution() && onExecuteActionHandler) {\r\n        onExecuteActionHandler(action);\r\n    }\r\n}\r\n\r\nfunction raiseInlineCardExpandedEvent(action: ShowCardAction, isExpanded: boolean) {\r\n    let card = action.parent ? action.parent.getRootElement() as AdaptiveCard : undefined;\r\n    let onInlineCardExpandedHandler = (card && card.onInlineCardExpanded) ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;\r\n\r\n    if (onInlineCardExpandedHandler) {\r\n        onInlineCardExpandedHandler(action, isExpanded);\r\n    }\r\n}\r\n\r\nfunction raiseInputValueChangedEvent(input: Input) {\r\n    let card = input.getRootElement() as AdaptiveCard;\r\n    let onInputValueChangedHandler = (card && card.onInputValueChanged) ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;\r\n\r\n    if (onInputValueChangedHandler) {\r\n        onInputValueChangedHandler(input);\r\n    }\r\n}\r\n\r\nfunction raiseElementVisibilityChangedEvent(element: CardElement, shouldUpdateLayout: boolean = true) {\r\n    let rootElement = element.getRootElement();\r\n\r\n    if (shouldUpdateLayout) {\r\n        rootElement.updateLayout();\r\n    }\r\n\r\n    let card = rootElement as AdaptiveCard;\r\n    let onElementVisibilityChangedHandler = (card && card.onElementVisibilityChanged) ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;\r\n\r\n    if (onElementVisibilityChangedHandler !== undefined) {\r\n        onElementVisibilityChangedHandler(element);\r\n    }\r\n}\r\n\r\nexport abstract class ContainerWithActions extends Container {\r\n    private _actionCollection: ActionCollection;\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._actionCollection.parse(source[\"actions\"], context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        this._actionCollection.toJSON(target, \"actions\", context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element = super.internalRender();\r\n\r\n        if (element) {\r\n            let renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);\r\n\r\n            if (renderedActions) {\r\n                Utils.appendChild(\r\n                    element,\r\n                    Utils.renderSeparation(\r\n                        this.hostConfig,\r\n                        {\r\n                            spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing)\r\n                        },\r\n                        Enums.Orientation.Horizontal));\r\n                Utils.appendChild(element, renderedActions);\r\n            }\r\n\r\n            if (this.renderIfEmpty) {\r\n                return element;\r\n            }\r\n            else {\r\n                return element.children.length > 0 ? element : undefined;\r\n            }\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getHasExpandedAction(): boolean {\r\n        if (this.renderedActionCount == 0) {\r\n            return false;\r\n        }\r\n        else if (this.renderedActionCount == 1) {\r\n            return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\r\n        }\r\n        else {\r\n            return this._actionCollection.expandedAction !== undefined;\r\n        }\r\n    }\r\n\r\n    protected get renderedActionCount(): number {\r\n        return this._actionCollection.renderedActionCount;\r\n    }\r\n\r\n    protected get renderIfEmpty(): boolean {\r\n        return false;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._actionCollection = new ActionCollection(this);\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._actionCollection.items.length;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        if (index >= 0 && index < this.getActionCount()) {\r\n            return this._actionCollection.items[index];\r\n        }\r\n        else {\r\n            return super.getActionAt(index);\r\n        }\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = this._actionCollection.getActionById(id);\r\n\r\n        return result ? result : super.getActionById(id);\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this._actionCollection) {\r\n            this._actionCollection.validateProperties(context);\r\n        }\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        return super.isLastElement(element) && this._actionCollection.items.length == 0;\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        this._actionCollection.addAction(action);\r\n    }\r\n\r\n    clear() {\r\n        super.clear();\r\n\r\n        this._actionCollection.clear();\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        let result = super.getAllInputs(processActions);\r\n\r\n        if (processActions) {\r\n            result = result.concat(this._actionCollection.getAllInputs(processActions));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return super.getResourceInformation().concat(this._actionCollection.getResourceInformation());\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this._actionCollection.renderedActionCount == 0) {\r\n            return super.isBleedingAtBottom();\r\n        }\r\n        else {\r\n            if (this._actionCollection.items.length == 1) {\r\n                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;\r\n            }\r\n            else {\r\n                return this._actionCollection.expandedAction !== undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport interface IMarkdownProcessingResult {\r\n    didProcess: boolean;\r\n    outputHtml?: any;\r\n}\r\n\r\n// @dynamic\r\nexport class AdaptiveCard extends ContainerWithActions {\r\n    static readonly schemaUrl = \"http://adaptivecards.io/schemas/adaptive-card.json\";\r\n\r\n    //#region Schema\r\n\r\n    protected static readonly $schemaProperty = new CustomProperty<string>(\r\n        Versions.v1_0,\r\n        \"$schema\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            return AdaptiveCard.schemaUrl;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\r\n            context.serializeValue(target, property.name, AdaptiveCard.schemaUrl);\r\n        });\r\n\r\n    static readonly versionProperty = new CustomProperty<Version | undefined>(\r\n        Versions.v1_0,\r\n        \"version\",\r\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\r\n            let version = Version.parse(source[property.name], context);\r\n\r\n            if (version === undefined) {\r\n                version = Versions.latest;\r\n\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidCardVersion(version.toString()));\r\n            }\r\n\r\n            return version;\r\n        },\r\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: Versions | undefined, context: BaseSerializationContext) => {\r\n            if (value !== undefined) {\r\n                context.serializeValue(target, property.name, value.toString());\r\n            }\r\n        },\r\n        Versions.v1_0);\r\n    static readonly fallbackTextProperty = new StringProperty(Versions.v1_0, \"fallbackText\");\r\n    static readonly speakProperty = new StringProperty(Versions.v1_0, \"speak\");\r\n\r\n    @property(AdaptiveCard.versionProperty)\r\n    version: Version;\r\n\r\n    @property(AdaptiveCard.fallbackTextProperty)\r\n    fallbackText?: string;\r\n\r\n    @property(AdaptiveCard.speakProperty)\r\n    speak?: string;\r\n\r\n    //#endregion\r\n\r\n    static onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement) => boolean;\r\n    static onExecuteAction?: (action: Action) => void;\r\n    static onElementVisibilityChanged?: (element: CardElement) => void;\r\n    static onImageLoaded?: (image: Image) => void;\r\n    static onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\r\n    static onInputValueChanged?: (input: Input) => void;\r\n    static onProcessMarkdown?: (text: string, result: IMarkdownProcessingResult) => void;\r\n\r\n    static get processMarkdown(): (text: string) => string {\r\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\r\n    }\r\n\r\n    static set processMarkdown(value: (text: string) => string) {\r\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\r\n    }\r\n\r\n    static applyMarkdown(text: string): IMarkdownProcessingResult {\r\n        let result: IMarkdownProcessingResult = {\r\n            didProcess: false\r\n        };\r\n\r\n        if (AdaptiveCard.onProcessMarkdown) {\r\n            AdaptiveCard.onProcessMarkdown(text, result);\r\n        }\r\n        else if ((<any>window).markdownit) {\r\n            // Check for markdownit\r\n            let markdownIt: any = (<any>window).markdownit;\r\n            result.outputHtml = markdownIt().render(text);\r\n            result.didProcess = true;\r\n        }\r\n        else {\r\n            console.warn(Strings.errors.markdownProcessingNotEnabled)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _fallbackCard?: AdaptiveCard;\r\n\r\n    private isVersionSupported(): boolean {\r\n        if (this.bypassVersionCheck) {\r\n            return true;\r\n        }\r\n        else {\r\n            let unsupportedVersion: boolean =\r\n                !this.version ||\r\n                !this.version.isValid ||\r\n                (this.maxVersion.major < this.version.major) ||\r\n                (this.maxVersion.major == this.version.major && this.maxVersion.minor < this.version.minor);\r\n\r\n            return !unsupportedVersion;\r\n        }\r\n    }\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SerializationContext(this.version);\r\n    }\r\n\r\n    protected getItemsCollectionPropertyName(): string {\r\n        return \"body\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        this._fallbackCard = undefined;\r\n\r\n        let fallbackElement = context.parseElement(undefined, source[\"fallback\"], !this.isDesignMode());\r\n\r\n        if (fallbackElement) {\r\n            this._fallbackCard = new AdaptiveCard();\r\n            this._fallbackCard.addItem(fallbackElement);\r\n        }\r\n\r\n        super.internalParse(source, context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        this.setValue(AdaptiveCard.versionProperty, context.targetVersion);\r\n\r\n        super.internalToJSON(target, context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let renderedElement = super.internalRender();\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && renderedElement) {\r\n            // Unlike containers, the root card element should be allowed to\r\n            // be shorter than its content (otherwise the overflow truncation\r\n            // logic would never get triggered)\r\n            renderedElement.style.removeProperty(\"minHeight\");\r\n        }\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    protected getHasBackground(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding);\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get renderIfEmpty(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get bypassVersionCheck(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected get allowCustomStyle() {\r\n        return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;\r\n    }\r\n\r\n    protected get hasBackground(): boolean {\r\n        return true;\r\n    }\r\n\r\n    onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement) => boolean;\r\n    onExecuteAction?: (action: Action) => void;\r\n    onElementVisibilityChanged?: (element: CardElement) => void;\r\n    onImageLoaded?: (image: Image) => void;\r\n    onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\r\n    onInputValueChanged?: (input: Input) => void;\r\n\r\n    designMode: boolean = false;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"AdaptiveCard\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this.getValue(CardElement.typeNameProperty) !== \"AdaptiveCard\") {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.MissingCardType,\r\n                Strings.errors.invalidCardType());\r\n        }\r\n\r\n        if (!this.bypassVersionCheck && !this.version) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"version\"));\r\n        }\r\n        else if (!this.isVersionSupported()) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.UnsupportedCardVersion,\r\n                Strings.errors.unsupportedCardVersion(this.version.toString(), this.maxVersion.toString()));\r\n        }\r\n    }\r\n\r\n    render(target?: HTMLElement): HTMLElement | undefined {\r\n        let renderedCard: HTMLElement | undefined;\r\n\r\n        if (this.shouldFallback() && this._fallbackCard) {\r\n            this._fallbackCard.hostConfig = this.hostConfig;\r\n\r\n            renderedCard = this._fallbackCard.render();\r\n        }\r\n        else {\r\n            renderedCard = super.render();\r\n\r\n            if (renderedCard) {\r\n                renderedCard.classList.add(this.hostConfig.makeCssClassName(\"ac-adaptiveCard\"));\r\n\r\n                // Having a tabIndex on the root container for a card can mess up accessibility in some scenarios.\r\n                // However, we've shipped this behavior before, and so can't just turn it off in a point release. For\r\n                // now, to unblock accessibility scenarios for our customers, we've got an option to turn it off. In a\r\n                // future release, we should strongly consider flipping the default such that we *don't* emit a tabIndex\r\n                // by default.\r\n                if (GlobalSettings.setTabIndexAtCardRoot) {\r\n                    renderedCard.tabIndex = 0;\r\n                }\r\n\r\n                if (this.speak) {\r\n                    renderedCard.setAttribute(\"aria-label\", this.speak);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (target) {\r\n            Utils.appendChild(target, renderedCard);\r\n\r\n            this.updateLayout();\r\n        }\r\n\r\n        return renderedCard;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && this.isDisplayed()) {\r\n            let padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);\r\n\r\n            this['handleOverflow']((<HTMLElement>this.renderedElement).offsetHeight - padding);\r\n        }\r\n    }\r\n\r\n    shouldFallback(): boolean {\r\n        return super.shouldFallback() || !this.isVersionSupported();\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass InlineAdaptiveCard extends AdaptiveCard {\r\n    //#region Schema\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"InlineAdaptiveCard\";\r\n    }\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.remove(\r\n            AdaptiveCard.$schemaProperty,\r\n            AdaptiveCard.versionProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(\r\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding);\r\n    }\r\n\r\n    protected get bypassVersionCheck(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get defaultStyle(): string {\r\n        if (this.suppressStyle) {\r\n            return Enums.ContainerStyle.Default;\r\n        }\r\n        else {\r\n            return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;\r\n        }\r\n    }\r\n\r\n    suppressStyle: boolean = false;\r\n\r\n    render(target?: HTMLElement): HTMLElement | undefined {\r\n        let renderedCard = super.render(target);\r\n\r\n        if (renderedCard) {\r\n            renderedCard.setAttribute(\"aria-live\", \"polite\");\r\n            renderedCard.removeAttribute(\"tabindex\");\r\n        }\r\n\r\n        return renderedCard;\r\n    }\r\n}\r\n\r\nexport class GlobalRegistry {\r\n    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>) {\r\n        registry.clear();\r\n\r\n        registry.register(\"Container\", Container);\r\n        registry.register(\"TextBlock\", TextBlock);\r\n        registry.register(\"RichTextBlock\", RichTextBlock, Versions.v1_2);\r\n        registry.register(\"TextRun\", TextRun, Versions.v1_2);\r\n        registry.register(\"Image\", Image);\r\n        registry.register(\"ImageSet\", ImageSet);\r\n        registry.register(\"Media\", Media, Versions.v1_1);\r\n        registry.register(\"FactSet\", FactSet);\r\n        registry.register(\"ColumnSet\", ColumnSet);\r\n        registry.register(\"ActionSet\", ActionSet, Versions.v1_2);\r\n        registry.register(\"Input.Text\", TextInput);\r\n        registry.register(\"Input.Date\", DateInput);\r\n        registry.register(\"Input.Time\", TimeInput);\r\n        registry.register(\"Input.Number\", NumberInput);\r\n        registry.register(\"Input.ChoiceSet\", ChoiceSetInput);\r\n        registry.register(\"Input.Toggle\", ToggleInput);\r\n    }\r\n\r\n    static populateWithDefaultActions(registry: CardObjectRegistry<Action>) {\r\n        registry.clear();\r\n\r\n        registry.register(OpenUrlAction.JsonTypeName, OpenUrlAction);\r\n        registry.register(SubmitAction.JsonTypeName, SubmitAction);\r\n        registry.register(ShowCardAction.JsonTypeName, ShowCardAction);\r\n        registry.register(ToggleVisibilityAction.JsonTypeName, ToggleVisibilityAction, Versions.v1_2);\r\n    }\r\n\r\n    static readonly elements = new CardObjectRegistry<CardElement>();\r\n    static readonly actions = new CardObjectRegistry<Action>();\r\n\r\n    static reset() {\r\n        GlobalRegistry.populateWithDefaultElements(GlobalRegistry.elements);\r\n        GlobalRegistry.populateWithDefaultActions(GlobalRegistry.actions);\r\n    }\r\n}\r\n\r\nGlobalRegistry.reset();\r\n\r\nconst enum TypeErrorType {\r\n    UnknownType,\r\n    ForbiddenType\r\n}\r\n\r\nexport class SerializationContext extends BaseSerializationContext {\r\n    private _elementRegistry?: CardObjectRegistry<CardElement>;\r\n    private _actionRegistry?: CardObjectRegistry<Action>;\r\n\r\n    private internalParseCardObject<T extends CardObject>(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypeNames: string[],\r\n        allowFallback: boolean,\r\n        createInstanceCallback: (typeName: string) => T | undefined,\r\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\r\n        let result: T | undefined = undefined;\r\n\r\n        if (source && typeof source === \"object\") {\r\n            let typeName = Utils.parseString(source[\"type\"]);\r\n\r\n            if (typeName) {\r\n                if (forbiddenTypeNames.indexOf(typeName) >= 0) {\r\n                    logParseEvent(typeName, TypeErrorType.ForbiddenType);\r\n                }\r\n                else {\r\n                    let tryToFallback = false;\r\n\r\n                    result = createInstanceCallback(typeName);\r\n\r\n                    if (!result) {\r\n                        tryToFallback = GlobalSettings.enableFallback && allowFallback;\r\n\r\n                        logParseEvent(typeName, TypeErrorType.UnknownType);\r\n                    }\r\n                    else {\r\n                        result.setParent(parent);\r\n                        result.parse(source, this);\r\n\r\n                        tryToFallback = GlobalSettings.enableFallback && allowFallback && result.shouldFallback();\r\n                    }\r\n\r\n                    if (tryToFallback) {\r\n                        let fallback = source[\"fallback\"];\r\n\r\n                        if (!fallback && parent) {\r\n                            parent.setShouldFallback(true);\r\n                        }\r\n                        if (typeof fallback === \"string\" && fallback.toLowerCase() === \"drop\") {\r\n                            result = undefined;\r\n                        }\r\n                        else if (typeof fallback === \"object\") {\r\n                            result = this.internalParseCardObject<T>(\r\n                                parent,\r\n                                fallback,\r\n                                forbiddenTypeNames,\r\n                                true,\r\n                                createInstanceCallback,\r\n                                logParseEvent);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected cardObjectParsed(o: SerializableObject, source: any) {\r\n        if (o instanceof Action && this.onParseAction) {\r\n            this.onParseAction(o, source, this);\r\n        }\r\n        else if (o instanceof CardElement && this.onParseElement) {\r\n            this.onParseElement(o, source, this);\r\n        }\r\n    }\r\n\r\n    onParseAction?: (action: Action, source: any, context: SerializationContext) => void;\r\n    onParseElement?: (element: CardElement, source: any, context: SerializationContext) => void;\r\n\r\n    parseCardObject<T extends CardObject>(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypeNames: string[],\r\n        allowFallback: boolean,\r\n        createInstanceCallback: (typeName: string) => T | undefined,\r\n        logParseEvent: (typeName: string, errorType: TypeErrorType) => void): T | undefined {\r\n        let result = this.internalParseCardObject(\r\n            parent,\r\n            source,\r\n            forbiddenTypeNames,\r\n            allowFallback,\r\n            createInstanceCallback,\r\n            logParseEvent);\r\n\r\n        if (result !== undefined) {\r\n            this.cardObjectParsed(result, source);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseElement(parent: CardElement | undefined, source: any, allowFallback: boolean): CardElement | undefined {\r\n        return this.parseCardObject<CardElement>(\r\n            parent,\r\n            source,\r\n            [], // Forbidden types not supported for elements for now\r\n            allowFallback,\r\n            (typeName: string) => {\r\n                return this.elementRegistry.createInstance(typeName, this.targetVersion);\r\n            },\r\n            (typeName: string, errorType: TypeErrorType) => {\r\n                if (errorType === TypeErrorType.UnknownType) {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.UnknownElementType,\r\n                        Strings.errors.unknownElementType(typeName));\r\n                }\r\n                else {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.ElementTypeNotAllowed,\r\n                        Strings.errors.elementTypeNotAllowed(typeName));\r\n                }\r\n            });\r\n    }\r\n\r\n    parseAction(\r\n        parent: CardElement,\r\n        source: any,\r\n        forbiddenActionTypes: string[],\r\n        allowFallback: boolean): Action | undefined {\r\n        return this.parseCardObject<Action>(\r\n            parent,\r\n            source,\r\n            forbiddenActionTypes,\r\n            allowFallback,\r\n            (typeName: string) => {\r\n                return this.actionRegistry.createInstance(typeName, this.targetVersion);\r\n            },\r\n            (typeName: string, errorType: TypeErrorType) => {\r\n                if (errorType == TypeErrorType.UnknownType) {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.UnknownActionType,\r\n                        Strings.errors.unknownActionType(typeName));\r\n                }\r\n                else {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                        Strings.errors.actionTypeNotAllowed(typeName));\r\n                }\r\n            });\r\n    }\r\n\r\n    get elementRegistry(): CardObjectRegistry<CardElement> {\r\n        return this._elementRegistry ? this._elementRegistry : GlobalRegistry.elements;\r\n    }\r\n\r\n    // Not using a property setter here because the setter should accept \"undefined\"\r\n    // whereas the getter should never return undefined.\r\n    setElementRegistry(value: CardObjectRegistry<CardElement> | undefined) {\r\n        this._elementRegistry = value;\r\n    }\r\n\r\n    get actionRegistry(): CardObjectRegistry<Action> {\r\n        return this._actionRegistry ? this._actionRegistry : GlobalRegistry.actions;\r\n    }\r\n\r\n    // Not using a property setter here because the setter should accept \"undefined\"\r\n    // whereas the getter should never return undefined.\r\n    setActionRegistry(value: CardObjectRegistry<Action> | undefined) {\r\n        this._actionRegistry = value;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nabstract class AbstractTextFormatter {\r\n    private _regularExpression: RegExp;\r\n\r\n    protected abstract internalFormat(lang: string | undefined, matches: RegExpExecArray): string;\r\n\r\n    constructor(regularExpression: RegExp) {\r\n        this._regularExpression = regularExpression;\r\n    }\r\n\r\n    format(lang: string | undefined, input: string | undefined): string | undefined {\r\n        let matches;\r\n\r\n        if (input) {\r\n            let result = input;\r\n\r\n            while ((matches = this._regularExpression.exec(input)) != null) {\r\n                result = result.replace(matches[0], this.internalFormat(lang, matches));\r\n            };\r\n\r\n            return result;\r\n        }\r\n        else {\r\n            return input;\r\n        }\r\n    }\r\n}\r\n\r\nclass DateFormatter extends AbstractTextFormatter {\r\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\r\n        let date = new Date(Date.parse(matches[1]));\r\n        let format = matches[2] != undefined ? matches[2].toLowerCase() : \"compact\";\r\n\r\n        if (format != \"compact\") {\r\n            return date.toLocaleDateString(lang, { day: \"numeric\", weekday: format, month: format, year: \"numeric\" });\r\n        }\r\n        else {\r\n            return date.toLocaleDateString();\r\n        }\r\n    }\r\n}\r\n\r\nclass TimeFormatter extends AbstractTextFormatter {\r\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\r\n        let date = new Date(Date.parse(matches[1]));\r\n\r\n        return date.toLocaleTimeString(lang, { hour: 'numeric', minute: '2-digit' });\r\n    }\r\n}\r\n\r\nexport function formatText(lang: string | undefined, text: string | undefined): string | undefined {\r\n    const formatters: AbstractTextFormatter[] = [\r\n        new DateFormatter(/\\{{2}DATE\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\\)\\}{2}/g),\r\n        new TimeFormatter(/\\{{2}TIME\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))\\)\\}{2}/g)\r\n    ];\r\n\r\n    let result = text;\r\n\r\n    for (let formatter of formatters) {\r\n        result = formatter.format(lang, result);\r\n    }\r\n\r\n    return result;\r\n}\r\n"],"sourceRoot":""}