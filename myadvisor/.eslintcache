[{"/home/ubuntu/myAdvisorDev/myadvisor/src/index.js":"1","/home/ubuntu/myAdvisorDev/myadvisor/src/App.js":"2","/home/ubuntu/myAdvisorDev/myadvisor/src/components/sidebar.js":"3","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Main.js":"4","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CourseList.js":"5","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CourseDetails.js":"6","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Career.js":"7","/home/ubuntu/myAdvisorDev/myadvisor/src/components/BeforeBot.js":"8","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js":"9","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Start.js":"10","/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentProfile.js":"11","/home/ubuntu/myAdvisorDev/myadvisor/src/components/login.js":"12","/home/ubuntu/myAdvisorDev/myadvisor/src/components/TopBar.js":"13","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/StaffDashboard.js":"14","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Courses.js":"15","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Students.js":"16","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Settings.js":"17","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Reports.js":"18","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Sessions.js":"19","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Programmes.js":"20","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Bot Framework/webChat.js":"21","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullCourses.js":"22","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CourseNode.js":"23","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CareerCheck.js":"24","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullCareers.js":"25","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullProgrammes.js":"26","/home/ubuntu/myAdvisorDev/myadvisor/src/components/DetailsCard.js":"27","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullDetails.js":"28","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullStudentCourses.js":"29","/home/ubuntu/myAdvisorDev/myadvisor/src/components/NoTranscript.js":"30","/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentCoursesCard.js":"31","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlocks.js":"32","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js":"33","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/CoursesTable.js":"34","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js":"35","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddCourse.js":"36","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddAccount.js":"37","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/StudentsTable.js":"38","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/ReportsTable.js":"39","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/SessionsTable.js":"40","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js":"41","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/EditCourse.js":"42","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlock.js":"43","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddCourseToProgramme.js":"44","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddProgramme.js":"45","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/DeleteProgramme.js":"46","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/PotentialGraduates.js":"47","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/PotentialGraduatesTable.js":"48"},{"size":378,"mtime":1676487082267,"results":"49","hashOfConfig":"50"},{"size":458,"mtime":1680818553544,"results":"51","hashOfConfig":"50"},{"size":9355,"mtime":1681293950366,"results":"52","hashOfConfig":"50"},{"size":14677,"mtime":1681293950362,"results":"53","hashOfConfig":"50"},{"size":11811,"mtime":1681293950362,"results":"54","hashOfConfig":"50"},{"size":10091,"mtime":1680818553544,"results":"55","hashOfConfig":"50"},{"size":6601,"mtime":1676487082263,"results":"56","hashOfConfig":"50"},{"size":1924,"mtime":1676487082263,"results":"57","hashOfConfig":"50"},{"size":13513,"mtime":1681293950362,"results":"58","hashOfConfig":"50"},{"size":9666,"mtime":1680818553548,"results":"59","hashOfConfig":"50"},{"size":25908,"mtime":1681293950366,"results":"60","hashOfConfig":"50"},{"size":5775,"mtime":1677152644523,"results":"61","hashOfConfig":"50"},{"size":1263,"mtime":1676487082267,"results":"62","hashOfConfig":"50"},{"size":1133,"mtime":1676487082267,"results":"63","hashOfConfig":"50"},{"size":4981,"mtime":1679371756360,"results":"64","hashOfConfig":"50"},{"size":1977,"mtime":1679371756364,"results":"65","hashOfConfig":"50"},{"size":1215,"mtime":1676487082267,"results":"66","hashOfConfig":"50"},{"size":2927,"mtime":1676487082267,"results":"67","hashOfConfig":"50"},{"size":2304,"mtime":1680818553548,"results":"68","hashOfConfig":"50"},{"size":7209,"mtime":1679371756364,"results":"69","hashOfConfig":"50"},{"size":498,"mtime":1676487082263,"results":"70","hashOfConfig":"50"},{"size":618,"mtime":1676487082263,"results":"71","hashOfConfig":"50"},{"size":2539,"mtime":1676487082263,"results":"72","hashOfConfig":"50"},{"size":924,"mtime":1681293923818,"results":"73","hashOfConfig":"50"},{"size":618,"mtime":1681186336548,"results":"74","hashOfConfig":"50"},{"size":627,"mtime":1676487082267,"results":"75","hashOfConfig":"50"},{"size":8684,"mtime":1681293950362,"results":"76","hashOfConfig":"50"},{"size":661,"mtime":1681187130499,"results":"77","hashOfConfig":"50"},{"size":677,"mtime":1676487082267,"results":"78","hashOfConfig":"50"},{"size":3132,"mtime":1681293950366,"results":"79","hashOfConfig":"50"},{"size":1620,"mtime":1680818553548,"results":"80","hashOfConfig":"50"},{"size":2345,"mtime":1680818553544,"results":"81","hashOfConfig":"50"},{"size":1822,"mtime":1677152644523,"results":"82","hashOfConfig":"50"},{"size":6757,"mtime":1679371756360,"results":"83","hashOfConfig":"50"},{"size":4099,"mtime":1676487082267,"results":"84","hashOfConfig":"50"},{"size":13320,"mtime":1679371756360,"results":"85","hashOfConfig":"50"},{"size":4432,"mtime":1680818553544,"results":"86","hashOfConfig":"50"},{"size":8612,"mtime":1681293950366,"results":"87","hashOfConfig":"50"},{"size":4463,"mtime":1676487082267,"results":"88","hashOfConfig":"50"},{"size":3813,"mtime":1680818553548,"results":"89","hashOfConfig":"50"},{"size":7843,"mtime":1680818553548,"results":"90","hashOfConfig":"50"},{"size":15357,"mtime":1679371756360,"results":"91","hashOfConfig":"50"},{"size":747,"mtime":1676487082267,"results":"92","hashOfConfig":"50"},{"size":5858,"mtime":1679371756360,"results":"93","hashOfConfig":"50"},{"size":3134,"mtime":1679371756360,"results":"94","hashOfConfig":"50"},{"size":4891,"mtime":1679371756360,"results":"95","hashOfConfig":"50"},{"size":2002,"mtime":1680818553548,"results":"96","hashOfConfig":"50"},{"size":2483,"mtime":1680818553548,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1kg40rq",{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"100"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"100"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"100"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"100"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"100"},"/home/ubuntu/myAdvisorDev/myadvisor/src/index.js",[],["228","229"],"/home/ubuntu/myAdvisorDev/myadvisor/src/App.js",["230"],"import { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Main from './components/Main';\n\nimport './App.css';\n//import PermanentDrawerRight from \"./components/sidebar\";\n\nfunction App () {\n\n  return (\n      <Router>\n        <Switch>\n          <Route\n            path=\"/\"\n            render={(props) => <Main {...props} />}\n          />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/sidebar.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Main.js",["231","232","233","234","235"],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\n\n//Student Imports\nimport StudentProfile from './StudentProfile';\nimport CourseList from './CourseList';\nimport CourseDetails from './CourseDetails';\nimport Career from './Career';\nimport Start from './Start';\nimport BeforeBot from './BeforeBot';\nimport Finish from './Finish';\nimport PermanentDrawerRight from \"./sidebar\";\n\n//Staff Imports\nimport StaffDashboard from './Staff/StaffDashboard';\nimport StaffCourses from './Staff/Courses';\nimport Students from './Staff/Students';\nimport Settings from './Staff/Settings';\nimport Reports from './Staff/Reports';\nimport Programmes from './Staff/Programmes';\nimport Sessions from './Staff/Sessions';\nimport PotentialGraduates from './Staff/PotentialGraduates'\n\n//Global Imports\nimport \"../App.css\"\nimport \"../assets/css/Staff.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from \"./login\";\nimport TopBar from '../components/TopBar';\nimport ReactWebChat from \"../components/Bot Framework/webChat\";\n\nfunction Main() {\n  const [isAuthenticated, setIsAuthenticated] = useState(localStorage.getItem(\"auth\")); // Get authenticated status from localStorage\n  const [user, setUser] = useState(localStorage.getItem(\"user\")); // Get type of user from localStorage\n  const [recCourses, setRecCourses] = useState(null); // Store recommended courses generated on StudentProfile.js\n  const [careerRecCourses, setCareerRecCourses] = useState(null); // Store recommended courses generated on Career.js\n  const [chosenCourses, setChosenCourses] = useState([]); // Store courses chosen by the user on CourseList.js\n  const [show, setShow] = useState(true); // Boolean value to determine whether or not to show the \"Begin Advising\" button\n  const [progress, setProgress] = useState(0); // Value of the user's advising progress percentage\n  const [degProgress, setDegProgress] = useState(0); // Value of the user's degree progress percentage\n  const [newDeg, setNewDeg] = useState(0); // Value of the user's updated degree progress credits\n  const [credits, setCredits] = useState(0); // Value of how much credits the user needs to complete their degree\n  const [hide, setHide] = useState(false); // Boolean value to determine whether or not to show the sidebar or not\n  const [showBackBtn, setShowBackBtn] = useState(true); // Boolean value to determine whether or not to show the back button on the course list page\n  const [loading, setLoading] = useState(true); // Boolean value to determine whether or not to show a loading circle on the sidebar\n  const [year, setYear] = useState(1); // Value of the user's current level\n  const [warning, setWarning] = useState(false); // Boolean value to indicate whether or not that the user is on academic warning\n  const [botButtons, setBotButtons] = useState(false); // Boolean value to indicate whether or not to show \"Back to Courses\" and \"Finish Advising\" buttons on sidebar\n  const [programme, setProgramme] = useState(null); // Store what programme a student is current doing\n  const [studCredComplete, setStudCredComplete] = useState(0);//credits a student has completed so far\n  const [courseInProgCredits, setCourseInProgCredits] = useState(0); //credits of the courses that are in progress\n  const [gpa, setGpa] = useState(0); //Student's current gpa\n  const [inProgCourses, setInProgCourses] = useState([]); //an array of the student's inprogress courses\n  const [transcriptDetails, setTranscriptDetails] = useState(null); //to store a student's transcript details\n  const [gradUploaded, setGradUpload] = useState(false);\n  const [chosenCoursesCreds, setChosenCoursesCreds] = useState(0); // Store chosen courses credits on CourseList.js\n  const [courseChoseNCreds, setCourseChoseNCreds] = useState([]); //array to store chosen course code and credits\n  const [courseInProgNCreds, setCourseInProgNCreds] = useState([]); //array to store in progress course code and credits\n\n  /* Setter methods for use by the other pages */\n  const setAuth = (boolean) => {\n    setIsAuthenticated(boolean);\n  };\n\n  const setType = (value) => {\n    setUser(value);\n  };\n\n  const setRecommended = (value) => {\n    setRecCourses(value);\n  };\n\n  const setCareerRecommended = (value) => {\n    setCareerRecCourses(value);\n  };\n\n  const setDisplay = (value) => {\n    setShow(value);\n  };\n\n  const setProg = (value) => {\n    setProgress(value);\n  };\n\n  const setDegProg = (value) => {\n    setDegProgress(value);\n  };\n\n  const setNewDegProg = (value) => {\n    setNewDeg(value);\n  };\n\n  const setCreds = (value) => {\n    setCredits(value);\n  };\n\n  const setHidden = (value) => {\n    setHide(value);\n  };\n\n  const setShowBack = (value) => {\n    setShowBackBtn(value);\n  };\n\n  const setLoad = (value) => {\n    setLoading(value);\n  };\n\n  const setLevel = (value) => {\n    setYear(value);\n  };\n\n  const setAcWarning = (value) => {\n    setWarning(value);\n  };\n\n  const setChosen = (value) => {\n    setChosenCourses(value);\n  };\n\n  const setShowBotButtons = (value) => {\n    setBotButtons(value);\n  };\n\n  const setStudentProgramme = (value) => {\n    setProgramme(value);\n  };\n\n  const setCreditsCompleted = (value) => {\n    setStudCredComplete(value);\n  };\n\n  const setCourseInprogCreds = (value) => {\n    setCourseInProgCredits(value);\n  };\n\n  const setStudentGpa = (value) => {\n    setGpa(value);\n  }\n\n  const setInProgressCourses = (value) => {\n    setInProgCourses(value);\n  }\n\n  const setTransDetails = (value) => {\n    setTranscriptDetails(value);\n  }\n\n  const setGradUploaded = (value) => {\n    setGradUpload(value);\n  }\n\n  const setChosenCoursesCredits = (value) => {\n    setChosenCoursesCreds(value);\n  }\n\n  const setCourseChoseNCredits = (value) => {\n    setCourseChoseNCreds(value);\n  }\n\n  const setCourseInProgNCredits = (value) => {\n    setCourseInProgNCreds(value);\n  }\n\n  return (\n    <div className=\"main-panel\">\n      {user ? <TopBar hide={hide}></TopBar> : null}\n      {user === \"student\" ? <PermanentDrawerRight gpa={gpa} hide={hide} courseInProgCredits={courseInProgCredits} recCourses={recCourses} progress={progress} degProgress={degProgress} credits={credits} show={show} setDisplay={setDisplay} setShowBotButtons={setShowBotButtons} loading={loading} warning={warning} newDeg={newDeg} botButtons={botButtons}/> : null}\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return(<Redirect to=\"/home\"/>)\n              } else if (isAuthenticated && user==\"admin\"){\n                return(<Redirect to=\"/staff\"/>)\n              } else {\n                return(<Redirect to=\"/login\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/login\"\n          render={(props) =>\n            {\n              if(!isAuthenticated){\n                return <Login {...props} setAuth={setAuth} setType={setType}/>\n              } else if (isAuthenticated && user==\"admin\"){\n                return(<Redirect to=\"/staff\" />)\n              } else if (isAuthenticated && user==\"student\"){\n                return(<Redirect to=\"/home\" />)\n              }\n            }\n          }\n        />\n\n        {/*Student Routes*/}\n\n        <Route\n          exact\n          path=\"/home\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <StudentProfile {...props} setCourseInProgNCredits={setCourseInProgNCredits} setTransDetails={setTransDetails} setInProgressCourses={setInProgressCourses} setStudentGpa={setStudentGpa} gpa={gpa} courseInProgCredits={courseInProgCredits} setCourseInprogCreds={setCourseInprogCreds} newDeg={newDeg} setNewDegProg={setNewDegProg} credits={credits} setRecommended={setRecommended} setCreditsCompleted={setCreditsCompleted} setDisplay={setDisplay} setProg={setProg} setDegProg={setDegProg} setCreds={setCreds} setHidden={setHidden} setLoad={setLoad} setLevel={setLevel} setAcWarning={setAcWarning} setShowBotButtons={setShowBotButtons} recCourses={recCourses} programme={programme}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/courses\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <CourseList {...props} setCourseChoseNCredits={setCourseChoseNCredits} setChosenCoursesCredits={setChosenCoursesCredits} setProg={setProg} setHidden={setHidden} setDisplay={setDisplay} setChosen={setChosen} setNewDegProg={setNewDegProg} showBackBtn={showBackBtn} setShowBotButtons={setShowBotButtons} recCourses={recCourses} careerRecCourses={careerRecCourses} chosenCourses={chosenCourses} newDeg={newDeg}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/coursedetails\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <CourseDetails {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/career\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <Career {...props} setDisplay={setDisplay} setProg={setProg} setCareerRecommended={setCareerRecommended} year={year} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/start\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <Start {...props} setHidden={setHidden} setDegProg={setDegProg} setCreds={setCreds} setShowBack={setShowBack} setRecommended={setRecommended} setShowBotButtons={setShowBotButtons} setStudentProgramme={setStudentProgramme} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/almostdone\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <BeforeBot setShowBotButtons={setShowBotButtons}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/finish\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return <Finish courseInProgNCreds={courseInProgNCreds} courseChoseNCreds={courseChoseNCreds} chosenCoursesCreds={chosenCoursesCreds} courseInProgCredits={courseInProgCredits} setGradUploaded={setGradUploaded} gradUploaded={gradUploaded} transcriptDetails={transcriptDetails} inProgCourses={inProgCourses} newDeg={newDeg} chosenCourses={chosenCourses} studCredComplete={studCredComplete} setProg={setProg} setShowBotButtons={setShowBotButtons}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />    \n\n        {/*Bot Route*/}\n        <Route\n          exact\n          path=\"/bot\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"student\"){\n                return (\n                <div className=\"row\">\n                  <div className=\"col-sm-10\">\n                    <ReactWebChat {...props} />\n                  </div>\n                </div>\n               )\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />  \n\n\n        {/*Staff Routes*/}\n        <Route\n          exact\n          path=\"/staff\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <StaffDashboard {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />        \n\n        <Route\n          exact\n          path=\"/staff/courses\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <StaffCourses {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/programmes\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <Programmes {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/students\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <Students {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/settings\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <Settings {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n        \n        <Route\n          exact\n          path=\"/staff/reports\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <Reports {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />                        \n\n        <Route\n          exact\n          path=\"/staff/sessions\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <Sessions {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />  \n\n        <Route\n          exact\n          path=\"/staff/graduates\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user===\"admin\"){\n                return <PotentialGraduates {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />   \n\n\n\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default Main;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CourseList.js",["236","237","238","239","240"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport CourseNode from './CourseNode'\nimport PullCourses from \"./PullCourses\";\nimport \"../assets/css/Courses.css\";\nimport CourseDetails from \"./CourseDetails\";\nimport { Link } from 'react-router-dom'\n\nconst CourseList = (props) => { \n    const [all, setAll] = useState(true); // Boolean value used to determine whether or not to show all recommended courses\n    const [core, setCore] = useState(false); // Boolean value used to determine whether or not to show all core courses for that semester and level\n    const [career, setCareer] = useState(false); // Boolean value used to determine whether or not to show all recommended courses with career tags based on what the usere chose in the career page\n    const [chosen, setChosen] = useState(false); // Boolean value used to determine whether or not to show all courses that user added using the Add checkbox \n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n\n    var courses = PullCourses(); // Retrieve all courses from the database\n\n    let recCourses = undefined; // Variable to store recommended courses determined on StudentProfile.js\n    let careerRecCourses = undefined; // Variable to store recommended courses based on careers chosen determined on Career.js\n    \n    //console.log(\"Hello \" + props.recCourses);\n    if (props.recCourses) { // If user's recommended courses have been generated from student details page\n      recCourses = props.recCourses;\n      \n    }\n    else { // If the user's recommended courses has been lost, redirect to start page to generate them again\n      history.push({\n        pathname: '/start'\n      })\n    }\n\n    if (props.careerRecCourses) { // If user's recommended courses based on careers chosen have been generated\n      careerRecCourses = props.careerRecCourses;\n    }\n    else {\n      careerRecCourses = [];\n    }\n\n    useEffect(() => {\n      props.setProg(60); // Set advising progress to 60%\n      props.setHidden(false); // Indicate that to not hide the back button\n      props.setDisplay(false); // Indicate that to hide the \"Begin Advising\" button on the sidebar\n      props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n    });\n\n    // Function that runs when the \"All Courses\" tab is clicked\n    function allClick() {\n      if (core || career || chosen) { // If any other tab is currently open, set them to false and show all courses\n        setAll(true);\n        setCore(false);\n        setCareer(false);\n        setChosen(false);\n      }\n    }\n\n    // Function that runs when the \"Core Courses\" tab is clicked\n    function coreClick() {\n      if (all || career || chosen) { // If any other tab is currently open, set them to false and show core courses\n        setAll(false);\n        setCore(true);\n        setCareer(false);\n        setChosen(false);\n      }\n    }\n\n    // Function that runs when the \"Career Specific Courses\" tab is clicked\n    function careerClick() {\n      if (core || all || chosen) { // If any other tab is currently open, set them to false and show career specific courses\n        setAll(false);\n        setCore(false);\n        setCareer(true);\n        setChosen(false);\n      }\n    }\n\n    // Function that runs when the \"Your Chosen Courses\" tab is clicked\n    function chosenClick() {\n      if (core || all || career) { // If any other tab is currently open, set them to false and show user's chosen courses\n        setAll(false);\n        setCore(false);\n        setCareer(false);\n        setChosen(true);\n      }\n    }\n\n    // Function that runs when the Add checkbox is checked or unchecked\n    function onChange(event, courseCredits) { \n      var chosenArray = props.chosenCourses;\n      var clear = false; // Boolean value to indicate if chosenArray has multiple copies of a chosen course\n      if (event.currentTarget.checked === true) { // If the checkbox was checked\n        chosenArray.push(event.currentTarget.value); // Add course to chosenArray\n        props.setNewDegProg(props.newDeg + courseCredits); // Add the course credits to the new degree progress\n        //console.log(\"new deg \"+props.newDeg);\n      }\n      else { // If the checkbox was unchecked\n        while (!clear) { // While there is multiple copies of a chos en course in chosenArray\n          var index = chosenArray.indexOf(event.currentTarget.value); // Find index of the course that was unchecked\n          if (index > -1) { // If the course was in the array\n            chosenArray.splice(index, 1); // Remove course from the array\n            props.setNewDegProg(props.newDeg - courseCredits); // Remove the course credits from the new degree progress\n          }\n          else { // If the course was not in the array\n            clear = true;\n          }\n        }\n        clear = false;\n      }\n      props.setChosen(chosenArray);\n    }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">\n                <p className=\"header blue-txt\">Select Courses</p>\n                <div className=\"card details-card outer-card\">\n                    <div className=\"card-body\">\n                        <p className=\"courselist-card-text\">Click on a course to see more details</p>\n                        <p className=\"courselist-card-text\">Check the Add box if you are interested in pursuing a course</p>\n                        <div className=\"row tab-group\">\n                          { all ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={allClick}>All Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={allClick}>All Courses</button>\n                            </div>\n\n                          ) }\n                          { core ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={coreClick}>Core Courses</button>\n                            </div> ) : ( \n                            \n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={coreClick}>Core Courses</button>\n                            </div>\n\n                          ) }\n                          { career ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={careerClick}>Career Specific Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                             <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={careerClick}>Career Specific Courses</button>\n                            </div>\n                          ) }\n                          { chosen ? (\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={chosenClick}>Your Chosen Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                            <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={chosenClick}>Your Chosen Courses</button>\n                            </div>\n                          ) }\n                        </div>\n                        <div className=\"card courselist-card custom-scroll\">\n                            <div className=\"card-body\">{\n                              all ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (recCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : core ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (recCourses.includes(courses[k].courseCode) && courses[k].type === \"Core\") {\n                                  return <CourseNode course={courses[k]} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : career ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (careerRecCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : chosen ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (props.chosenCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : (null)\n                            }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                { props.showBackBtn ? (\n                  <div className=\"row button-row\">\n                      <div className=\"col-sm-2\">\n                        <Link to=\"/career\">\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                        </Link>\n                      </div>          \n                      <div className=\"col-sm-2 offset-sm-8\">\n                      <Link to=\"/almostdone\">\n                        <button type=\"submit\" class=\"btn btn-custom next-button blue-button\">Next</button>\n                        </Link>\n                      </div>\n                  </div>\n                ) : (\n                  <div className=\"row button-row\">        \n                      <div className=\"col-sm-2 offset-sm-8\">\n                        <Link to=\"/almostdone\">\n                          <button type=\"submit\" class=\"btn btn-custom next-button blue-button\">Next</button>\n                        </Link>\n                      </div>\n                  </div>\n                ) }\n            </div>\n            </div>\n            </div>\n      </div>\n    );\n  \n}\n\nexport default CourseList;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CourseDetails.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Career.js",["241","242"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CareerCheck from './CareerCheck';\nimport \"../assets/css/Career.css\";\nimport { Link } from 'react-router-dom'\nimport PullCareers from \"./PullCareers\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Career = (props) => {\n\n  const [careerList, setCareerList] = useState([]); // Array used to store careers that a user selected\n  const [loading, setLoading] = useState(false); // Boolean used to indicate whether or not the recommended courses for the user has been updated\n\n  var careers = PullCareers(); // Get all careers from the database\n  const history = useHistory(); // Used to redirect to a new path without losing state values\n  props.setDisplay(false); // Indicate that to hide the \"Begin Advising\" button on the sidebar\n  props.setProg(40); // Set advising progress to 40%\n\n  // If the user's recommended courses has been lost, redirect to start page to generate them again\n  if (props.recCourses === null) { \n    history.push({\n      pathname: '/start'\n    })\n  }\n\n  // Function that runs when the user checks or unchecks a checkbox\n  function onChange(event) { \n    var careerArray = careerList; // Duplicate items in careerList\n    if (event.currentTarget.checked === true) { // If the box is checked then add that career to careerArray\n      careerArray.push(event.currentTarget.value);\n    }\n    else { // If the box is unchecked then remove that career from careerArray\n      var index = careerArray.indexOf(event.currentTarget.value); // Find index of the specified career\n      if (index > -1) { // If career is in the array\n        careerArray.splice(index, 1); // Remove the career from the array\n      }\n    }\n    setCareerList(careerArray); // Set careerList to careerArray\n  }\n\n  // Function that runs when the user clicks the \"Next\" button\n  function onClick() {\n    setLoading(true);\n    determineCourses(careerList);\n  }\n\n  // Function to fetch courses that are associated with a given career\n  async function getCareerCourses(id) {\n    try {\n      const {data:response} = await axios.get(`/careers/courses/${id}`) //use data destructuring to get data from the promise object\n      return response\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Function to filter the fetched courses based on the current semester and user's current level\n  async function determineCourses(careerArray){\n\n      var recCourses = []; // Array to store the recommended courses for the user\n      var today = new Date(); // Today's date\n      var currentSem; // Student's current semester\n      var level; // Student's current level\n      \n      if (today.getMonth() < 4) { // If the date is currently between January and April\n          currentSem = \"2\";\n      }\n      else if (today.getMonth() < 6) { // If the date is currently between May and July\n          currentSem = \"3\";\n      }\n      else { // If the date is currently between August and December\n          currentSem = \"1\";\n      }\n\n      // props.year is the student's current year determined in StudentProfile.js\n      if (props.year === 1) {\n        level = \"I\";\n      }\n      else if (props.year === 2) {\n        level = \"II\";\n      }\n      else if (props.year === 3) {\n        level = \"III\"\n      }\n      else {\n        level = \"I\";\n      }\n\n      // Iterate through careerArray\n      for (var i=0; i<careerArray.length; i++) {\n        var courses = await getCareerCourses(careerArray[i]); // Retrieve courses given with the iterated career\n        for (var j=0; j<courses.length; j++) { // Iterate through courses retrieved\n          if (courses[j].semester === currentSem && courses[j].level === level) { // If the course corresponds with the current semester and current level\n            recCourses.push(courses[j].courseCode); // Add course to recommended courses array\n          }\n        }\n    }\n    props.setCareerRecommended(recCourses); // Set global state of recommended courses based on career\n\n    // Route user to courses page\n    history.push({ \n      pathname: '/courses'\n    })\n\n  }\n\n\n  return (\n    <div className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">\n                <p className=\"header blue-txt\">Career Path</p>\n                  <form>\n                    <div className=\"card details-card outer-card\">\n                      <div className=\"card-body career-card custom-scroll\">\n                        <p className=\"career-card-text\">Select any career paths you may be interested in pursuing</p>\n                          <table class=\"table table-borderless table-striped\">\n                            <thead>\n                                <tr class=\"d-flex blue-txt\">\n                                    <th class=\"col-3 name-header\">Career Title</th>\n                                    <th class=\"col-9 desc-header\">Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                              <CareerCheck careers={careers} onChange={onChange}></CareerCheck>\n                            </tbody>\n                          </table>\n                        </div>\n                    </div>\n                    <div className=\"row button-row\">\n                      <div className=\"col-sm-2\">\n                        <Link to=\"/home\">\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                        </Link>\n                      </div>\n                      { loading ? (\n                        <div className=\"col-sm-2\">\n                          <CircularProgress className=\"circ-prog career-prog\" size={30}/>\n                        </div>\n                      ) : (null)}\n                      { loading ? (\n                        <div className=\"col-sm-2 offset-sm-6\">\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\n                        </div> ) : (\n                        <div className=\"col-sm-2 offset-sm-8\">\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\n                        </div>\n                        ) }\n                    </div>\n                  </form>\n                </div>\n              </div>\n          </div>\n    </div>\n  );\n}\n\nexport default Career;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/BeforeBot.js",["243"],"import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { Link } from 'react-router-dom'\nimport { useHistory } from 'react-router-dom';\n\nconst BeforeBot = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n\n    function onClickHandler() {\n        props.setShowBotButtons(true); // Show \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        history.push({\n            pathname: '/bot'\n        })\n    }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're almost done!</p>\n                                <p className=\"almost-text\">Would you like to talk to the myAdvisor chatbot for any additional questions?</p>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-6\">\n                                        <button type=\"button\" class=\"btn btn-custom blue-button\" onClick={onClickHandler}>Yes, I would like to talk to the bot</button>\n                                    </div>\n                                    <div className=\"col-sm-6\">\n                                        <Link to=\"/finish\">\n                                            <button type=\"submit\" class=\"btn btn-custom blue-button\">No, finish advising</button>\n                                        </Link>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n      </div>\n    );\n}\n\nexport default BeforeBot;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Finish.js",["244","245","246","247","248","249"],"import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n//const PotentialGraduate = require(\"../../../../models/PotentialGraduate\");\n\nconst Finish = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n    \n    //const [totalCreditsCompleted, setTotCredComplete] = useState(0); //this is a potential total number of credits completed\n    //const [potGrad, setPotentialGrad] = useState(null);\n    const [allPotGrads, setAllPotGrads] = useState(null);\n\n    var totalCreditsCompleted = parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits);\n\n    // If the user's recommended courses has been lost, redirect to start page to generate them again\n    if (props.recCourses === null) { \n        history.push({\n        pathname: '/start'\n        })\n    }\n\n    async function getAllPotentialGraduate() {\n        try{\n            const res = await fetch(\"/student/potential-graduates/all\", {\n                method: \"GET\"\n            });\n            const parseData = await res.json();\n            //console.log(parseData);\n            setAllPotGrads(parseData);\n        }\n        catch(err){\n            console.log(\"Error: \" + err.message);\n        }\n    }\n    \n    //NOTE - fix the delete potential graduate\n    /*\n    async function getPotentialGraduate() {\n         \n        fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(data);\n                setPotentialGrad(data);\n            })\n            .catch((err) =>{\n                console.log(err.message);\n            });\n       \n        try {\n            const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"), {\n            method: \"GET\",\n            headers: {\n                //token: localStorage.getItem(\"token\")\n            }\n          });\n          \n          const parseData = await res.json();\n          //console.log(JSON.stringify(parseData));\n          setPotentialGrad(parseData);\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n        \n    }\n    */\n\n    //getPotentialGraduate();\n\n    useEffect(() => {\n        props.setProg(100); // Set advising progress to 100%\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        //setTotCredComplete(parseInt(props.studCredComplete) + parseInt(props.newDeg) + parseInt(props.courseInProgCredits));//add the credits the student completed so far to the course credits that the student selected from advising \n        \n        getAllPotentialGraduate();\n        //console.log(\"1\");\n        \n        /*\n        \n        async function getPotentialGraduate() {\n            try{\n                const res = await fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"));\n                const parseData = await res.json();\n                setPotentialGrad(parseData);\n            }\n            catch(err){\n                console.log(\"Error: \" + err.message);\n            }\n            /*\n            fetch(\"/student/a-potential-graduate/\" + localStorage.getItem(\"username\"))\n                .then((res) => res.json())\n                .then((data) => {\n                    console.log(data);\n                    setPotentialGrad(data);\n                })\n                .catch((err) =>{\n                    console.log(err.message);\n                });\n            */\n               \n        //}\n        \n        //getPotentialGraduate();\n        \n        \n    }, []);\n    //console.log(\"pot grad \"+potGrad);\n    //console.log(\"all pot grad \"+JSON.stringify(allPotGrads));\n    \n    \n    useEffect(() => {\n        //findGraduate();\n        if (!uploaded) { // If advising session has not yet been uploaded\n            var requestOptions = { // Create POST request\n                method: 'POST',\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                redirect: 'follow'\n            };\n\n            fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and their courses to the database\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            \n            setUploaded(true);\n            //console.log(\"2\");\n        }\n\n        //console.log( \"tots \" +totalCreditsCompleted);\n        if(totalCreditsCompleted >= 93){\n            if(!props.gradUploaded){//if potential graduate has not been uploaded to database yet\n                var requestOptions = { // Create POST request\n                    method: 'POST',\n                    headers: {\n                        token: localStorage.getItem(\"token\"),\n                        \"Content-type\": \"application/json\",\n                    },\n                    redirect: 'follow'\n                };\n                fetch(`/student/potential-graduate/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to upload potential graduate\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                \n                props.setGradUploaded(true); \n            }\n        }\n        //console.log(\"3\");\n\n        //console.log(\"delete \"+ totalCreditsCompleted);\n        \n        //console.log(\"grad up \"+props.gradUploaded);\n        if((totalCreditsCompleted >= 0 && totalCreditsCompleted < 93) && props.gradUploaded===true){//gradUploaded===true potGrad!=null\n            //if(allPotGrads!==null){\n                //console.log(\"true\");\n                //const found = allPotGrads.find(grad => {\n                    //return grad.studentId === localStorage.getItem(\"username\");\n                //});\n                //console.log(\"found \"+found);\n            //}\n            \n            var requestOptions2 = {//create DELETE request\n                method: 'DELETE',\n                headers: {\n                    token: localStorage.getItem(\"token\")\n                }\n            };\n            fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2)\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n\n            props.setGradUploaded(false);\n            //console.log(\"4\");\n        }\n    \n        /*\n        else{\n            if(totalCreditsCompleted >= 0 && totalCreditsCompleted < 93){\n                console.log(\"delete \"+ totalCreditsCompleted);\n           \n                var requestOptions2 = {//create DELETE request\n                    method: 'DELETE',\n                    headers: {\n                        token: localStorage.getItem(\"token\")\n                    }\n                };\n                fetch(`/student/potential-graduate/delete/${localStorage.getItem(\"username\")}`, requestOptions2)\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .catch(error => console.log('error', error));\n                }\n            \n        }\n        */\n        \n\n    }, [totalCreditsCompleted]);\n    //console.log(\"total credits \"+ totalCreditsCompleted);\n    //console.log(\"grad upload \"+props.gradUploaded);\n\n    async function uploadAdvisingSession() {\n        try {\n          const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n          return response\n        }\n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    \n \n\n    return (\n        <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're all done with advising!</p>\n                                <p className=\"almost-text\">Here's a list of all the courses you chose:</p>\n                                {\n                                    Array.from({ length: props.chosenCourses.length }, (_, k) => {\n                                        return <p className=\"course-chosen blue-txt\">{props.chosenCourses[k]}</p>\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  \n}\n\nexport default Finish;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Start.js",["250","251"],"import React, { Component } from \"react\";\nimport \"../assets/css/Start.css\";\nimport { Link } from 'react-router-dom'\nimport { useEffect, useState } from \"react\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Start = (props) => { \n\n    const [radio, setRadio] = useState(null); // Store which radio was selected\n    const [programme, setProgramme] = useState(\"None\"); // Store which programme was selected\n    const [loading, setLoading] = useState(false); // Boolean used to indicate whether or not the recommended courses for the user has been generated\n\n    useEffect(() => {\n        props.setHidden(true); // Hide the sidebar\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n    }, []);\n    \n    var programmes = PullProgrammes(); // Get all degree programmes from the database\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n\n    // Function that runs when the next button is clicked and the user is a new student\n    const onClickFunction = () => {\n        setLoading(true);\n\n        // Iterate through all programmes\n        for(var i=0; i<programmes.length; i++) {\n            if (programmes[i].name === programme) { // If programme is the one that the user selected\n                var programmeId = programmes[i].id;\n            }\n        }\n        if (programmeId) { // If programme was found\n            determineCourses(programmeId); // Generate recommended courses\n        }\n    }\n\n    // Function to fetch courses that are associated with a given programme\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    // Function to generate list of recommended courses for a new student\n    async function determineCourses(programmeId){\n\n        var recCourses = []; // Array to store the recommended courses for the user\n        var today = new Date(); // Today's date\n        var currentSem; // Student's current semester\n        \n        if (today.getMonth() < 4) { // If the date is currently between January and April\n            currentSem = \"2\";\n        }\n        // else if (today.getMonth() < 6) { // If the date is currently between May and July\n        //     currentSem = \"1\";\n        // }\n        else { // If the date is currently between August and December\n            currentSem = \"1\";\n        }\n\n        var courses = await getProgrammeCourses(programmeId);\n\n        // Iterate through courses\n        for(var i=0; i<courses.length; i++) {\n\n            // Get core level I courses for the current semester\n            if (courses[i].type === \"Core\" && courses[i].semester === currentSem && courses[i].level === \"I\") {\n                recCourses.push(courses[i].courseCode);\n            }\n        }\n\n        props.setRecommended(recCourses); // Set global state of recommended courses\n        \n        // Route user to courses page\n        history.push({\n            pathname: '/courses'\n        })\n        \n    }\n\n    // Function that runs when a radio button is selected\n    function onRadioChange(event) { \n        setRadio(event.currentTarget.value); // Set radio state to value of the radio selected\n        if (event.currentTarget.value === \"new\") { // If the user is a new student\n            props.setDegProg(0); // Set degree progress to 0\n            props.setCreds(93); // Set remaining credits for student to 93\n            props.setShowBack(false); // Hide back button on career page\n        }\n    }\n\n    // Function that runs when an option in the dropdown is selected\n    function onSelectChange(event) { \n        setProgramme(event.currentTarget.value); // Set programme state to value of option\n        localStorage.setItem(\"programme\", event.currentTarget.value); // Set localStorage item to value of option\n        props.setStudentProgramme(event.currentTarget.value); // Set global student programme state to value of option\n    }\n\n \n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                    <div className=\"header\">\n                        <p className=\"welcome blue-txt\">Welcome to myAdvisor</p>\n                        <p className=\"started blue-txt\">Let's get started.</p>\n                    </div>\n                    <div className=\"card start-card\">\n                        <div className=\"card-body\">\n                        <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosNew\" value=\"new\"  onChange={onRadioChange}/>\n                                <label class=\"form-check-label new-label\" htmlFor=\"studentRadiosNew\">\n                                    I am a new student in my first semester of my programme\n                                </label>\n                                { radio === \"new\" ? (\n                                    <div className=\"row select-row\">\n                                        <div className=\"col-sm-6\">\n                                            <div class=\"form-group\">\n                                                <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={onSelectChange}>\n                                                <option value=\"None\">Select your programme</option>\n                                                {\n                                                 Array.from({ length: programmes.length }, (_, k) => {\n                                                    return <option value={programmes[k].name}>{programmes[k].name}</option> \n                                                })}\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    ) : (null) }\n                            </div>\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosCont\" value=\"cont\"  onChange={onRadioChange}/>\n                                <label class=\"form-check-label\" htmlFor=\"studentRadiosCont\">\n                                    I am a continuing student\n                                </label>\n                                { radio === \"cont\" ? (\n                                    <div className=\"row select-row\">\n                                        <div className=\"col-sm-6\">\n                                            <div class=\"form-group\">\n                                                <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={onSelectChange}>\n                                                <option value=\"None\">Select your programme</option>\n                                                {\n                                                 Array.from({ length: programmes.length }, (_, k) => {\n                                                    return <option value={programmes[k].name}>{programmes[k].name}</option> \n                                                })}\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    ) : (null) }\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                        { radio === \"new\" && programme !== \"None\" ? (\n\n                                <div className=\"col-sm-2\">\n                                    <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\" onClick={onClickFunction}>Next</button>\n                                </div>\n                            ) :\n\n                            radio === \"new\" && programme === \"None\" ? (\n                            <div className=\"col-sm-2\">\n                                <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                            </div>) : \n                            \n                            radio === \"cont\" ? (\n                              <div className=\"col-sm-2\">\n                                <Link to=\"/home\">\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                                </Link>\n                              </div>\n                            ) : \n\n                            (\n                              <div className=\"col-sm-2\">\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                              </div>\n                            )\n                        }\n                        { loading ? (\n                            <div className=\"col-sm-2\">\n                                <CircularProgress className=\"circ-prog start-prog\" size={30}/>\n                            </div>\n                        ) : (null)\n                        }\n                        </div>\n                    </div>\n                </div>\n        </div>\n        );\n    \n}\n\nexport default Start;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentProfile.js",["252","253","254","255","256"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\"\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullCourses from \"./PullCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\";\n\nconst StudentProfile = (props) => {\n\n    const [uploaded, setUploaded] = useState(true); // Boolean value to indicate whether or not a transcript has been uploaded\n    const [processed, setProcessed] = useState(false); // Boolean value to indicate whether or not the recommended courses have been finished generating\n    const newDegProg = props.newDeg;\n\n    // Function to refresh page once a transcript has been uploaded\n    function uploadedHandler() {\n        window.location.reload();\n    }\n\n    var details = PullDetails(localStorage.getItem(\"username\")); // Get student details from database\n    var studentCourses = PullStudentCourses(localStorage.getItem(\"username\")); // Get student courses from database\n    var programmes = PullProgrammes(); // Get list of all degree programmes from database\n    var courses = PullCourses(); //Get list of all courses from database\n    var courseInProgCreds = 0;\n   \n\n    function getCreditsInprogressCourses(){\n        var amountCreditsInProg = 0;\n        // Iterate through student courses list\n        for(var j=0; j<studentCourses.length; j++){\n            if(studentCourses[j].grade === \"IP\"){//if an \"In Progress\" course is found\n                for(var count=0; count<courses.length; count++){\n                    if(studentCourses[j].courseCode === courses[count].courseCode){\n                        amountCreditsInProg = amountCreditsInProg + courses[count].credits;\n                    }\n                }\n            }\n        }\n        return amountCreditsInProg;\n    }\n \n    useEffect(() => {\n        props.setCreditsCompleted(details.credits);\n        //props.setNewDegProg(newDegProg);\n        //courseInProgCreds = getCreditsInprogressCourses();\n        props.setCourseInprogCreds(getCreditsInprogressCourses());\n        props.setDisplay(true); // Show the \"Begin Advising\" button on the sidebar\n        props.setHidden(false); // Unhide the sidebar\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        if (!processed) { // If the student's transcript hasn't been processed as yet\n            if (details.gpa < 2.0 && details.gpa != 0) { // If the student's gpa is less than 2 and not 0 (0 means their GPA hasn't been calculated by UWI yet)\n                props.setAcWarning(true); // Indicate that they are on academic warning\n            }\n            if (details.length === 0) { // If nothing was pulled from the student's details\n                setUploaded(false); // Indicate that the user has not uploaded their transcript\n                props.setDegProg(0); // Set degree progress to 0%\n                props.setCreds(93); // Set remaining credits left for degree to 93\n            }\n            else {\n                setUploaded(true); // Indicate that the user has uploaded their transcript\n                props.setDegProg(details.progress); // Set degree progress percentage\n                props.setCreds(93 - details.credits); // Set credits left for degree\n                //- courseInProgCreds\n            }\n\n            var studentProgramme = props.programme; // Get student programme that they selected on Start page\n\n            if (studentProgramme === null) { // If student programme data has been lost from state\n                studentProgramme = localStorage.getItem(\"programme\");\n            }\n\n            // Iterate through programmes list\n            for (var i=0; i<programmes.length; i++) {\n                if (programmes[i].name === studentProgramme) { // If student programme is in programmes list\n                    var programmeId = programmes[i].id;\n                }\n            }\n            if (programmeId) { \n                determineCourses(programmeId);\n            }\n        }\n    });\n\n    // Function to fetch courses that are associated with a given programme\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    // Grades which do not give credits\n    let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\", \"FMP\"]\n\n    // Function to split courses by semester and level\n    function splitBySem(coreRes, courses) {\n        var semesterArr = [[]];\n\n        // Iterate through programme courses\n        for (var key in coreRes) {\n\n            // Iterate through student courses\n            for (var i=0; i<courses.length; i++) {\n                if (key === courses[i].courseCode) { // If programme course is in courses array\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"I\")) { // If Year 1, Semester 1 course\n                        if (!semesterArr[0]) { // Initialise 2D array\n                            semesterArr[0] = [];\n                        }\n                        semesterArr[0].push({ // Push course code and student grade into array\n                            courseCode: key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"I\")) {\n                        if (!semesterArr[1]) {\n                            semesterArr[1] = [];\n                        }\n                        semesterArr[1].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[2]) {\n                            semesterArr[2] = [];\n                        }\n                        semesterArr[2].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[3]) {\n                            semesterArr[3] = [];\n                        }\n                        semesterArr[3].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[4]) {\n                            semesterArr[4] = [];\n                        }\n                        semesterArr[4].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[5]) {\n                            semesterArr[5] = [];\n                        }\n                        semesterArr[5].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n        return semesterArr;\n    }\n\n    // Function to get all core courses from programme courses\n    function getCoreCourses(courses) {\n        var core = [];\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\") {\n                core.push(courses[i]);\n            }\n        }\n        return core;\n    }\n\n    function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n        var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n        var coreY1S2 = coreSemesterArr[1];\n        var coreY2S1 = coreSemesterArr[2];\n        var coreY2S2 = coreSemesterArr[3];\n        var coreY3S1 = coreSemesterArr[4];\n        var coreY3S2 = coreSemesterArr[5];\n        var recCourses = courses;\n        var key;\n\n        if (year === 1 && currentSem === 1) { //If student is in Year 1 Semester 1\n            for (key in coreY1S1) { // Iterate core courses offered in year 1 semester 1\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") { // If course has not been done before or student failed it in the past\n                    if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n                        recCourses.push(coreY1S1[key].courseCode) // Add course to recommended course array\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) { // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in coreY3S1) {\n                if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S1[key].courseCode))\n                        recCourses.push(coreY3S1[key].courseCode)\n                }\n            }\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) {\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in coreY3S2) {\n                if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S2[key].courseCode))\n                        recCourses.push(coreY3S2[key].courseCode)\n                }\n            }\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        return recCourses;\n    }\n\n    // Function to remove courses from recommended courses list if the student does not satisfy the prerequisites\n    function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n        var index;\n\n        // Iterate through programme courses\n        for (var i=0; i<courses.length; i++) {\n            if(recCourses.includes(courses[i].courseCode)) { // If course is being recommended\n                var prereq = courses[i].prerequisites; // Store course prerequisites\n                if (prereq.length === 8) { // If course only has 1 prerequisite\n                    if (!(studentCourses[prereq] === \"P\")) { // If the student didn't pass the course\n                        index = recCourses.indexOf(courses[i].courseCode); // Find index of course in recCourses array\n                            if (index > -1) { // If index was found\n                                recCourses.splice(index, 1); // Remove course from recCourses array\n                            }\n                    }\n                }\n                if (prereq.length > 8) { // If course has 2 prerequisites or an alternative prerequisite\n                    var prereq1 = prereq.slice(0, 8); // Get 1st prereq\n                    var prereq2 = prereq.slice(-8); // Get 2nd prereq\n                    if (prereq.charAt(9) === \"|\") { // If the prereqs have OR condition\n                        if (!((studentCourses[prereq1] === \"P\") || (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                    if (prereq.charAt(9) === \"&\") { // If the prereqs have AND condition\n                        if (!((studentCourses[prereq1] === \"P\") && (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Function to indicate is a student passed, failed, didn't do a course or is in progress\n    function determineStudentCourses(core) {\n        var coreRes = {};\n        for (var i=0; i<core.length; i++){\n            for (var j=0; j<studentCourses.length; j++) {\n                if ((studentCourses[j].courseCode === core[i].courseCode) && (studentCourses[j].grade === \"IP\")){\n                    coreRes[`${core[i].courseCode}`] = \"IP\";\n                    //props.setNewDegProg(props.newDeg + props.courseInProgCredits);\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && !(noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"P\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && (noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"F\";\n                }\n                else {\n                    if (!coreRes[`${core[i].courseCode}`]) {\n                        coreRes[`${core[i].courseCode}`] = \"N\";\n                    }\n                }\n            }\n        }\n        return coreRes;\n    }\n\n    // Function to determine the recommended courses\n    async function determineCourses(programmeId){\n        \n        let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n        let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n        let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n        let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n        let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n        let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n        var programmeCourses = {}; // Dictionary to store all programme courses\n        var semesterArr = []; // Array to store courses by semester\n        var coreSemesterArr = []; // Array to store core courses by semester\n        var today = new Date(); // Today's date\n        var currentSem; // Value to store current semester\n\n        var courses = await getProgrammeCourses(programmeId);\n\n        \n        for (var i=0; i<courses.length; i++) { // Initialise Courses for Degree using their Level and Semester\n            if (courses[i].level === \"I\") {\n                if (courses[i].semester === \"1\") {\n                    Y1S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y1S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"II\") {\n                if (courses[i].semester === \"1\") {\n                    Y2S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y2S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"III\") {\n                if (courses[i].semester === \"1\") {\n                    Y3S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y3S2[courses[i].courseCode] = \"N\";\n                }\n            }\n        }\n\n        programmeCourses = determineStudentCourses(courses); // Determine what courses a student failed, passed, didnt do or is in progress\n        //console.log(\"courses \"+JSON.stringify(programmeCourses));\n        semesterArr = splitBySem(programmeCourses, courses); // Split courses by semester\n        var coreCourses = getCoreCourses(courses); // Get core courses\n        coreSemesterArr = splitBySem(programmeCourses, coreCourses); // Split core courses by semester\n\n        var recCourses = [];\n        var counter = 0;\n        var year = 1;\n        var sem = 1;\n        var key;\n\n\n        Y1S1 = semesterArr[0];\n        //console.log(programmeCourses);\n        Y1S2 = semesterArr[1];\n        Y2S1 = semesterArr[2];\n        Y2S2 = semesterArr[3];\n        Y3S1 = semesterArr[4];\n        Y3S2 = semesterArr[5];\n\n        counter = 0;\n        // If a student passed, failed or the course is in progress, assume that the student is in the next semester\n        for (key in Y1S1) {\n            if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n                counter+=1;\n            }\n        }\n        if (counter > 1) {\n            sem = 2;\n        }\n        counter = 0;\n        if (year === 1 && sem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 3;\n            }\n        }\n        counter = 0;\n        if (year === 3 && sem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n\n        if (today.getMonth() < 4) { // If the date is currently between January and April\n            currentSem = 2;\n        }\n        // else if (today.getMonth() < 6) { // If the date is currently between May and July\n        //     currentSem = 1;\n        // }\n        else { // If the date is currently between August and December\n            currentSem = 1;\n        }\n\n        // Recommended courses based on current year and semester if the student has not done the course yet\n        if (year === 1 && currentSem === 1) {\n            for (key in Y1S1) {\n                if (Y1S1[key].grade === \"N\") {\n                    recCourses.push(Y1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"N\") {\n                    recCourses.push(Y1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"N\") {\n                    recCourses.push(Y2S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"N\") {\n                    recCourses.push(Y2S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"N\") {\n                    recCourses.push(Y3S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in Y3S2) {\n                if (Y3S2[key].grade === \"N\") {\n                    recCourses.push(Y3S2[key].courseCode)\n                }\n            }\n        }\n        \n        recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n        removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n        props.setRecommended(recCourses);\n        props.setLevel(year);\n        if (props.recCourses !== null) {\n            props.setLoad(false);\n        }\n        setProcessed(true);\n    }\n\n \n\n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                <div className=\"row\">\n                        <div className=\"col-sm-10\">\n                    <p className=\"header blue-txt\">Student Details</p>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            { uploaded ? (\n                                <DetailsCard details={details} uploadedHandler={uploadedHandler} setProg={props.setProg}></DetailsCard> ) : (\n                                <NoTranscript uploadedHandler={uploadedHandler} setProg={props.setProg}></NoTranscript>\n                            ) }\n                        </div>\n                    </div>\n                    <p className=\"header blue-txt\">Courses Completed</p>\n                     { uploaded ? (\n                        <StudentCoursesCard courses={studentCourses}></StudentCoursesCard> ) : (\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <table class=\"table table-borderless table-striped\">\n                                    <thead>\n                                        <tr class=\"d-flex blue-txt\">\n                                            <th class=\"col-1 level-cell\">Level</th>\n                                            <th class=\"col-2 code-cell\">Course Code</th>\n                                            <th class=\"col-8 title-cell\">Course Title</th>\n                                            <th class=\"col-1 credit-cell\">Grade</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        )\n                     } \n                     </div>\n                     </div>                 \n                </div>\n        </div>\n    );\n\n}\n\nexport default StudentProfile;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/login.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/TopBar.js",["257","258"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav, Navbar, Button } from 'react-bootstrap';\n\nfunction TopBar(props) {\n\n  function logOut(){\n    localStorage.clear();\n    window.location.reload(false);\n  }\n\n  const user = localStorage.getItem(\"user\")\n\n\n\n  return (\n    <div>\n      { user === \"admin\" || props.hide ? (\n        <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\n          \n            <Nav className=\"ml-auto\">\n              <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\n            </Nav>\n        \n        </Navbar>\n        ) : ( \n        <div className=\"row\">\n          <div className=\"col-sm-10\">\n            <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\n              <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\n              \n                <Nav className=\"ml-auto\">\n                  <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\n                </Nav>\n            </Navbar>\n          </div>\n        </div> \n      )\n      }\n    </div>\n  );\n}\n\nexport default TopBar;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/StaffDashboard.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Courses.js",["259"],"import React, { useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport CoursesTable from \"./CoursesTable\";\nimport AddCourse from \"./AddCourse\";\nimport {Jumbotron, Container} from 'react-bootstrap';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n/*\n    Courses is a component that displays the courses table and addCourses component.\n*/\n\nfunction Courses() {\n    /*\n        The show state is used to keep track of the visibility of the addCourses modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleClose sets the show state to false, which closes the modal.\n    */ \n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    /*\n        The courses state is used store all the courses that will be displayed in the table.\n        The loading state is used to keep track of getting the courses from the server. \n        It's initial state is true, so the table will not be displayed until the system has fetched all courses.\n    */ \n    const [courses, setCourses] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    /*\n        notifyDelete is used to display a toast notifications when a course is deleted. It displays a red toast.\n    */\n    const notifyDelete = (text) => toast.error(text);\n\n    /*\n        getCourses creates a get request to the server that gets all the courses on the system and stores it in the courses state.\n    */\n    async function getCourses() {\n        try {\n            const res = await fetch(\"/courses/all\", {\n            method: \"GET\",\n          });\n          \n          const parseData = await res.json();\n          setCourses(parseData);\n          setLoading(false);\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    /*\n        deleteCourse creates a delete request to the server that deletes the course with the specified course id\n    */\n    async function deleteCourse(courseCode) {\n        try {\n          const res = await fetch(\"/courses/delete/\" + courseCode, {\n            method: \"DELETE\",\n            headers: {\n                token: localStorage.getItem(\"token\")\n            },\n          });\n    \n            setLoading(false);\n            refreshTable();\n            notifyDelete(courseCode + \" Deleted\");\n          \n        } catch (err) {\n            notifyDelete(err.message);\n            console.error(err.message);\n        }\n    }\n\n    /*\n        confirmDelete is a popup that asks the user to confirm that they want to delete a course\n    */\n    function confirmDelete(courseCode){\n        confirmAlert({\n          title: 'Delete Confirmation',\n          message: 'Are you sure you want to delete ' + courseCode + \"?\",\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => deleteCourse(courseCode)\n            },\n            {\n              label: 'No',\n            }\n          ]\n        });\n    };\n\n    useEffect(() => {\n        getCourses();\n    }, []);\n\n    /*\n        refreshTable sets the loading state to true and gets the courses from the system.\n    */\n    function refreshTable(){\n        setLoading(true);\n        getCourses();\n    }\n\n    return (\n        <>\n            <Jumbotron fluid>\n                <Container>\n                    <h2>Courses</h2>\n                </Container>\n            </Jumbotron>\n            <div class=\"container\">\n                <div class=\"row mt-4\">\n                    {/* Courses Table */}\n                    <div class=\"col-10\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-body shadow-sm\">\n                                <CoursesTable courses={courses} loading={loading} confirmDelete={confirmDelete} refreshTable={refreshTable}/>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Buttons */}\n                    <div class=\"col\">\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShow}>Add Course</button>\n                    </div>\n\n                    <Modal show={show} onHide={handleClose} size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>Add Course</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body >\n                            <AddCourse setShow={setShow} refreshTable={refreshTable} />\n                        </Modal.Body>\n                    </Modal>\n                </div>\n            </div>\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default Courses;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Students.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Settings.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Reports.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Sessions.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Programmes.js",["260","261","262"],"import React, { useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport ProgrammesTable from './ProgrammesTable';\nimport AddProgramme from \"./AddProgramme\";\nimport DeleteProgramme from \"./DeleteProgramme\";\nimport AddCourseToProgramme from \"./AddCourseToProgramme\";\nimport {Jumbotron, Container} from 'react-bootstrap';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n/*\n    Programmes is a component that displays the programmes table.\n*/\nfunction Programmes() {\n    /*\n        The show state is used to keep track of the visibility of the addProgrammes modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleClose sets the show state to false, which closes the modal.\n    */ \n        const [show, setShow] = useState(false);\n        const handleShow = () => setShow(true);\n        const handleClose = () => setShow(false);\n\n    /*\n        The showDeleteProg state is used to keep track of the visibility of the deleteProgramme modal.\n        It's initial state is false.\n        handleShowProgramme sets the show state to true, which displays the modal.\n        handleCloseProgramme sets the show state to false, which closes the modal.\n    */ \n        const [showDeleteProg, setShowDeleteProg] = useState(false);\n        const handleShowProgramme = () => setShowDeleteProg(true);\n        const handleCloseProgramme = () => setShowDeleteProg(false);\n\n    /*\n        The showAddCourseProg state is used to keep track of the visibility of the addCourseToProgramme modal.\n        It's initial state is false.\n        handleShowCourses sets the show state to true, which displays the modal.\n        handleCloseCourses sets the show state to false, which closes the modal.\n    */ \n        const [showAddCourseProg, setShowAddCourseProg] = useState(false);\n        const handleShowCourses = () => setShowAddCourseProg(true);\n        const handleCloseCourses = () => setShowAddCourseProg(false);\n\n    \n\n    /*\n        The programmes state is used store all the programmes that will be displayed in the table.\n        The loading state is used to keep track of getting the programmes from the server. \n        It's initial state is true, so the table will not be displayed until the system has fetched all programmes.\n    */ \n    const [programmes, setProgrammes] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    /*\n        notifyDelete is used to display a toast notifications when a programme is deleted. It displays a red toast.\n    */\n        const notifyDelete = (text) => toast.error(text);\n\n    /*\n        getProgrammes creates a get request to the server that gets all the programmes on the system and stores it in the programmes state.\n    */\n    async function getProgrammes() {\n        try {\n            const res = await fetch(\"/programmes/all\", {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setProgrammes(parseData);\n            setLoading(false);\n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    useEffect(() => {\n        getProgrammes();\n    }, []);\n\n    /*\n        refreshTable sets the loading state to true and gets the programmes from the system.\n    */\n    function refreshTable(){\n        setLoading(true);\n        getProgrammes();\n    }\n\n    /*\n        deleteProgramme creates a delete request to the server that deletes the programme with the specified name\n    */\n        async function deleteProgramme(programmeName) {\n            try {\n              const res = await fetch(\"/programmes/delete/\" + programmeName, {\n                method: \"DELETE\",\n                headers: {\n                    token: localStorage.getItem(\"token\")\n                },\n              });\n        \n                setLoading(false);\n                refreshTable();\n                notifyDelete(programmeName + \" Deleted\");\n              \n            } catch (err) {\n                notifyDelete(err.message);\n                console.error(err.message);\n            }\n        }\n    \n    return (\n        <>\n            <Jumbotron fluid>\n                <Container>\n                    <h2>Programmes</h2>\n                </Container>\n            </Jumbotron>        \n            <div class=\"container\">\n                <div class=\"row mt-4\">\n                    {/* Courses Table */}\n                    <div class=\"col-10\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-body shadow-sm\">\n                                <ProgrammesTable programmes={programmes} loading={loading}/>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Buttons */}\n                    <div class=\"col\">\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShow}>Add Programme</button>\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShowProgramme} style={{marginTop: 5}} >Delete Programme</button>\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShowCourses} style={{marginTop: 5}} >Add Course to Programme</button>\n                        \n                    </div>\n\n                    <Modal show={show} onHide={handleClose} size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>Add Programme</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <AddProgramme setShow={setShow} refreshTable={refreshTable}/>\n                        </Modal.Body>\n                    </Modal>\n\n                    <Modal show={showDeleteProg} onHide={handleCloseProgramme} size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>Delete Programme</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <DeleteProgramme setLoading={setLoading} setShowDeleteProg={setShowDeleteProg} programmes={programmes} refreshTable={refreshTable}/>\n                        </Modal.Body>   \n                    </Modal>\n\n                    \n                    <Modal show={showAddCourseProg} onHide={handleCloseCourses} size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>Add Course to Programme</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <AddCourseToProgramme setShowAddCourseProg={setShowAddCourseProg} refreshTable={refreshTable}/>\n                        </Modal.Body>   \n                    </Modal>\n\n                    \n                    \n\n                </div>\n            </div>\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default Programmes;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Bot Framework/webChat.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullCourses.js",["263"],"import React, { useEffect, useState } from \"react\";\n\nconst PullCourses = () => {\n    const [courses, setCourses] = useState([]);\n  \n    async function getCourses() {\n      try {\n        const res = await fetch(\"/courses/all\", {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCourses(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get course data\n    useEffect(() => {\n      getCourses();\n    }, []);\n\n    return (\n        courses\n      );\n    };\n\nexport default PullCourses;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CourseNode.js",["264","265"],"import React, { Component } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport { useEffect, useState } from \"react\";\n\nfunction CourseNode(props) {\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [selected, setSelected] = useState(false); // State used to rerender the view\n\n    // Function that runs when the user clicks on a course\n    const onClickFunction = () => {\n        // Reroute user to course details page\n        history.push({\n            pathname: `/coursedetails`,\n            state: { course: props.course }\n          })\n    }\n    \n    // Function that runs when the user checks or unchecks the checkbox\n    const onChange = (event) => {\n        setSelected(!selected);\n        props.onChange(event, props.course.credits); // Run the onChange function from CourseList\n    }\n    \n\n    return (\n        <div className=\"course-node\">\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\n                    <p className=\"course-code blue-txt\">{props.course.courseCode}</p>\n                </div>\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\n                    <p className=\"credit-header blue-txt\">Credits</p>\n                </div>\n                <div className=\"col-lg-1 col-sm-2\">\n                    <p className=\"add-header blue-txt\">Add</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\n                    <p className=\"course-title\">{props.course.courseTitle}</p>\n                </div>\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\n                    <p className=\"credits\">{props.course.credits}</p>\n                </div>\n                <div className=\"col-lg-1 col-sm-2 check-div\">\n                    { props.chosen.includes(props.course.courseCode) ? (\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange} checked></input>         \n                    ) : (\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange}></input>        \n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CourseNode;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/CareerCheck.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullCareers.js",["266"],"import React, { useEffect, useState } from \"react\";\n\nconst PullCareers = () => {\n    const [careers, setCareers] = useState([]);\n  \n    async function getCareers() {\n      try {\n        const res = await fetch(\"/careers/all\", {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCareers(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get career data\n    useEffect(() => {\n      getCareers();\n    }, []);\n\n    return (\n        careers\n      );\n    };\n\nexport default PullCareers;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullProgrammes.js",["267"],"import React, { useEffect, useState } from \"react\";\n\nconst PullProgrammes = () => {\n    const [programmes, setProgrammes] = useState([]);\n  \n    async function getProgrammes() {\n      try {\n        const res = await fetch(`/programmes/all`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setProgrammes(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n\n    useEffect(() => {\n        getProgrammes();\n      }, []);\n  \n    return (\n        programmes\n      );\n    };\n\nexport default PullProgrammes;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/DetailsCard.js",["268"],"import React, { Component } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\n\nclass DetailsCard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            file: null, // Store file uploaded by user\n            editing: false // Boolean to determine if the user is reuploading their transcript or not\n        }\n       props.setProg(20); // Set degree progress to 20%\n    }\n\n    // Function that runs when the user clicks to re-upload their transcript or to cancel re-upload\n    editingHandler = () => {\n        this.setState({\n            editing: !this.state.editing\n        });\n    }\n\n    // Function that runs when the user uploads a file\n    onChangeHandler = event =>{\n        this.setState({\n            file: event.target.files[0]\n        })\n    }\n\n    // Functions that runs when the user clicks the \"Upload\" button\n    onClickHandler = () => {\n        var formdata = new FormData();\n        if (this.state.file === null) { // If no file has been uploaded, do nothing\n            return;\n        }\n        formdata.append(\"file\", this.state.file, \"[PROXY]\"); // Add file to FormData object, Proxy is only used in development to connect to node server\n\n        var requestOptions = { // Create DELETE request\n          method: 'DELETE',\n          redirect: 'follow'\n        };\n\n        var studentId = localStorage.getItem(\"username\"); // Get username from localStorage\n\n        toast.success(\"Processing transcript...\") // Make toast to let user know their transcript is being processed\n        \n        fetch(`/transcript/courses/deleteAll/${studentId}`, requestOptions) // Make request to server to delete all of a student's related courses from the database\n            .then(response => response.text())\n            .then(result => console.log(result))\n            .then(result => {\n                fetch(`/transcript/details/delete/${studentId}`, requestOptions) // Then make request to server to delete all of a student's details from the database\n                    .then(response => response.text())\n                    .then(result => console.log(result))\n                    .then(result => {\n                        var requestOptions = { // Create POST request\n                            method: 'POST',\n                            body: formdata,\n                            redirect: 'follow'\n                        };\n            \n                        fetch(\"/transcript/parseForm\", requestOptions) // Then make request to server to parse transcript, upload student details and thei r courses to the database\n                            .then(response => response.text())\n                            .then(result => console.log(result))\n                            .then(result => this.props.uploadedHandler()) // Once the data has been saved to the database, run uploadedHandler from StudentProfile\n                            .catch(error => console.log('error', error));        \n                    })\n                    .catch(error => console.log('error', error));        \n            })\n          .catch(error => console.log('error', error));\n\t}\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"card details-card\">\n                    <div className=\"card-body\">\n                        {!this.state.editing ? (\n                            <div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-2\">\n                                        <p className=\"row-title blue-txt\">Student Name:</p>\n                                    </div>\n                                    <div className=\"col-sm-10\">\n                                        <p className=\"row-info\">{this.props.details.name}</p>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-2\">\n                                        <p className=\"row-title blue-txt\">Student ID:</p>\n                                    </div>\n                                    <div className=\"col-sm-10\">\n                                        <p className=\"row-info\">{this.props.details.studentId}</p>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-2\">\n                                        <p className=\"row-title blue-txt\">Degree:</p>\n                                    </div>\n                                    <div className=\"col-sm-10\">\n                                        <p className=\"row-info\">{this.props.details.degree}</p>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-2\">\n                                        <p className=\"row-title blue-txt\">Major:</p>\n                                    </div>\n                                    <div className=\"col-sm-10\">\n                                        <p className=\"row-info\">{this.props.details.major}</p>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-2\">\n                                        <p className=\"row-title blue-txt\">Degree GPA:</p>\n                                    </div>\n                                    <div className=\"col-md-1 col-sm-2\">\n                                        <p className=\"row-info\">{this.props.details.gpa}</p>\n                                    </div>\n                                    { this.props.details.gpa < 2 && this.props.details.gpa != 0 ? (\n                                        <div className=\"col-md-9 col-sm-8\">\n                                            <p className=\"row-warning\"> Your GPA is below 2.0 and you are on Academic Warning. Please visit the Dean's Office to be Advised. </p>\n                                        </div>\n                                    ) : (null) }\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-2\">\n                                        <p className=\"row-title blue-txt\">Admit Term:</p>\n                                    </div>\n                                    <div className=\"col-sm-10\">\n                                        <p className=\"row-info\">{this.props.details.admitTerm}</p>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-3 edit-line\">\n                                        <i class=\"fas fa-pencil-alt blue-txt\"> </i>\n                                        <span className=\"edit-transcript blue-txt\" onClick={this.editingHandler}> Re-upload Transcript</span>\n                                    </div>\n                                </div>\n                            </div>\n                            ) : (\n\n                            <div>\n                                <p className=\"row-info\">Upload your new transcript.</p>\n                                <div class=\"input-field col-sm-12\">\n                                    <form action=\"\" encType=\"multipart/form-data\" method=\"POST\">\n                                        <input type=\"file\" name=\"file\" onChange={this.onChangeHandler}/>\n                                        <input type=\"button\" value=\"Upload\" class=\"btn btn-custom blue-btn\" onClick={this.onClickHandler}/>\n                                    </form>\n                                </div>\n                                <div className=\"row back-button-row\">\n                                    <div className=\"col-sm-2\">\n                                        <button type=\"submit\" class=\"btn btn-custom back-button blue-button\" onClick={this.editingHandler}>Cancel</button>\n                                    </div>\n                                </div>\n                            </div>\n\n                            ) }\n                    </div>\n                    <ToastContainer \n                        pauseOnHover\n                        position=\"top-left\"\n                        autoClose={10000}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DetailsCard;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullDetails.js",["269","270"],"import React, { useEffect, useState } from \"react\";\n\nconst PullDetails = (studentId) => {\n    const [details, setDetails] = useState([]);\n  \n    async function getDetails() {\n      try {\n        const res = await fetch(`/transcript/details/view/${studentId}`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setDetails(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get student details data\n    useEffect(() => {\n      getDetails();\n    }, []);\n\n    return (\n        details\n      );\n    };\n\nexport default PullDetails;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/PullStudentCourses.js",["271","272"],"import React, { useEffect, useState } from \"react\";\n\nconst PullStudentCourses = (studentId) => {\n    const [courses, setCourses] = useState([]);\n  \n    async function getCourses() {\n      try {\n        const res = await fetch(`/transcript/courses/viewAll/${studentId}`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCourses(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get student course data\n    useEffect(() => {\n      getCourses();\n    }, []);\n\n    return (\n        courses\n      );\n    };\n\nexport default PullStudentCourses;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/NoTranscript.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/StudentCoursesCard.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlocks.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js",[],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/CoursesTable.js",["273"],"import React, { useState } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport { Modal, Button } from \"react-bootstrap\";\nimport EditCourse from \"./EditCourse\";\nimport \"../../assets/css/Staff.css\";\n\n//TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\nconst columns = [\n  { dataField: 'courseCode', text: 'Course Code', csvText: 'Course Code', sort: true },\n  { dataField: 'courseTitle', text: 'Course Title', csvText: 'Course Title' },\n  { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\n  { dataField: 'semester', text: 'Semester', csvText: 'Semester', sort: true },\n]\n\n/*\n    defaultSorted sorts the table is ascending order based on the courseCode column.\n*/\nconst defaultSorted = [{\n  dataField: 'courseCode',\n  order: 'asc'\n}];\n\n/*\n    options is used to configure the table pagination.\n*/\nconst options = {\n  custom: true,\n  paginationSize: 5,\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  prePageText: 'Back',\n  nextPageText: 'Next',\n  lastPageText: 'Last',\n  sizePerPage: 8,\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\n/*\n    CoursesTable is a component that displays the courses in the system in a table.\n*/\nfunction CoursesTable({courses, loading, refreshTable, confirmDelete}) {\n\n    /*\n        The show state is used to keep track of the visibility of the editCourses modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleClose sets the show state to false, which closes the modal.\n    */ \n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    /*\n        The row state is used to keep track of which row is currently expanded on the table\n    */    \n    const [row, setRow] = useState();\n\n    /*\n        eCourse is used to set the row state and open the editCourse modal.\n    */ \n    function eCourse(row) {\n      handleShow();\n      //setShow(true);\n      setRow(row);\n    }\n\n    /*\n        dCourse is used to show the confirmDelete course modal.\n    */ \n    function dCourse(courseCode) {\n      confirmDelete(courseCode);\n    }\n\n    /*\n        expandRow is used to display extra information on the course of the selected row.\n        It also contains the buttons that allow the user to edit and delete the course.\n    */ \n    const expandRow = {\n        onlyOneExpanding: true,\n        renderer: row => (\n          <div>\n            <h3>{ `${row.courseCode}` } - { `${row.courseTitle}` }</h3>\n            <br/>\n            <h4>Description</h4>\n            <p>{ `${row.description}` }</p>\n\n            <h4>Prerequisites</h4>\n            <p>{ `${row.prerequisites}` }</p>\n\n            {/*if not null, then display */}\n            { row.coursework!=null && <> <h4>Coursework</h4> <p>{ `${row.coursework}` }</p> </>}\n            { row.finalExam!=null && <> <h4>Final Exam</h4> <p>{ `${row.finalExam}` }</p> </>}\n            { row.groupProject!=null && <> <h4>Group Project</h4> <p>{ `${row.groupProject}` }</p> </> }\n            { row.individualWork!=null && <> <h4>Individual Work</h4> <p>{ `${row.individualWork}` }</p> </> }\n            { row.practicalCoursework!=null && <> <h4>Practical Coursework</h4> <p>{ `${row.practicalCoursework}` }</p> </> }\n            { row.courseworkExam!=null && <> <h4>CourseWork Exam</h4> <p>{ `${row.courseworkExam}` }</p> </> }\n            { row.projectPres!=null && <> <h4>Project Presentation</h4> <p>{ `${row.projectPres}` }</p> </> }\n            { row.project!=null && <> <h4>Project</h4> <p>{ `${row.project}` }</p> </> }\n            { row.presentation!=null && <> <h4>Presentation</h4> <p>{ `${row.presentation}` }</p> </> }\n            { row.assignment!=null && <> <h4>Assignment</h4> <p>{ `${row.assignment}` }</p> </> }\n            { row.labAssessment!=null && <> <h4>Lab Assessment</h4> <p>{ `${row.labAssessment}` }</p> </> }\n            { row.midSemesterMcq!=null && <> <h4>Mid Semester Mcq</h4> <p>{ `${row.midSemesterMcq}` }</p> </> }\n            { row.projectReport!=null && <> <h4>Project Report</h4> <p>{ `${row.projectReport}` }</p> </> }\n            \n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-custom edit-course\" onClick={() => eCourse(row)}>Edit</button>\n              <button type=\"button\" class=\"btn btn-danger delete-course\" onClick={() => dCourse(row.courseCode)}>Delete</button>\n            </div>\n          </div>\n        )\n    };\n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */ \n\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ courses }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'courses.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } expandRow={ expandRow } defaultSorted={ defaultSorted } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n  );\n\n  return (\n      <>\n          {loading ? (\n            <div class=\"d-flex justify-content-center\">\n              <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n              { table }\n            </PaginationProvider>\n          )}\n\n          <Modal show={show} onHide={handleClose} size=\"lg\">\n              <Modal.Header closeButton>\n                  <Modal.Title>Edit Course</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                <EditCourse setShow={setShow} row={row} refreshTable={refreshTable}/>\n              </Modal.Body>\n          </Modal>\n        \n      </>\n\n  );\n}\n\nexport default CoursesTable;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js",["274"],"import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    SetAdvisingWindow is a component that is used to set the current advising window on the system.\n*/\nfunction SetAdvisingWindow() {\n    /*\n        notifyEdit and notifyError  is used to display a toast notifications for events.\n        notifyEdit displays a green toast and notifyError displays a red toast.\n    */    \n    const notifyEdit = (text) => toast.success(text);\n    const notifyError = (text) => toast.error(text);\n\n    /*\n        The validated state is used to keep track of the validity of the set advising window  form.\n        It's initial state is false.\n    */\n    const [validated, setValidated] = useState(false);\n\n    /*\n        The advisingStare and advisingEnd states store when the current advising window starts and end.\n    */   \n    const [advisingStart, setadvisingStart] = useState(new Date());\n    const [advisingEnd, setadvisingEnd] = useState(new Date());\n\n    /*\n        HandleSubmit gets the data from the form, checks to see if it is valid, and passes it to the setWindow function.\n    */    \n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        \n\n        const formData = {\n            advisingStart : form.elements.advisingStart.value,\n            advisingEnd : form.elements.advisingEnd.value,\n            semester : form.elements.semester.value\n        }\n\n        if(advisingStart > advisingEnd){\n            notifyError(\"Error, Start Date After End Date\");\n        } else {\n            setValidated(true);\n            setWindow(formData);\n        }\n    };\n\n    /*\n        setWindow creates a post request to the server, which sets the advising window.\n    */\n    async function setWindow(data) {\n        try {\n          const res = await fetch(\"/admin/academic-advising/window\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n          notifyEdit(\"Advising Window Updated!\");\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"advisingStart\">\n                    <Form.Label >Start Date</Form.Label>\n                    <DatePicker required selected={advisingStart} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingStart(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingStart\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"advisingEnd\">\n                    <Form.Label>End Date</Form.Label>\n                    <DatePicker required selected={advisingEnd} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingEnd(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingEnd\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"semester\">\n                    <Form.Label>Semester</Form.Label>\n                    <Form.Control required as=\"select\">\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Save</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default SetAdvisingWindow;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddCourse.js",["275"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    AddCourse allows a staff member to add courses to the system.\n*/\n\nfunction AddCourse({setShow, refreshTable}) {\n    /*\n        The validated state is used to keep track of the validity of the add course form.\n        It's initial state is false.\n    */    \n    const [validated, setValidated] = useState(false);\n\n    /*\n        The checkBoxState array is used to keep track of the checked state of the checkboxes.\n        It's initial state is false.\n    */    \n        const [checkBoxState, setCheckBoxState] = useState(new Array(13).fill(false));\n\n        const assessments = [\"coursework\", \"finalExam\", \"groupProject\", \"individualWork\", \"practicalCoursework\", \"courseworkExam\", \n                             \"projectPres\", \"project\", \"presentation\", \"assignment\", \"labAssessment\", \"midSemesterMcq\", \n                             \"projectReport\"];\n                            \n    /*\n        notifyAdded is used to display toast notifications for events. It displays a green toast.\n    */    \n    const notifyAdded = (text) => toast.success(text);\n\n    /*\n        notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n    */    \n    const notifyNotAdded = (text) => toast.error(text);\n\n    /*\n        HandleChange gets the checkboxes that were checked and stores them in an array.\n    */    \n        const handleChange = (event) => {\n\n            const updateCheckboxState = checkBoxState.map((checkbox, count) => {\n                if(count === parseInt(event.target.id)){\n                    return !checkbox;\n                }\n                else{\n                    return checkbox;\n                }\n            });\n\n            setCheckBoxState(updateCheckboxState);\n        };\n\n    /*\n        HandleSubmit gets the data from the form as passes it to the addCourse function.\n    */    \n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        setValidated(true);\n\n        const formData = {\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\n            courseTitle : form.elements.courseTitle.value,\n            credits : form.elements.credits.value,\n            semester : form.elements.semester.value,\n            level : form.elements.level.value,\n            type: form.elements.type.value,\n            prerequisites : form.elements.prerequisites.value,\n            description: form.elements.description.value,\n            coursework: String(form.elements.coursework.value) + \"%\",\n            finalExam: String(form.elements.finalExam.value) + \"%\",\n            groupProject: String(form.elements.groupProject.value) + \"%\",\n            individualWork: String(form.elements.individualWork.value) + \"%\",\n            practicalCoursework: String(form.elements.practicalCoursework.value) + \"%\",\n            courseworkExam: String(form.elements.courseworkExam.value) + \"%\",\n            projectPres: String(form.elements.projectPres.value) + \"%\",\n            project: String(form.elements.project.value) + \"%\",\n            presentation: String(form.elements.presentation.value) + \"%\",\n            assignment: String(form.elements.assignment.value) + \"%\",\n            labAssessment: String(form.elements.labAssessment.value) + \"%\",\n            midSemesterMcq: String(form.elements.midSemesterMcq.value) + \"%\",\n            projectReport: String(form.elements.projectReport.value) + \"%\"\n        }\n        \n        \n        //Get the unselected assessments and set them to null\n        for(var i=0; i<checkBoxState.length; i++){\n            if(checkBoxState[i] === false){\n                formData[assessments[i]] = null;\n            }\n\n            //if(checkBoxState[i] === true){//if checkbox is checked\n                //add elements to the formData\n                //formData[assessments[i]] = String(form.elements[assessments[i]].value) + \"%\"; \n            //}\n        }\n        addCourse(formData);\n    };\n\n    /*\n        addCourse creates a post request to the server, which adds a new course to the system.\n    */\n    async function addCourse(data) {\n        try {\n          const res = await fetch(\"/courses/add\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n            \n          });\n          \n          setShow(false);\n          refreshTable();\n\n          if(res.status===401){\n            notifyNotAdded(data.courseCode + \" Already Exists!\");\n          }\n          else{\n                if(res.status===200){\n                    notifyAdded(data.courseCode + \" Added!\");\n                }\n          }\n\n          const status = await res.statusText;\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    const styleCheckbox = {\n        marginTop: \"10px\",\n        marginLeft: \"20px\",\n        marginRight: \"10px\"\n    };\n    \n    return (\n        <>\n            <Form validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"courseCode\">\n                    <Form.Label>Course Code</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Group controlId=\"courseTitle\">\n                    <Form.Label>Course Title</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Form.Group as={Col} md=\"3\" controlId=\"credits\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"3\" controlId=\"semester\">\n                        <Form.Label>Semester</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"3\" controlId=\"level\">\n                        <Form.Label>Level</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>I</option>\n                            <option>II</option>\n                            <option>III</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"3\" controlId=\"type\">\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>Core</option>\n                            <option>Elective</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n                \n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"assessment\">\n                        <Form.Label>Assessments</Form.Label>\n\n                        <Form.Group as={Col} controlId=\"coursework\" className=\"form-inline\">\n                            <Form.Check label=\"Coursework\" id=\"0\" name=\"Coursework\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"finalExam\" className=\"form-inline\">\n                            <Form.Check label=\"Final Exam\" id=\"1\" name=\"Final Exam\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"groupProject\" className=\"form-inline\">\n                            <Form.Check label=\"Group Project\" id=\"2\" name=\"Group Project\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"individualWork\" className=\"form-inline\">\n                            <Form.Check label=\"Individual Work\" id=\"3\" name=\"Individual Work\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"practicalCoursework\" className=\"form-inline\">\n                            <Form.Check label=\"Practical Coursework\" id=\"4\" name=\"Practical Coursework\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"courseworkExam\" className=\"form-inline\">\n                            <Form.Check label=\"Coursework Exam\" id=\"5\" name=\"Coursework Exam\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"projectPres\" className=\"form-inline\">\n                            <Form.Check label=\"Project Presentation\" id=\"6\" name=\"Project Presentation\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"project\" className=\"form-inline\">\n                            <Form.Check label=\"Project\" id=\"7\" name=\"Project\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"presentation\" className=\"form-inline\">\n                            <Form.Check label=\"Presentation\" id=\"8\" name=\"Presentation\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"assignment\" className=\"form-inline\">\n                            <Form.Check label=\"Assignment\" id=\"9\" name=\"Assignment\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"labAssessment\" className=\"form-inline\">\n                            <Form.Check label=\"Lab Assessment\" id=\"10\" name=\"Lab Assessment\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"midSemesterMcq\" className=\"form-inline\">\n                            <Form.Check label=\"Mid Semester MCQ\" id=\"11\" name=\"Mid Semester MCQ\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"projectReport\" className=\"form-inline\">\n                            <Form.Check label=\"Project Report\" id=\"12\" name=\"Project Report\" onChange={handleChange} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\"/>\n                        </Form.Group>\n\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Group controlId=\"prerequisites\">\n                    <Form.Label>Prerequisites</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control required as=\"textarea\" rows={3}/>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default AddCourse;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddAccount.js",["276","277"],"import React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    AddAccount allows a staff member to add staff and student accounts to the system.\n*/\n\nfunction AddAccount() {\n    /*\n        The validated state is used to keep track of the validity of the add account form.\n        It's initial state is false.\n    */\n    const [validated, setValidated] = useState(false);\n\n    /*\n        formRef is is reference to the form, which allows for the resetting of the form.\n    */\n    const formRef = useRef(null);\n\n    /*\n        notifyError and notifyEdit is used to display toast notifications for events.\n        notifyError displays a red toast and notifyEdit displays a green toast.\n    */\n    const notifyError = (text) => toast.error(text);\n    const notifyEdit = (text) => toast.success(text);\n\n    /*\n        HandleSubmit gets the data from the form, checks to see if it is valid, and passes it to the addAccount function.\n    */\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        const url = \"\";\n\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else{\n\n            event.preventDefault();\n            event.stopPropagation();\n        \n            const formData = {\n                username : form.elements.username.value,\n                password : form.elements.password.value,\n                confirm_password : form.elements.confirm_password.value,\n                account_type: form.elements.account_type.value\n            }\n\n            if(formData.password !== formData.confirm_password){\n                notifyError(\"Passwords Don't Match\")\n            } else {\n\n                if(formData.account_type === \"Staff\"){\n                    addAccount(formData, \"/admin/staff/create\"); \n                } else if(formData.account_type === \"Student\") {\n                    addAccount(formData, \"/admin/students/create\"); \n                }\n\n                setValidated(true);\n\n                formRef.current.reset();\n                setValidated(false);\n            }\n        }\n    };\n\n    /*\n        addAccount creates a post request to the server, which creates a new account based on the account type selected.\n    */\n    async function addAccount(data, url) {\n        try {\n          const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                token: localStorage.token,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n\n          if(status === \"OK\"){\n            notifyEdit(\"Account Added!\");\n          }\n          else{\n            notifyError(\"Error, Account Already Exists.\");\n          }\n\n        } catch (err) {\n            notifyError(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form ref={formRef} validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"account_type\">\n                    <Form.Label>Account Type</Form.Label>\n                    <Form.Control as=\"select\">\n                    <option>Staff</option>\n                    <option>Student</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"username\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" required/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Col>\n                        <Form.Group controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" required/>\n                        </Form.Group>\n                    </Col>\n\n                    <Col>\n                        <Form.Group controlId=\"confirm_password\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control type=\"password\" required/>\n                        </Form.Group>\n                    </Col>\n                </Form.Row>\n \n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Add</Button></div>\n            </Form>\n\n        </> \n    );\n}\n\nexport default AddAccount;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/StudentsTable.js",["278","279","280","281","282"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\n\n//TABLE SETUP\n\n/*\n    columns, coursesColumns and inprogressCoursesColumns are used to display specific columns of the data on the tables.\n*/\nconst columns = [\n    { dataField: 'studentId', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'gpa', text: 'GPA', csvText: 'GPA', sort: true },\n    { dataField: 'degree', text: 'Degree', csvText: 'Degree', sort: true },\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\n]\n\nconst coursesColumns = [\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n    { dataField: 'grade', text: 'Grade', sort: true },\n]\n\nconst inprogressCoursesColumns = [\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\n/*\n    defaultSorted sorts the table is ascending order based on the name column.\n*/\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asc'\n}];\n\n/*\n    options and courseOptions is used to configure the table pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\n/*\n    StudentsTable is a component that displays the students in the system in a table.\n*/\nfunction StudentsTable({students, loading}) {\n    /*\n        The show state is used to keep track of the visibility of the student details modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleShow sets the show state to false, which closes the modal.\n    */ \n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    /*\n        The studentName state is used to store the currently selected student's name.\n        The studentCourses state is used to store the currently selected student's courses.\n        The completedCourses state is used to store the currently selected student's completed courses.\n        The inprogressCourses state is used to store the currently selected student's inprogress courses.        \n    */ \n    const [studentName, setStudentName] = useState([]);\n    const [studentCourses, setStudentCourses] = useState([]);\n    const [completedCourses, setCompletedCourses] = useState([]);\n    const [inprogressCourses, setInprogressCourses] = useState([]);\n\n    /*\n        rowEvents is used to get the currently selected student's name and store it in the studentName state.\n        It also gets the courses of that student.\n    */\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setStudentName(row.name);\n            getStudentCourses(row.studentId);\n        }\n    };\n\n    /*\n        getStudentCourses creates a get request to the server that gets all the courses of this specified student.\n        It also used the getCompleted and getInprogress functions to separate the courses based on if they are inprogress or completed.\n    */\n    async function getStudentCourses(studentId) {\n        try {\n            const res = await fetch(\"/transcript/courses/viewAll/\" + studentId, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setStudentCourses(parseData);\n            getCompleted(parseData);\n            getInprogress(parseData);\n            setShow(true);\n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    function getCompleted(data){\n        let arr = []\n\n        for (var key in data){\n            if(data[key].grade != 'IP'){\n                arr.push(data[key])\n            }\n        }\n\n        setCompletedCourses(arr);\n    }\n\n    function getInprogress(data){\n        let arr = []\n\n        for (var key in data){\n            if(data[key].grade == 'IP'){\n                arr.push(data[key])\n            }\n        }\n\n        setInprogressCourses(arr);\n    }\n\n    useEffect(() => {\n        getStudentCourses();\n    }, []);   \n     \n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */ \n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"studentID\"\n                    data={ students }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                        fileName: 'students.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"lg\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{studentName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                <Tabs defaultActiveKey=\"completed\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"completed\" title=\"Completed\">\n                        <ToolkitProvider\n                        keyField=\"courseCode\"\n                        data={ completedCourses }\n                        columns={ coursesColumns }\n                        search\n                        >\n                        {\n                            props => (\n                            <div>\n                                <br/>\n                                <SearchBar { ...props.searchProps } />\n                                <BootstrapTable\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\n                                />\n                            </div>\n                            )\n                        }\n                        </ToolkitProvider>                           \n                    </Tab>\n                    <Tab eventKey=\"incomplete\" title=\"Inprogress\">\n                        <ToolkitProvider\n                        keyField=\"courseCode\"\n                        data={ inprogressCourses }\n                        columns={ inprogressCoursesColumns }\n                        search\n                        >\n                        {\n                            props => (\n                            <div>\n                                <br/>\n                                <SearchBar { ...props.searchProps } />\n                                <BootstrapTable\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\n                                />\n                            </div>\n                            )\n                        }\n                        </ToolkitProvider>  \n                    </Tab>\n                </Tabs>\n              </Modal.Body>\n          </Modal>            \n        </>\n    );\n}\n\nexport default StudentsTable;\n\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/ReportsTable.js",["283","284","285","286","287"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\n\n\n//TABLE SETUP\n\n/*\n    selectYearOptions allows you to filter the year table column\n*/\n\nconst selectYearOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\n/*\n    columns is used to display specific columns of the data on the reports table.\n    It also contains code that enables the columns to be filtered.\n*/\nconst columns = [\n    { dataField: 'studentID', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'admitTerm', text: 'Admit Term', csvText: 'Admit Term', sort: true},\n    { dataField: 'id', text: 'Session ID', csvText: 'Session ID', sort: true },\n    { dataField: 'sessionDate', text: 'Session Date', csvText: 'Session Date', sort: true },\n]\n\n/*\n    defaultSorted sorts the table is ascending order based on the status column.\n*/\nconst defaultSorted = [{\n    dataField: 'status',\n    order: 'asec'\n}];\n\n\n/*\n    options is used to configure the tables pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\n/*\n    selectRow allows you to select specific rows in the table.\n*/\nconst selectRow = {\n    mode: 'checkbox',\n    clickToSelect: true\n};\n  \n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\n/*\n    ReportsTable is a component that displays the advising sessions in a table where staff can generate reports and export them.\n*/\nfunction ReportsTable({sessions, students}) {\n    const [loading, setLoading] = useState(true);\n    const [studentSessionsDetails, setStudentSessionsDetails] = useState([]);    \n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */\n\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"id\"\n                    data={ studentSessionsDetails }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'report.csv',\n                      onlyExportFiltered: true,\n                      onlyExportSelection: true,\n                      exportAll: true\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } selectRow={ selectRow } defaultSorted={ defaultSorted } filter={ filterFactory()} hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    function studentDetails(){\n        let temp = [];\n\n        for (var i in sessions){\n            for(var j in students){\n                if(sessions[i].studentID == students[j].studentId){\n                    temp.push(Object.assign({}, students[j], sessions[i]));\n                }\n            }\n        }\n\n        setStudentSessionsDetails(temp);\n\n\n        if(temp.length != 0){\n            setLoading(false);\n        }\n        \n    };\n\n    useEffect(() => {\n        studentDetails();\n    },[sessions, students]);    \n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n        </>\n    );\n}\n\nexport default ReportsTable;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/SessionsTable.js",["288","289","290"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\n\n//TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\nconst columns = [\n    { dataField: 'id', text: 'Session ID', csvText: 'Session ID', sort: true },\n    { dataField: 'studentID', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'admitTerm', text: 'Admit Term', csvText: 'Admit Term', sort: true},\n    { dataField: 'sessionDate', text: 'Session Date', csvText: 'Session Date', sort: true },\n]\n\n/*\n    defaultSorted sorts the table is ascending order based on the sessionDate column.\n*/\nconst defaultSorted = [{\n    dataField: 'sessionDate',\n    order: 'asc'\n}];\n\n/*\n    options is used to configure the table pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n  \n/*\n    SessionsTable is a component that displays the courses in the system in a table.\n*/\nfunction SessionsTable({sessions, students}) {\n    const [loading, setLoading] = useState(true);\n    const [studentSessionsDetails, setStudentSessionsDetails] = useState([]);\n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */ \n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"id\"\n                    data={ studentSessionsDetails }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'sessions.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    function studentDetails(){\n        let temp = [];\n        \n        for (var i in sessions){\n            for(var j in students){\n                if(sessions[i].studentID == students[j].studentId){\n                    temp.push(Object.assign({}, students[j], sessions[i]))\n                }\n            }\n        }\n\n        setStudentSessionsDetails(temp);\n\n        if(temp.length !=0 ){\n            setLoading(false);\n        }\n\n    };\n\n    useEffect(() => {\n        studentDetails();\n    }, [sessions, students]);\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n        </>\n\n    );        \n\n}\n\nexport default SessionsTable;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js",["291","292","293","294","295"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\n\n//TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\nconst columns = [\n    { dataField: 'name', text: 'Programme', csvText: 'name', sort: true },\n]\n\n/*\n    selectLevelOptions allows you to filter the level table column\n*/\nconst selectLevelOptions = {\n    I: 'I',\n    II: 'II',\n    III: 'III'\n};\n\n/*\n    selectSemesterOptions allows you to filter the semester table column\n*/\nconst selectSemesterOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\n/*\n    selectTypeOptions allows you to filter the type table column\n*/\nconst selectTypeOptions = {\n    Core: 'Core',\n    Elective: 'Elective'\n};\n\n/*\n    coursesColumns is used to display specific columns of the data on the courses table in the modal.\n    It also contains code that enables the columns to be filtered.\n*/\nconst coursesColumns = [\n    { \n        dataField: 'level', \n        text: 'Level', \n        sort: true,\n        formatter: cell => selectLevelOptions[cell],\n        filter: selectFilter({\n            options: selectLevelOptions,\n        })\n    },\n    { \n        dataField: 'semester', \n        text: 'Semester', \n        sort: true,\n        formatter: cell => selectSemesterOptions[cell],\n        filter: selectFilter({\n            options: selectSemesterOptions,\n        })\n    },\n    { \n        dataField: 'type', \n        text: 'Type', \n        sort: true,\n        formatter: cell => selectTypeOptions[cell],\n        filter: selectFilter({\n            options: selectTypeOptions,\n        })\n    },\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\n/*\n    defaultSorted and coursesSorted sorts the tables is ascending order based on the name column and level column respectively.\n*/\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asc'\n}];\n\nconst coursesSorted = [{\n    dataField: 'level',\n    order: 'asc'\n}];\n\n/*\n    options and courseOptions is used to configure the tables pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\n\n/*\n    ProgrammesTable is a component that displays the programmes in the system in a table.\n*/\nfunction ProgrammesTable({programmes, loading}) {\n\n    /*\n        The show state is used to keep track of the visibility of the view programme courses modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleClose sets the show state to false, which closes the modal.\n    */ \n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    /*\n        The programmeName state is used to keep track of the selected programme name.\n        The programmeCourses state is used to store the courses of the selected programme.\n        The loadingCourses state is used to keep track of getting the courses from the server. \n    */    \n    const [programmeName, setprogrammeName] = useState([]);\n    const [programmeCourses, setProgrammeCourses] = useState([]);\n    const [loadingCourses, setLoadingCourses] = useState(true);\n\n    /*\n        rowEvents is used to get the programme name of the selected row and get the courses of that programme.\n    */      \n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setprogrammeName(row.name);\n            getProgrammeCourses(row.id);\n        }\n    };    \n\n    /*\n        getProgrammeCourses creates a get request to the server that gets all the courses of this specified programme on the system and stores it in the programmeCourses state.\n    */\n    async function getProgrammeCourses(id) {\n        try {\n            setShow(true);\n            setProgrammeCourses([]);\n            setLoadingCourses(true);\n\n            const res = await fetch(\"/programmes/offered-courses/\" + id, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setProgrammeCourses(parseData);\n            setLoadingCourses(false);\n            \n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */ \n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"name\"\n                    data={ programmes }\n                    columns={ columns }\n                    search\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"xl\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{programmeName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                {loadingCourses ? (\n                <div class=\"d-flex justify-content-center\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n                ) : (\n                \n                <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ programmeCourses }\n                    columns={ coursesColumns }\n                    search\n                    >\n                    {\n                        props => (\n                        <div>\n                            <SearchBar { ...props.searchProps } />\n                            <ClearSearchButton { ...props.searchProps } />\n                            <BootstrapTable\n                            { ...props.baseProps } pagination={ paginationFactory(courseOptions) } defaultSorted={ coursesSorted } filter={ filterFactory() }\n                            />\n                            \n                        </div>\n                        )\n                    }\n                </ToolkitProvider>\n                )}                           \n              </Modal.Body>\n                \n            </Modal>  \n\n            \n\n\n\n        </>\n    );\n\n\n}\n\nexport default ProgrammesTable;\n","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/EditCourse.js",["296","297","298","299"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { NUMERIC } from \"sequelize\";\n\n/*\n    EditCourse allows staff to edit courses on the system.\n*/\n\nfunction EditCourse({setShow, row, refreshTable}) {\n    /*\n        The validated state is used to keep track of the validity of the editCourse form.\n        It's initial state is false.\n    */    \n    const [validated, setValidated] = useState(false);\n\n    /*\n        The checkBoxState array is used to keep track of the checked state of the checkboxes.\n        It's initial state is false.\n    */    \n    const [checkBoxStateSubmit, setCheckBoxStateSubmit] = useState(new Array(13).fill(false));\n    const [checkBoxStateExist, setCheckBoxStateExist] = useState(new Array(13).fill(false));\n\n    const assessments = [\"coursework\", \"finalExam\", \"groupProject\", \"individualWork\", \"practicalCoursework\", \"courseworkExam\", \n                        \"projectPres\", \"project\", \"presentation\", \"assignment\", \"labAssessment\", \"midSemesterMcq\", \n                        \"projectReport\"];\n\n    //get existing checkbox state\n    for(var j=0; j<assessments.length; j++){\n        if(row[assessments[j]]!=null){\n            checkBoxStateExist[j] = true;\n        }\n        else{\n            checkBoxStateExist[j] = false;\n        }\n    }\n    useEffect(() => {\n        setCheckBoxStateSubmit(checkBoxStateExist);\n    }, [])\n\n    /*\n        notifyEdit is used to display toast notifications when the course is edited. It displays a green toast.\n    */\n    const notifyEdit = (text) => toast.success(text);\n\n    /*\n        HandleChange gets the checkboxes that were checked and stores them in an array.\n    */    \n        const handleChange = (event) => {\n            \n            const updateCheckboxState = checkBoxStateSubmit.map((checkbox, count) => {\n                if(count === parseInt(event.target.id)){\n                    return !checkbox;\n                }\n                else{\n                    return checkbox;\n                }\n                \n            });\n            setCheckBoxStateSubmit(updateCheckboxState);\n        };\n\n    /*\n        HandleSubmit gets the data from the form and passes it to the editCourse function.\n    */    \n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        setValidated(true);\n\n        const formData = {\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\n            courseTitle : form.elements.courseTitle.value,\n            credits : form.elements.credits.value,\n            semester : form.elements.semester.value,\n            level : form.elements.level.value,\n            type: form.elements.type.value,\n            prerequisites : form.elements.prerequisites.value,\n            description: form.elements.description.value,\n            coursework: String(form.elements.coursework.value) + \"%\",\n            finalExam: String(form.elements.finalExam.value) + \"%\",\n            groupProject: String(form.elements.groupProject.value) + \"%\",\n            individualWork: String(form.elements.individualWork.value) + \"%\",\n            practicalCoursework: String(form.elements.practicalCoursework.value) + \"%\",\n            courseworkExam: String(form.elements.courseworkExam.value) + \"%\",\n            projectPres: String(form.elements.projectPres.value) + \"%\",\n            project: String(form.elements.project.value) + \"%\",\n            presentation: String(form.elements.presentation.value) + \"%\",\n            assignment: String(form.elements.assignment.value) + \"%\",\n            labAssessment: String(form.elements.labAssessment.value) + \"%\",\n            midSemesterMcq: String(form.elements.midSemesterMcq.value) + \"%\",\n            projectReport: String(form.elements.projectReport.value) + \"%\"\n        }\n\n        //Get the unselected assessments and set them to null\n        for(var i=0; i<checkBoxStateSubmit.length; i++){\n            if(checkBoxStateSubmit[i] === false){\n                formData[assessments[i]] = null;\n            }\n        }\n\n        editCourse(formData, row.courseCode);\n    };\n\n    /*\n        editCourse creates a put request to the server, which edits the specified course.\n    */    \n    async function editCourse(data, code) {\n        try {\n          const res = await fetch(\"/courses/edit/\" + code, {\n            method: \"PUT\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n    \n          setShow(false);\n          refreshTable();\n          notifyEdit(data.courseCode + \" Edited!\")\n\n          const status = await res.statusText;\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    const styleCheckbox = {\n        marginTop: \"10px\",\n        marginLeft: \"20px\",\n        marginRight: \"10px\"\n    };\n\n    //get the number from the string percentage for assessments\n    function getPercentNumFromString(text){\n        if(text!=null){\n            const array = text.split('%');\n            const number = parseInt(array[0]);\n            return number;\n        }\n        else{\n            return text;\n        }\n    }\n\n    //get default value for checkbox\n    function getCheckboxState(text){\n        if(text!=null){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"courseCode\">\n                    <Form.Label>Course Code</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.courseCode}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"courseTitle\">\n                    <Form.Label>Course Title</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.courseTitle}/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Form.Group as={Col} md=\"3\" controlId=\"credits\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.credits}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"3\" controlId=\"semester\">\n                        <Form.Label>Semester</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.semester}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"3\" controlId=\"level\">\n                        <Form.Label>Level</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.level}>\n                            <option>I</option>\n                            <option>II</option>\n                            <option>III</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"3\" controlId=\"type\">\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.type}>\n                            <option>Core</option>\n                            <option>Elective</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"assessment\">\n                        <Form.Label>Assessments</Form.Label>\n        \n                        <Form.Group as={Col} controlId=\"coursework\" className=\"form-inline\">\n                            <Form.Check label=\"Coursework\" id=\"0\" name=\"Coursework\" onChange={handleChange} defaultChecked={getCheckboxState(row.coursework)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.coursework)}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"finalExam\" className=\"form-inline\">\n                            <Form.Check label=\"Final Exam\" id=\"1\" name=\"Final Exam\" onChange={handleChange} defaultChecked={getCheckboxState(row.finalExam)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.finalExam)}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"groupProject\" className=\"form-inline\">\n                            <Form.Check label=\"Group Project\" id=\"2\" name=\"Group Project\" onChange={handleChange} defaultChecked={getCheckboxState(row.groupProject)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.groupProject)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"individualWork\" className=\"form-inline\">\n                            <Form.Check label=\"Individual Work\" id=\"3\" name=\"Individual Work\" onChange={handleChange} defaultChecked={getCheckboxState(row.individualWork)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.individualWork)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"practicalCoursework\" className=\"form-inline\">\n                            <Form.Check label=\"Practical Coursework\" id=\"4\" name=\"Practical Coursework\" onChange={handleChange} defaultChecked={getCheckboxState(row.practicalCoursework)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.practicalCoursework)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"courseworkExam\" className=\"form-inline\">\n                            <Form.Check label=\"Coursework Exam\" id=\"5\" name=\"Coursework Exam\" onChange={handleChange} defaultChecked={getCheckboxState(row.courseworkExam)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.courseworkExam)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"projectPres\" className=\"form-inline\">\n                            <Form.Check label=\"Project Presentation\" id=\"6\" name=\"Project Presentation\" onChange={handleChange} defaultChecked={getCheckboxState(row.projectPres)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.projectPres)}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"project\" className=\"form-inline\">\n                            <Form.Check label=\"Project\" id=\"7\" name=\"Project\" onChange={handleChange} defaultChecked={getCheckboxState(row.project)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.project)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"presentation\" className=\"form-inline\">\n                            <Form.Check label=\"Presentation\" id=\"8\" name=\"Presentation\" onChange={handleChange} defaultChecked={getCheckboxState(row.presentation)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.presentation)}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"assignment\" className=\"form-inline\">\n                            <Form.Check label=\"Assignment\" id=\"9\" name=\"Assignment\" onChange={handleChange} defaultChecked={getCheckboxState(row.assignment)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.assignment)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"labAssessment\" className=\"form-inline\">\n                            <Form.Check label=\"Lab Assessment\" id=\"10\" name=\"Lab Assessment\" onChange={handleChange} defaultChecked={getCheckboxState(row.labAssessment)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.labAssessment)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"midSemesterMcq\" className=\"form-inline\">\n                            <Form.Check label=\"Mid Semester MCQ\" id=\"11\" name=\"Mid Semester MCQ\" onChange={handleChange} defaultChecked={getCheckboxState(row.midSemesterMcq)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.midSemesterMcq)}/>\n                        </Form.Group>\n                        \n                        <Form.Group as={Col} controlId=\"projectReport\" className=\"form-inline\">\n                            <Form.Check label=\"Project Report\" id=\"12\" name=\"Project Report\" onChange={handleChange} defaultChecked={getCheckboxState(row.projectReport)} style={styleCheckbox}></Form.Check>\n                            <Form.Control type=\"number\" min=\"0\" max=\"100\" defaultValue={getPercentNumFromString(row.projectReport)}/>\n                        </Form.Group>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Group controlId=\"prerequisites\">\n                    <Form.Label>Prerequisites</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.prerequisites}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control required as=\"textarea\" rows={5} defaultValue={row.description}/>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default EditCourse;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlock.js",[],["300","301"],"/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddCourseToProgramme.js",["302","303","304","305","306","307","308"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport PullProgrammes from \"../PullProgrammes\";\nimport PullCourses from \"../PullCourses\";\n\n/*\n    AddCourseToProgramme allows a staff member to add offered courses to a programme in the system.\n*/\n\nfunction AddCourseToProgramme({setShowAddCourseProg, refreshTable}) {\n    /*\n        The validated state is used to keep track of the validity of the add course to programme form.\n        It's initial state is false.\n    */    \n        const [validated, setValidated] = useState(false);\n\n        const [programme, setProgramme] = useState(\"None\"); // Store which programme was selected\n        const [course, setCourse] = useState(\"None\"); // Store which course was selected\n\n        var programmes = PullProgrammes(); // Get all degree programmes from the database\n        var courses = PullCourses(); // Get all degree courses from the database\n        //console.log(programmes)\n\n        \n            \n            \n        \n\n        /*\n            notifyAdded is used to display toast notifications for events. It displays a green toast.\n        */    \n        const notifyAdded = (text) => toast.success(text);\n    \n        /*\n            notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n        */    \n            const notifyNotAdded = (text) => toast.error(text);\n\n        /*\n        HandleSubmit gets the data from the form as passes it to the addCourseToProgramme function.\n    */    \n        const handleSubmit = (event) => {\n            const form = event.currentTarget;\n    \n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n    \n            event.preventDefault();\n            event.stopPropagation();\n            setValidated(true);\n\n            const programmeName = form.elements.programmename.value;//get programme name from the form\n            const courseFullName = form.elements.coursefullname.value;//get the course full name from the form\n\n            //To get the programmeID of the selected programme\n            const programmeFound = programmes.find(p => {\n                return p.name === programmeName;\n            })\n            const programmeId = programmeFound.id;\n\n            //To get the courseID of the selected course\n            const courseFound = courses.find(c => {\n                const cFullName = c.courseCode + \" \" + c.courseTitle;\n                return cFullName === courseFullName;\n            })\n            const courseId = courseFound.id;\n            \n            const formData = {\n                programmeID : programmeId,\n                courseID : courseId\n            }\n            addCourseToProgramme(formData)\n        };\n\n        /*\n            addCourseToProgramme creates a post request to the server, which adds a new course to a programme in the system.\n        */\n        async function addCourseToProgramme(data) {\n            try {\n              const res = await fetch(\"/programmes/add/\" + data.programmeID + \"/\" + data.courseID, {\n                method: \"POST\",\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify(data),\n              });\n        \n              setShowAddCourseProg(false);\n              refreshTable();\n\n              const status = await res.statusText;\n\n              if(res.status==401){\n                notifyNotAdded(\"Course Already Added to Programme!\");\n              }\n              else{\n                if(res.status===200){\n                    notifyAdded(\"Course Added to Programme!\");\n                }\n              }\n                \n            } catch (err) {\n              console.error(err.message);\n            }\n            \n        }\n\n        return (<>\n                <Form validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"programmename\">\n                        <Form.Label>Select Programme</Form.Label>\n                            <Form.Control required as=\"select\">\n                                <option value=\"None\">Choose a programme</option>\n                                {\n                                    Array.from({length: programmes.length}, (_, k) => {\n                                        return <option value={programmes[k].name}>{programmes[k].name}</option> \n                                    })\n                                }\n                                \n                            </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"coursefullname\">\n                        <Form.Label>Select Course</Form.Label>\n                            <Form.Control required as=\"select\">\n                                <option value=\"None\">Choose a course</option>\n                                {\n                                    Array.from({length: courses.length}, (_, j) => {\n                                        return <option value={courses[j].courseCode + \" \" + courses[j].courseTitle}>{courses[j].courseCode + \" \" + courses[j].courseTitle}</option> \n                                    })\n                                }\n                            </Form.Control>\n                    </Form.Group> \n        \n                    <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n                </Form>\n    \n                <ToastContainer \n                    pauseOnHover\n                    position=\"bottom-right\"\n                />\n        </>\n        );\n}\n\nexport default AddCourseToProgramme;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/AddProgramme.js",["309","310","311","312"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    AddProgramme allows a staff member to add programmes to the system.\n*/\n\nfunction AddProgramme({setShow, refreshTable}) {\n    /*\n        The validated state is used to keep track of the validity of the add programme form.\n        It's initial state is false.\n    */    \n    const [validated, setValidated] = useState(false);\n\n    /*\n        notifyAdded is used to display toast notifications for events. It displays a green toast.\n    */    \n    const notifyAdded = (text) => toast.success(text);\n\n    /*\n        notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n    */    \n        const notifyNotAdded = (text) => toast.error(text);\n\n    /*\n        HandleSubmit gets the data from the form as passes it to the addProgramme function.\n    */    \n        const handleSubmit = (event) => {\n            const form = event.currentTarget;\n    \n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n    \n            event.preventDefault();\n            event.stopPropagation();\n            setValidated(true);\n    \n            const formData = {\n                name : form.elements.name.value\n            }\n    \n            addProgramme(formData)\n        };\n    \n        /*\n            addProgramme creates a post request to the server, which adds a new programme to the system.\n        */\n        async function addProgramme(data) {\n            try {\n              const res = await fetch(\"/programmes/add\", {\n                method: \"POST\",\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify(data),\n              });\n        \n              setShow(false);\n              refreshTable();\n\n              const status = await res.statusText;\n              \n              if(res.status==401){\n                notifyNotAdded(data.name + \" Already Exists!\");\n              }\n              else{\n                if(res.status==200){\n                    notifyAdded(data.name + \" Added!\");\n                }\n              }\n              \n            } catch (err) {\n              console.error(err.message);\n            }\n        }\n    \n        return (\n            <>\n                <Form validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"name\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control required type=\"text\"/>\n                    </Form.Group>\n    \n                    <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Add</Button></div>\n                </Form>\n    \n                <ToastContainer \n                    pauseOnHover\n                    position=\"bottom-right\"\n                />\n            </>\n        );\n}\n\nexport default AddProgramme;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/DeleteProgramme.js",["313","314","315","316"],"import React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n/*\n    DeleteProgramme allows a staff member to delete programmes from the system.\n*/\n\nfunction DeleteProgramme({setLoading, setShowDeleteProg, programmes, refreshTable}) {\n    const progs = programmes.sort((a, b) => (a.name < b.name ? -1 : 1));//sort in ascending order by name\n            \n    /*\n        The validated state is used to keep track of the validity of the delete programme form.\n        It's initial state is false.\n    */    \n    const [validated, setValidated] = useState(false); \n\n    /*\n        The checkBoxState array is used to keep track of the checked state of the checkboxes.\n        It's initial state is false.\n    */    \n    const [checkBoxState, setCheckBoxState] = useState(new Array(progs.length).fill(false));\n\n    /*\n        notifyAdded is used to display toast notifications for events. It displays a green toast.\n    */    \n    const notifyDeleted = (text) => toast.success(text);\n\n    /*\n        notifyNotAdded is used to display toast notifications for events. It displays a red toast.\n    */    \n        const notifyNotDeleted = (text) => toast.error(text);\n\n    /*\n        HandleChange gets the checkboxes that were checked and stores them in an array.\n    */    \n        const handleChange = (event, index) => {\n\n            const updateCheckboxState = checkBoxState.map((checkbox, count) => {\n                if(count === index){\n                    return !checkbox;\n                }\n                else{\n                    return checkbox;\n                }\n            });\n            setCheckBoxState(updateCheckboxState);\n        };\n\n    /*\n        HandleSubmit gets the data from the form as passes it to the deleteProgramme function.\n    */    \n        const handleSubmit = (event) => {\n            //const selectedProgrammes = [];\n            \n            const form = event.currentTarget;\n    \n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n    \n            event.preventDefault();\n            event.stopPropagation();\n            setValidated(true);\n\n            //Get the selected programmes and store them in an array\n            for(var i=0; i<checkBoxState.length; i++){\n                if(checkBoxState[i] === true){\n                    const programmeObject = {\n                        id: progs[i].id,\n                        name: progs[i].name\n                    };\n                    //selectedProgrammes.push(programmeObject);\n                    deleteProgramme(programmeObject);\n                }\n            }\n        };\n    \n        /*\n            deleteProgramme creates a post request to the server, which deletes a programme from the system.\n        */\n        async function deleteProgramme(data) {\n            try {\n              const res = await fetch(\"/programmes/delete/\" + data.name, {\n                method: \"DELETE\",\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    //\"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify(data),\n              });\n        \n              setShowDeleteProg(false);\n              setLoading(false);\n              refreshTable();\n\n              const status = await res.statusText;\n\n              if(res.status==401){\n                notifyNotDeleted(data.name + \" not deleted!\");\n              }\n              else{\n                if(res.status===200){\n                    notifyDeleted(data.name + \" Deleted!\");\n                }\n              }\n            } catch (err) {\n              console.error(err.message);\n            }\n        }\n    \n        return (\n            <>\n                <Form validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"name\">\n                        <Form.Label>Choose Programme</Form.Label>\n                        {progs.map((programme, indexNum) => (\n                            \n                            <Form.Check \n                                label={programme.name}\n                                name={programme.name}\n                                onChange={event => handleChange(event, indexNum)}\n                                style={{margin:5, marginTop:10}}\n                            />\n                        ))}\n                    </Form.Group>\n    \n                    <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Delete</Button></div>\n                </Form>\n    \n                <ToastContainer \n                    pauseOnHover\n                    position=\"bottom-right\"\n                />\n            </>\n        );\n}\n\nexport default DeleteProgramme;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/PotentialGraduates.js",["317","318"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Jumbotron } from \"react-bootstrap\";\nimport PotentialGraduatesTable from \"./PotentialGraduatesTable\";\n\n/*\n    PotentialGraduates is a component that displays the potential graduates table component.\n*/\nfunction PotentialGraduates(){\n    /*\n        The potentialGraduates state is used store all the potential graduates that will be displayed in the table.\n        The loading state is used to keep track of getting the potential graduates from the server. \n        It's initial state is true, so the table will not be displayed until the system has fetched all potential graduates.\n    */ \n        const [potentialGraduates, setPotentialGraduates] = useState([]);\n        const [loading, setLoading] = useState(true);\n\n    async function getPotentialGraduates(){\n        try{\n            const res = await fetch(\"/admin/potential-graduates/students\", {\n                method: \"GET\",\n            });\n            const parseData = await res.json();\n            setPotentialGraduates(parseData);\n        }\n        catch(err){\n            console.error(err.message);\n        }\n    }\n\n    useEffect(() => {\n        getPotentialGraduates();\n    }, []);\n\n\n    return (\n        <>\n            <Jumbotron fluid>\n                <Container>\n                    <h2>Potential Graduates</h2>\n                </Container>\n            </Jumbotron>\n            <div class=\"container\">\n                <div class=\"row mt-4\">\n                    {/* Potential Graduates Table */}\n                    <div class=\"col-12\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-body shadow-sm\">\n                                <PotentialGraduatesTable potentialGraduates={potentialGraduates}></PotentialGraduatesTable>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default PotentialGraduates;","/home/ubuntu/myAdvisorDev/myadvisor/src/components/Staff/PotentialGraduatesTable.js",["319","320"],"import ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\n\n//TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\n\nconst columns = [\n    { dataField: 'studentId', text: 'Student Id', csvText: 'Student Id', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'degree', text: 'Degree', csvText: 'Degree', sort: true}\n    \n]\n\n/*\n    defaultSorted sorts the tables is ascending order based on the name column.\n*/\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asc'\n}];\n\n/*\n    options is used to configure the table pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\n\nfunction PotentialGraduatesTable({potentialGraduates}){\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                keyField=\"studentId\"\n                data={ potentialGraduates }\n                columns={ columns }\n                search\n                exportCSV={{\n                    fileName: 'potentialgraduates.csv',\n                }}\n            >\n                {\n                    props => (\n                        <div>\n                            <SearchBar { ...props.searchProps } />\n                            <ClearSearchButton { ...props.searchProps } />\n                            <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                            <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted }/>\n                        </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n            \n        </>\n    );\n\n    return (\n        <>\n        <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n        </PaginationProvider>\n        </>\n    )\n}\n\nexport default PotentialGraduatesTable;",{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":1,"column":50,"nodeType":"327","messageId":"328","endLine":1,"endColumn":58},{"ruleId":"325","severity":1,"message":"329","line":2,"column":27,"nodeType":"327","messageId":"328","endLine":2,"endColumn":33},{"ruleId":"330","severity":1,"message":"331","line":175,"column":41,"nodeType":"332","messageId":"333","endLine":175,"endColumn":43},{"ruleId":"330","severity":1,"message":"331","line":177,"column":49,"nodeType":"332","messageId":"333","endLine":177,"endColumn":51},{"ruleId":"330","severity":1,"message":"331","line":193,"column":49,"nodeType":"332","messageId":"333","endLine":193,"endColumn":51},{"ruleId":"330","severity":1,"message":"331","line":195,"column":49,"nodeType":"332","messageId":"333","endLine":195,"endColumn":51},{"ruleId":"325","severity":1,"message":"334","line":6,"column":8,"nodeType":"327","messageId":"328","endLine":6,"endColumn":21},{"ruleId":"335","severity":1,"message":"336","line":168,"column":77,"nodeType":"337","messageId":"338","endLine":168,"endColumn":79},{"ruleId":"335","severity":1,"message":"336","line":174,"column":77,"nodeType":"337","messageId":"338","endLine":174,"endColumn":79},{"ruleId":"335","severity":1,"message":"336","line":180,"column":77,"nodeType":"337","messageId":"338","endLine":180,"endColumn":79},{"ruleId":"335","severity":1,"message":"336","line":186,"column":77,"nodeType":"337","messageId":"338","endLine":186,"endColumn":79},{"ruleId":"325","severity":1,"message":"339","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"340","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":19},{"ruleId":"325","severity":1,"message":"339","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"339","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"341","line":15,"column":12,"nodeType":"327","messageId":"328","endLine":15,"endColumn":23},{"ruleId":"342","severity":1,"message":"343","line":111,"column":8,"nodeType":"344","endLine":111,"endColumn":10,"suggestions":"345"},{"ruleId":"346","severity":1,"message":"347","line":140,"column":21,"nodeType":"327","messageId":"348","endLine":140,"endColumn":35},{"ruleId":"342","severity":1,"message":"349","line":206,"column":8,"nodeType":"344","endLine":206,"endColumn":31,"suggestions":"350"},{"ruleId":"325","severity":1,"message":"351","line":210,"column":20,"nodeType":"327","messageId":"328","endLine":210,"endColumn":41},{"ruleId":"325","severity":1,"message":"339","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"342","severity":1,"message":"343","line":19,"column":8,"nodeType":"344","endLine":19,"endColumn":10,"suggestions":"352"},{"ruleId":"325","severity":1,"message":"339","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"353","line":17,"column":11,"nodeType":"327","messageId":"328","endLine":17,"endColumn":21},{"ruleId":"325","severity":1,"message":"354","line":28,"column":9,"nodeType":"327","messageId":"328","endLine":28,"endColumn":26},{"ruleId":"342","severity":1,"message":"355","line":46,"column":5,"nodeType":"327","endLine":46,"endColumn":14,"suggestions":"356"},{"ruleId":"330","severity":1,"message":"357","line":55,"column":50,"nodeType":"332","messageId":"333","endLine":55,"endColumn":52},{"ruleId":"325","severity":1,"message":"358","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"326","line":2,"column":16,"nodeType":"327","messageId":"328","endLine":2,"endColumn":24},{"ruleId":"325","severity":1,"message":"359","line":64,"column":17,"nodeType":"327","messageId":"328","endLine":64,"endColumn":20},{"ruleId":"325","severity":1,"message":"360","line":12,"column":10,"nodeType":"327","messageId":"328","endLine":12,"endColumn":22},{"ruleId":"325","severity":1,"message":"361","line":96,"column":24,"nodeType":"327","messageId":"328","endLine":96,"endColumn":39},{"ruleId":"325","severity":1,"message":"359","line":98,"column":21,"nodeType":"327","messageId":"328","endLine":98,"endColumn":24},{"ruleId":"325","severity":1,"message":"362","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"325","severity":1,"message":"339","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"340","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":19},{"ruleId":"325","severity":1,"message":"362","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"325","severity":1,"message":"362","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"330","severity":1,"message":"357","line":118,"column":92,"nodeType":"332","messageId":"333","endLine":118,"endColumn":94},{"ruleId":"325","severity":1,"message":"362","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"342","severity":1,"message":"363","line":23,"column":8,"nodeType":"344","endLine":23,"endColumn":10,"suggestions":"364"},{"ruleId":"325","severity":1,"message":"362","line":1,"column":8,"nodeType":"327","messageId":"328","endLine":1,"endColumn":13},{"ruleId":"342","severity":1,"message":"365","line":23,"column":8,"nodeType":"344","endLine":23,"endColumn":10,"suggestions":"366"},{"ruleId":"325","severity":1,"message":"367","line":5,"column":17,"nodeType":"327","messageId":"328","endLine":5,"endColumn":23},{"ruleId":"325","severity":1,"message":"368","line":75,"column":17,"nodeType":"327","messageId":"328","endLine":75,"endColumn":23},{"ruleId":"325","severity":1,"message":"368","line":136,"column":17,"nodeType":"327","messageId":"328","endLine":136,"endColumn":23},{"ruleId":"325","severity":1,"message":"369","line":4,"column":10,"nodeType":"327","messageId":"328","endLine":4,"endColumn":24},{"ruleId":"325","severity":1,"message":"370","line":35,"column":15,"nodeType":"327","messageId":"328","endLine":35,"endColumn":18},{"ruleId":"325","severity":1,"message":"371","line":73,"column":11,"nodeType":"327","messageId":"328","endLine":73,"endColumn":21},{"ruleId":"325","severity":1,"message":"372","line":83,"column":12,"nodeType":"327","messageId":"328","endLine":83,"endColumn":26},{"ruleId":"330","severity":1,"message":"357","line":122,"column":32,"nodeType":"332","messageId":"333","endLine":122,"endColumn":34},{"ruleId":"330","severity":1,"message":"331","line":134,"column":32,"nodeType":"332","messageId":"333","endLine":134,"endColumn":34},{"ruleId":"342","severity":1,"message":"373","line":144,"column":8,"nodeType":"344","endLine":144,"endColumn":10,"suggestions":"374"},{"ruleId":"325","severity":1,"message":"375","line":5,"column":25,"nodeType":"327","messageId":"328","endLine":5,"endColumn":37},{"ruleId":"325","severity":1,"message":"376","line":14,"column":7,"nodeType":"327","messageId":"328","endLine":14,"endColumn":24},{"ruleId":"330","severity":1,"message":"331","line":112,"column":42,"nodeType":"332","messageId":"333","endLine":112,"endColumn":44},{"ruleId":"330","severity":1,"message":"357","line":121,"column":24,"nodeType":"332","messageId":"333","endLine":121,"endColumn":26},{"ruleId":"342","severity":1,"message":"377","line":129,"column":7,"nodeType":"344","endLine":129,"endColumn":27,"suggestions":"378"},{"ruleId":"330","severity":1,"message":"331","line":85,"column":42,"nodeType":"332","messageId":"333","endLine":85,"endColumn":44},{"ruleId":"330","severity":1,"message":"357","line":93,"column":24,"nodeType":"332","messageId":"333","endLine":93,"endColumn":26},{"ruleId":"342","severity":1,"message":"377","line":101,"column":8,"nodeType":"344","endLine":101,"endColumn":28,"suggestions":"379"},{"ruleId":"325","severity":1,"message":"340","line":1,"column":27,"nodeType":"327","messageId":"328","endLine":1,"endColumn":36},{"ruleId":"325","severity":1,"message":"380","line":4,"column":35,"nodeType":"327","messageId":"328","endLine":4,"endColumn":44},{"ruleId":"325","severity":1,"message":"381","line":6,"column":17,"nodeType":"327","messageId":"328","endLine":6,"endColumn":21},{"ruleId":"325","severity":1,"message":"382","line":6,"column":23,"nodeType":"327","messageId":"328","endLine":6,"endColumn":26},{"ruleId":"325","severity":1,"message":"371","line":126,"column":11,"nodeType":"327","messageId":"328","endLine":126,"endColumn":21},{"ruleId":"325","severity":1,"message":"383","line":6,"column":10,"nodeType":"327","messageId":"328","endLine":6,"endColumn":17},{"ruleId":"325","severity":1,"message":"384","line":24,"column":32,"nodeType":"327","messageId":"328","endLine":24,"endColumn":53},{"ruleId":"342","severity":1,"message":"385","line":41,"column":8,"nodeType":"344","endLine":41,"endColumn":10,"suggestions":"386"},{"ruleId":"325","severity":1,"message":"368","line":131,"column":17,"nodeType":"327","messageId":"328","endLine":131,"endColumn":23},{"ruleId":"321","replacedBy":"387"},{"ruleId":"323","replacedBy":"388"},{"ruleId":"325","severity":1,"message":"389","line":2,"column":24,"nodeType":"327","messageId":"328","endLine":2,"endColumn":27},{"ruleId":"325","severity":1,"message":"390","line":21,"column":16,"nodeType":"327","messageId":"328","endLine":21,"endColumn":25},{"ruleId":"325","severity":1,"message":"391","line":21,"column":27,"nodeType":"327","messageId":"328","endLine":21,"endColumn":39},{"ruleId":"325","severity":1,"message":"392","line":22,"column":16,"nodeType":"327","messageId":"328","endLine":22,"endColumn":22},{"ruleId":"325","severity":1,"message":"393","line":22,"column":24,"nodeType":"327","messageId":"328","endLine":22,"endColumn":33},{"ruleId":"325","severity":1,"message":"368","line":98,"column":21,"nodeType":"327","messageId":"328","endLine":98,"endColumn":27},{"ruleId":"330","severity":1,"message":"331","line":100,"column":28,"nodeType":"332","messageId":"333","endLine":100,"endColumn":30},{"ruleId":"325","severity":1,"message":"389","line":2,"column":24,"nodeType":"327","messageId":"328","endLine":2,"endColumn":27},{"ruleId":"325","severity":1,"message":"368","line":67,"column":21,"nodeType":"327","messageId":"328","endLine":67,"endColumn":27},{"ruleId":"330","severity":1,"message":"331","line":69,"column":28,"nodeType":"332","messageId":"333","endLine":69,"endColumn":30},{"ruleId":"330","severity":1,"message":"331","line":73,"column":30,"nodeType":"332","messageId":"333","endLine":73,"endColumn":32},{"ruleId":"325","severity":1,"message":"394","line":1,"column":27,"nodeType":"327","messageId":"328","endLine":1,"endColumn":33},{"ruleId":"325","severity":1,"message":"389","line":2,"column":24,"nodeType":"327","messageId":"328","endLine":2,"endColumn":27},{"ruleId":"325","severity":1,"message":"368","line":100,"column":21,"nodeType":"327","messageId":"328","endLine":100,"endColumn":27},{"ruleId":"330","severity":1,"message":"331","line":102,"column":28,"nodeType":"332","messageId":"333","endLine":102,"endColumn":30},{"ruleId":"325","severity":1,"message":"395","line":15,"column":16,"nodeType":"327","messageId":"328","endLine":15,"endColumn":23},{"ruleId":"325","severity":1,"message":"396","line":15,"column":25,"nodeType":"327","messageId":"328","endLine":15,"endColumn":35},{"ruleId":"325","severity":1,"message":"397","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":21},{"ruleId":"325","severity":1,"message":"375","line":4,"column":25,"nodeType":"327","messageId":"328","endLine":4,"endColumn":37},"no-native-reassign",["398"],"no-negated-in-lhs",["399"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CourseDetails' is defined but never used.","array-callback-return","Array.from() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Component' is defined but never used.","'useEffect' is defined but never used.","'allPotGrads' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["400"],"no-redeclare","'requestOptions' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'props' and 'uploaded'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["401"],"'uploadAdvisingSession' is defined but never used.",["402"],"'newDegProg' is assigned a value but never used.","'courseInProgCreds' is assigned a value but never used.","React Hook useEffect contains a call to 'setUploaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, details.credits, details.gpa, details.length, details.progress, getCreditsInprogressCourses, processed, programmes, determineCourses] as a second argument to the useEffect Hook.",["403"],"Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'res' is assigned a value but never used.","'confirmAlert' is defined but never used.","'deleteProgramme' is defined but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.",["404"],"React Hook useEffect has a missing dependency: 'getCourses'. Either include it or remove the dependency array.",["405"],"'Button' is defined but never used.","'status' is assigned a value but never used.","'ToastContainer' is defined but never used.","'url' is assigned a value but never used.","'handleShow' is assigned a value but never used.","'studentCourses' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStudentCourses'. Either include it or remove the dependency array.",["406"],"'selectFilter' is defined but never used.","'selectYearOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'studentDetails'. Either include it or remove the dependency array.",["407"],["408"],"'CSVExport' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'NUMERIC' is defined but never used.","'setCheckBoxStateExist' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkBoxStateExist'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCheckBoxStateSubmit' needs the current value of 'checkBoxStateExist'.",["409"],["398"],["399"],"'Col' is defined but never used.","'programme' is assigned a value but never used.","'setProgramme' is assigned a value but never used.","'course' is assigned a value but never used.","'setCourse' is assigned a value but never used.","'useRef' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'filterFactory' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"410","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"423","fix":"425"},{"desc":"426","fix":"427"},"Update the dependencies array to be: [props]",{"range":"428","text":"429"},"Update the dependencies array to be: [props, totalCreditsCompleted, uploaded]",{"range":"430","text":"431"},{"range":"432","text":"429"},"Add dependencies array: [props, details.credits, details.gpa, details.length, details.progress, getCreditsInprogressCourses, processed, programmes, determineCourses]",{"range":"433","text":"434"},"Update the dependencies array to be: [getDetails]",{"range":"435","text":"436"},"Update the dependencies array to be: [getCourses]",{"range":"437","text":"438"},"Update the dependencies array to be: [getStudentCourses]",{"range":"439","text":"440"},"Update the dependencies array to be: [sessions, studentDetails, students]",{"range":"441","text":"442"},{"range":"443","text":"442"},"Update the dependencies array to be: [checkBoxStateExist]",{"range":"444","text":"445"},[3908,3910],"[props]",[7811,7834],"[props, totalCreditsCompleted, uploaded]",[891,893],[4234,4234],", [props, details.credits, details.gpa, details.length, details.progress, getCreditsInprogressCourses, processed, programmes, determineCourses]",[582,584],"[getDetails]",[591,593],"[getCourses]",[4762,4764],"[getStudentCourses]",[3944,3964],"[sessions, studentDetails, students]",[3287,3307],[1516,1518],"[checkBoxStateExist]"]